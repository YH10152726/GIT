Option Explicit

' === モジュールレベル定数 ===
Private Const SHEET_KOUTEIHYO As String = "工程表"
Private Const SHEET_KOUTEI_TIMES As String = "シート2" ' ★工数管理シート名

' 入力列 (工程表シート)
Private Const COL_Z_INPUT As Long = 26      ' Z列：コーティング or サブゼロ
Private Const COL_AC_INPUT As Long = 29     ' AC列：材質
Private Const COL_AD_SIZE_INPUT As Long = 30  ' AD列：サイズ (例: 10*20*30)
Private Const COL_AH_ITEMNAME_INPUT As Long = 34 ' AH列：品名
Private Const COL_Y_REMARKS_INPUT As Long = 25    ' Y列：備考

' 出力列 (工程表シート)
Private Const COL_KOUTEI As Long = 36               ' AJ列: 工程名
Private Const COL_GYOUSHA As Long = 38              ' AL列: 業者
Private Const COL_MAE_DANDORI_OUTPUT As Long = 39   ' ★AM列: 前段取
Private Const COL_JINKAN_YUJIN As Long = 40         ' AN列: 工数: 有人
Private Const COL_JINKAN_MACHINE As Long = 41       ' AO列: 工数: 機械
Private Const COL_JINKAN_SETUP As Long = 42         ' AP列: 工数: 段取 (後段取)
Private Const COL_BIKOU As Long = 45                ' AS列: 備考

' 工数シート列定義 (シート2)
Private Const COL_TIME_KEY As Long = 1              ' A列: 工程キー
Private Const COL_TIME_MAE_DANDORI As Long = 2      ' ★B列: 前段取時間
Private Const COL_TIME_YUJIN As Long = 3            ' ★C列: 有人時間
Private Const COL_TIME_MACHINE As Long = 4          ' ★D列: 機械時間
Private Const COL_TIME_SETUP As Long = 5            ' ★E列: 段取時間 (後段取)
Private Const COL_TIME_REMARKS As Long = 6          ' ★F列: 備考 (シート2の一般的な備考、これが工程表AS列へ)
Private Const COL_TIME_REMARKS_DETAIL As Long = 7   ' ★G列: 詳細備考 (ユーザー確認用、工程表へは出力しない)


' === モジュールレベル変数 ===
Private processTimesDict As Object ' ★工程別工数・備考格納用Dictionary

' === サイズ文字列に基づいて部品を分類する関数 ===
Private Function ClassifyPartBasedOnSizeString(ByVal sizeString As String) As String
    Dim dimsStr() As String
    Dim original_dim1 As Double, original_dim2 As Double, original_dim3 As Double
    Dim d_small As Double, d_mid As Double, d_large As Double
    Dim Volume As Double, Ratio1 As Double, Ratio2 As Double
    Dim Cond1_Result As Boolean, Cond2_Result As Boolean
    Dim Cond3_Result As Boolean, Cond4_Result As Boolean

    ClassifyPartBasedOnSizeString = "-"
    If Trim(sizeString) = "" Then Exit Function
    dimsStr = Split(Trim(sizeString), "*")
    If UBound(dimsStr) <> 2 Then Exit Function

    On Error Resume Next
    original_dim1 = CDbl(dimsStr(0))
    original_dim2 = CDbl(dimsStr(1))
    original_dim3 = CDbl(dimsStr(2))
    If Err.Number <> 0 Then
        On Error GoTo 0
        Exit Function
    End If
    On Error GoTo 0

    Dim dims(0 To 2) As Double
    dims(0) = original_dim1
    dims(1) = original_dim2
    dims(2) = original_dim3
    Dim i As Integer, j As Integer, temp As Double
    For i = 0 To UBound(dims) - 1
        For j = i + 1 To UBound(dims)
            If dims(i) > dims(j) Then
                temp = dims(i)
                dims(i) = dims(j)
                dims(j) = temp
            End If
        Next j
    Next i
    d_small = dims(0)
    d_mid = dims(1)
    d_large = dims(2)

    Volume = d_small * d_mid * d_large
    If d_mid = 0 Then Ratio1 = 1E+99 Else Ratio1 = d_small / d_mid
    If d_large = 0 Then Ratio2 = 1E+99 Else Ratio2 = d_small / d_large

    Cond1_Result = (d_small <= 56)
    Cond2_Result = ((Ratio1 < 0.6 And Ratio2 < 0.55) Or (d_small <= 30))
    Cond3_Result = (d_mid >= 58 And d_large >= 80)
    Cond4_Result = (Volume >= 70000)

    If Cond1_Result And Cond2_Result And Cond3_Result And Cond4_Result Then
        ClassifyPartBasedOnSizeString = "+"
    Else
        ClassifyPartBasedOnSizeString = "-"
    End If
End Function


' === ★工数情報とデフォルト備考をシート2から読み込むサブルーチン ===
Private Sub LoadProcessTimes()
    Dim wsTimes As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim keyName As String
    Dim maeDandori As String
    Dim yujin As String, machine As String, goDandori As String
    Dim remarks As String, detailRemarks As String ' remarksはF列、detailRemarksはG列

    Set processTimesDict = CreateObject("Scripting.Dictionary")
    processTimesDict.CompareMode = vbTextCompare

    On Error Resume Next
    Set wsTimes = ThisWorkbook.Sheets(SHEET_KOUTEI_TIMES)
    On Error GoTo 0

    If wsTimes Is Nothing Then
        MsgBox "工数管理用のシート「" & SHEET_KOUTEI_TIMES & "」が見つかりません。", vbCritical
        Set processTimesDict = Nothing
        Exit Sub
    End If

    lastRow = wsTimes.Cells(wsTimes.Rows.Count, COL_TIME_KEY).End(xlUp).Row
    Debug.Print "LoadProcessTimes: Loading data from '" & SHEET_KOUTEI_TIMES & "'. Last row: " & lastRow

    For i = 2 To lastRow
        keyName = Trim(CStr(wsTimes.Cells(i, COL_TIME_KEY).Value))
        maeDandori = Trim(CStr(wsTimes.Cells(i, COL_TIME_MAE_DANDORI).Value))
        yujin = Trim(CStr(wsTimes.Cells(i, COL_TIME_YUJIN).Value))
        machine = Trim(CStr(wsTimes.Cells(i, COL_TIME_MACHINE).Value))
        goDandori = Trim(CStr(wsTimes.Cells(i, COL_TIME_SETUP).Value))
        remarks = Trim(CStr(wsTimes.Cells(i, COL_TIME_REMARKS).Value)) ' F列の備考
        detailRemarks = Trim(CStr(wsTimes.Cells(i, COL_TIME_REMARKS_DETAIL).Value)) ' G列の詳細備考

        If keyName <> "" Then
            If Not processTimesDict.Exists(keyName) Then
                processTimesDict.Add keyName, Array(maeDandori, yujin, machine, goDandori, remarks, detailRemarks)
            Else
                 Debug.Print "LoadProcessTimes Warning: Duplicate key found and skipped: '" & keyName & "'"
            End If
        End If
    Next i
    Debug.Print "LoadProcessTimes: Dictionary loaded. Item count: " & processTimesDict.Count
End Sub

' === ★工程キーに対応する工数とデフォルト備考を取得する関数 ===
' 戻り値:
'   成功時: Array(前段取, 有人, 機械, 後段取, 備考(F列), 詳細備考(G列)) の Variant配列
'   失敗時: False
Private Function GetProcessTimes(baseProcessName As String, Optional detailSuffix As String = "") As Variant
    Dim lookupKey As String

    If processTimesDict Is Nothing Then
        Debug.Print "GetProcessTimes Error: processTimesDict is not initialized."
        GetProcessTimes = False
        Exit Function
    End If

    lookupKey = Trim(baseProcessName)
    If Trim(detailSuffix) <> "" Then
        lookupKey = lookupKey & "-" & Trim(detailSuffix)
    End If
    
    Debug.Print "GetProcessTimes: Attempting to find key: '" & lookupKey & "'"

    If processTimesDict.Exists(lookupKey) Then
        GetProcessTimes = processTimesDict(lookupKey)
        Debug.Print "GetProcessTimes: Key found: '" & lookupKey & "'"
    Else
        Debug.Print "GetProcessTimes Warning: Key NOT FOUND: '" & lookupKey & "'"
        GetProcessTimes = False
    End If
End Function


' === ユーザーフォーム初期化 ===
Private Sub UserForm_Initialize()
    Dim i As Integer ' ★ ComboBoxSgCount用ループ変数
    Call LoadProcessTimes
    If processTimesDict Is Nothing Then
        MsgBox "工数データの読み込みに失敗しました。処理を中断します。", vbCritical
        Unload Me
        Exit Sub
    ElseIf processTimesDict.Count = 0 Then
         MsgBox "工数データがシート「" & SHEET_KOUTEI_TIMES & "」に登録されていません。", vbExclamation
    End If

    With Me.ComboBox工程選択
        .AddItem "調整 面取": .AddItem "調整（P）": .AddItem "電極設計"
        .AddItem "確認測定M": .AddItem "確認測定P": .AddItem "穴あけタップ"
        .AddItem "倣い研削": .AddItem "平面研削 汎用": .AddItem "平面研削 汎用（M調整）"
        .AddItem "熱処理": .AddItem "社内TRY": .AddItem "主材購入": .AddItem "M/C-1"
        .AddItem "M/C-2": .AddItem "M/C（大）": .AddItem "M/C（電極）": .AddItem "M/C（小）"
        .AddItem "平面研削-1": .AddItem "平面研削-2": .AddItem "平面研削-3": .AddItem "外注"
        .AddItem "洗浄": .AddItem "細穴放電加工": .AddItem "副材（購入品）": .AddItem "磨き"
        .AddItem "型彫放電加工": .AddItem "ワイヤ放電加工": .AddItem "ワイヤ加工（電極）"
        .AddItem "溶接": .AddItem "平面研削 NC": .AddItem "電極リスト作成"
    End With
    Me.CheckBoxGeibi.Caption = "ゲイビ鋼業に外注する": Me.CheckBoxGeibi.Value = False
    With Me.ComboBoxGeibiType
        .AddItem "材料～焼きまで": .AddItem "荒加工のみ": .AddItem "荒～焼きまで": .ListIndex = 0
    End With
    With Me.ComboBox2
        .AddItem "細井工作所": .AddItem "ﾊﾟﾝﾁ工業": .AddItem "四変ﾃｯｸ": .AddItem "ﾄｰｶﾛｲ": .ListIndex = 0
    End With
    With Me.ComboBox3
        .AddItem "平面研削 汎用": .AddItem "平面研削 NC": .AddItem "倣い研削": .AddItem "M/C（小）"
        .AddItem "M/C（大）": .AddItem "ﾜｲﾔ放電加工": .AddItem "型彫り放電": .ListIndex = 0
    End With
    With Me.ComboBoxTsubaCount
        .AddItem "1": .AddItem "2": .AddItem "3": .ListIndex = 0
    End With
    With Me.ComboBoxTsubaRough
        .AddItem "MC（小）": .AddItem "ﾜｲﾔ放電加工": .ListIndex = 0
    End With
    If TypeName(Me.Controls("CheckBoxKatabori")) = "CheckBox" Then
        Me.CheckBoxKatabori.Caption = "型彫放電加工を追加する": Me.CheckBoxKatabori.Value = False
    End If
    If TypeName(Me.Controls("CheckBoxNaraiKensaku")) = "CheckBox" Then
        Me.CheckBoxNaraiKensaku.Caption = "倣い研削を追加する": Me.CheckBoxNaraiKensaku.Value = False
    End If
    If TypeName(Me.Controls("CheckBoxSingleMCPreHeat")) = "CheckBox" Then
        Me.CheckBoxSingleMCPreHeat.Caption = "焼き入れ前MCを1工程にする": Me.CheckBoxSingleMCPreHeat.Value = False
    End If
    If TypeName(Me.Controls("CheckBoxTripleMCPreHeat")) = "CheckBox" Then
        Me.CheckBoxTripleMCPreHeat.Caption = "焼き入れ前MCを3工程にする": Me.CheckBoxTripleMCPreHeat.Value = False
    End If

    If TypeName(Me.Controls("CheckBoxAutoSgCount")) = "CheckBox" Then
        Me.CheckBoxAutoSgCount.Caption = "SG回数を自動で決定する"
        Me.CheckBoxAutoSgCount.Value = True
    End If
    If TypeName(Me.Controls("ComboBoxSgCount")) = "ComboBox" Then
        With Me.ComboBoxSgCount
            .Clear
            For i = 1 To 6
                .AddItem CStr(i)
            Next i
            .ListIndex = 2
            .Enabled = False
        End With
    End If

    On Error Resume Next
    Dim wsInitialize As Worksheet, targetRowInitialize As Long, sizeStrInitialize As String
    Dim itemNameInitialize As String, remarksStrInitialize As String, isPlateBySizeInitialize As Boolean
    Dim containsPInitialize As Boolean, containsLayoutInRemarks As Boolean
    Dim containsDoujiInRemarks As Boolean, containsMisumiInRemarks As Boolean
    Set wsInitialize = Nothing: Set wsInitialize = ThisWorkbook.Sheets(SHEET_KOUTEIHYO)
    If Not wsInitialize Is Nothing Then
        If TypeName(ActiveSheet) = "Worksheet" Then
            If ActiveSheet.name = wsInitialize.name Then
                If TypeName(Selection) = "Range" Then
                    If Selection.Cells.CountLarge = 1 Then
                        targetRowInitialize = ActiveCell.Row
                        If targetRowInitialize > 0 Then
                            sizeStrInitialize = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_AD_SIZE_INPUT).Value))
                            itemNameInitialize = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_AH_ITEMNAME_INPUT).Value))
                            remarksStrInitialize = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_Y_REMARKS_INPUT).Value))
                            isPlateBySizeInitialize = (ClassifyPartBasedOnSizeString(sizeStrInitialize) = "+")
                            containsPInitialize = (InStr(1, UCase(itemNameInitialize), "P", vbTextCompare) > 0)
                            If isPlateBySizeInitialize And containsPInitialize Then If TypeName(Me.Controls("OptionButton5")) = "OptionButton" Then Me.OptionButton5.Value = True
                            containsLayoutInRemarks = (InStr(1, remarksStrInitialize, "ﾚｲｱｳﾄ", vbTextCompare) > 0)
                            If containsLayoutInRemarks Then If TypeName(Me.Controls("OptionButton6")) = "OptionButton" Then Me.OptionButton6.Value = True
                            containsDoujiInRemarks = (InStr(1, remarksStrInitialize, "同時", vbTextCompare) > 0)
                            If containsDoujiInRemarks Then If TypeName(Me.Controls("CheckBoxLayout")) = "CheckBox" Then Me.CheckBoxLayout.Value = True
                            containsMisumiInRemarks = (InStr(1, remarksStrInitialize, "ミスミ", vbTextCompare) > 0)
                            If containsMisumiInRemarks Then If TypeName(Me.Controls("CheckBox7")) = "CheckBox" Then Me.CheckBox7.Value = True
                        End If
                    End If
                End If
            End If
        End If
    End If
    On Error GoTo 0

    If TypeName(Me.Controls("OptionButton4")) = "OptionButton" And _
       TypeName(Me.Controls("OptionButton5")) = "OptionButton" And _
       TypeName(Me.Controls("OptionButton6")) = "OptionButton" Then
        If Not Me.OptionButton4.Value And Not Me.OptionButton5.Value And Not Me.OptionButton6.Value Then
            Me.OptionButton4.Value = True
        End If
    End If
End Sub

Private Sub CheckBoxAutoSgCount_Click()
    If TypeName(Me.Controls("ComboBoxSgCount")) = "ComboBox" Then
        Me.ComboBoxSgCount.Enabled = Not Me.CheckBoxAutoSgCount.Value
    End If
End Sub

' === メイン処理: 工程作成ボタンクリック ===
Private Sub CommandButton1_Click()
    Dim ws As Worksheet, targetRow As Long, currentRow As Long
    Dim materialCode As String, zValue As String, materialName As String, coatingType As String
    Dim hasSubZero As Boolean, needsOutsourcingForCoating As Boolean, needsPolishing As Boolean
    Dim shape As String, useWireEDM As Boolean, isDia10OrLess As Boolean, hasShapeProcessing As Boolean
    Dim hasCuttingEdge As Boolean, isOutsourcedProduct As Boolean, isMisumiPurchase As Boolean
    Dim hasAdditionalProcessing As Boolean, additionalProcessName As String, isLayoutAfterCut As Boolean
    Dim needsAdjustP As Boolean, useAfterMC As Boolean, isGeibiOutsource As Boolean, geibiPattern As String
    Dim hasTsubaProcessing As Boolean, tsubaCount As Integer, tsubaRoughMethod As String
    Dim noChamfer As Boolean, hasLiftingScrew As Boolean, useSmallStartHole As Boolean
    Dim kataboriChoosenByUser As Boolean, naraiKensakuChoosenByUser As Boolean
    Dim isSingleMCPreHeat As Boolean, isTripleMCPreHeat As Boolean
    Dim autoSgCount As Boolean, userSgCount As Integer

    Application.ScreenUpdating = False
    On Error GoTo ErrorHandler

    Set ws = ThisWorkbook.Sheets(SHEET_KOUTEIHYO)
    If Not ValidateActiveCell(ws, targetRow) Then GoTo Finally
    currentRow = targetRow

    zValue = Trim(CStr(ws.Cells(targetRow, COL_Z_INPUT).Value))
    materialCode = Trim(CStr(ws.Cells(targetRow, COL_AC_INPUT).Value))
    materialName = GetMaterialName(materialCode)
    If materialName = "" Then MsgBox "材質不明", vbExclamation: GoTo Finally
    Call ParseZColumnInfo(zValue, coatingType, hasSubZero, needsOutsourcingForCoating, needsPolishing)
    isGeibiOutsource = Me.CheckBoxGeibi.Value: If isGeibiOutsource Then geibiPattern = Me.ComboBoxGeibiType.Value
    shape = GetShapeFromOptionButtons(): useWireEDM = Me.CheckBox1.Value: If shape = "ファミリー加工" Then useWireEDM = True
    isDia10OrLess = Me.CheckBox4.Value: hasShapeProcessing = Me.CheckBox5.Value: hasCuttingEdge = Me.CheckBox6.Value
    isOutsourcedProduct = Me.CheckBox9.Value: isMisumiPurchase = Me.CheckBox7.Value
    hasAdditionalProcessing = Me.CheckBox8.Value: If hasAdditionalProcessing Then additionalProcessName = Me.ComboBox3.Value
    isLayoutAfterCut = Me.CheckBoxLayout.Value: useAfterMC = Me.CheckBoxAfterMC.Value
    needsAdjustP = Me.CheckBoxAdjustP.Value: hasTsubaProcessing = Me.CheckBoxTsuba.Value
    If hasTsubaProcessing Then tsubaCount = Val(Me.ComboBoxTsubaCount.Value): tsubaRoughMethod = Me.ComboBoxTsubaRough.Value
    noChamfer = Me.CheckBoxChamferなし.Value: hasLiftingScrew = Me.CheckBoxTsurinejiあり.Value
    useSmallStartHole = Me.CheckBoxStartHoleSmall.Value
    If TypeName(Me.Controls("CheckBoxKatabori")) = "CheckBox" Then kataboriChoosenByUser = Me.CheckBoxKatabori.Value Else kataboriChoosenByUser = False
    If TypeName(Me.Controls("CheckBoxNaraiKensaku")) = "CheckBox" Then naraiKensakuChoosenByUser = Me.CheckBoxNaraiKensaku.Value Else naraiKensakuChoosenByUser = False
    If TypeName(Me.Controls("CheckBoxSingleMCPreHeat")) = "CheckBox" Then isSingleMCPreHeat = Me.CheckBoxSingleMCPreHeat.Value Else isSingleMCPreHeat = False
    If TypeName(Me.Controls("CheckBoxTripleMCPreHeat")) = "CheckBox" Then isTripleMCPreHeat = Me.CheckBoxTripleMCPreHeat.Value Else isTripleMCPreHeat = False
    
    If TypeName(Me.Controls("CheckBoxAutoSgCount")) = "CheckBox" Then
        autoSgCount = Me.CheckBoxAutoSgCount.Value
    Else
        autoSgCount = True
    End If
    If Not autoSgCount And TypeName(Me.Controls("ComboBoxSgCount")) = "ComboBox" Then
        If Me.ComboBoxSgCount.ListIndex > -1 Then
            userSgCount = Val(Me.ComboBoxSgCount.Value)
        Else
            userSgCount = 3
            MsgBox "SG回数が選択されていません。デフォルト値 (3回) を使用します。", vbInformation
        End If
    Else
        userSgCount = 0
    End If

    If isOutsourcedProduct Then
        Call ProcessOutsourcedProduct(ws, currentRow, targetRow, coatingType, needsOutsourcingForCoating, needsAdjustP, Me.ComboBox2.Value)
    ElseIf isMisumiPurchase Then
        Call ProcessMisumiPurchase(ws, currentRow, targetRow, hasAdditionalProcessing, additionalProcessName, needsAdjustP)
    ElseIf isLayoutAfterCut Then
        Call ProcessLayoutAfterCut(ws, currentRow, targetRow, needsPolishing, hasCuttingEdge, needsOutsourcingForCoating, coatingType, needsAdjustP, _
                                   hasTsubaProcessing, tsubaCount, tsubaRoughMethod, kataboriChoosenByUser, naraiKensakuChoosenByUser, useAfterMC, shape)
    ElseIf isGeibiOutsource Then
        Call ProcessGeibiOutsource(ws, currentRow, targetRow, materialName, geibiPattern, hasSubZero, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, _
                                   hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingType, needsAdjustP, noChamfer, hasLiftingScrew, kataboriChoosenByUser, naraiKensakuChoosenByUser, isSingleMCPreHeat, isTripleMCPreHeat, autoSgCount, userSgCount)
    Else
        Call ProcessNormalRoute(ws, currentRow, targetRow, materialName, hasSubZero, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, _
                                hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingType, needsAdjustP, noChamfer, hasLiftingScrew, kataboriChoosenByUser, naraiKensakuChoosenByUser, isSingleMCPreHeat, isTripleMCPreHeat, autoSgCount, userSgCount)
    End If

    MsgBox "工程作成が完了しました。", vbInformation

Finally:
    Application.ScreenUpdating = True
    Unload Me
    Exit Sub
ErrorHandler:
    MsgBox "エラー発生: " & Err.Number & " - " & Err.Description, vbCritical
    Resume Finally
End Sub

' --- アクティブセル検証 ---
Private Function ValidateActiveCell(ByVal targetSheet As Worksheet, ByRef outTargetRow As Long) As Boolean
    ValidateActiveCell = False
    If TypeName(ActiveSheet) <> "Worksheet" Or ActiveSheet.name <> targetSheet.name Then
        MsgBox "「" & targetSheet.name & "」シートをアクティブにして、開始セルを選択してください。", vbExclamation
        Exit Function
    End If
    If TypeName(Selection) <> "Range" Then
        MsgBox "開始セルを選択してください。", vbExclamation
        Exit Function
    End If
    If Selection.Cells.CountLarge <> 1 Then
         MsgBox "開始セルを一つだけ選択してください。", vbExclamation
         Exit Function
    End If
    outTargetRow = ActiveCell.Row
    ValidateActiveCell = True
End Function

' --- 材質名取得 ---
Private Function GetMaterialName(ByVal materialCode As String) As String
    Select Case UCase(Trim(materialCode))
        Case "SKH51", "DC53", "SLD-MAGIC", "S20C", "S45C", "S50C", "S50C相当", "SS400", "SS41", "SK3", "SK4", "SK4相当", "SKD11", "SKD11相当", "SKD51", "SKD61", "SKD-MAGIC", "SKD相当", "SKH51相当", "SKH52", "SKS3", "SKS3相当", "HAP10", "HAP40", "HAP40相当", "FDAC", "DEX40", "DH2F相当", "ASP23", "粉末ハイス", "粉末ハイス鋼", "粉末ハイス相当", "遊休材DC53", "SUS", "SUS304", "SUS304相当", "ステンシム", "ステンシム（SUS304）", "ステンシムSUS304", "A7075P", "BC6", "QCM8", "GTI20", "V30", "VC-50", "VM-30（超硬）", "VM40", "VM-40", "VM50", "VM-50", "VW-50", "YXR3", "YXR33", "YXR 7", "超硬", "超硬VM40", "HPM38", "NAK80"
            GetMaterialName = Trim(materialCode)
        Case Else: GetMaterialName = ""
    End Select
End Function

' --- Z列情報解析 ---
Private Sub ParseZColumnInfo(ByVal zValue As String, ByRef outCoatingType As String, ByRef outHasSubZero As Boolean, ByRef outNeedsOutsourcing As Boolean, ByRef outNeedsPolishing As Boolean)
    Dim normalizedZ As String: normalizedZ = NormalizeZText(zValue)
    outCoatingType = "": outHasSubZero = False: outNeedsOutsourcing = False: outNeedsPolishing = False
    If InStr(normalizedZ, "ALCRN") > 0 Then outCoatingType = "AlCrN": outNeedsOutsourcing = True: outNeedsPolishing = True
    If InStr(normalizedZ, "TICN") > 0 Then outCoatingType = "TiCN": outNeedsOutsourcing = True: outNeedsPolishing = True
    If InStr(normalizedZ, "DNF") > 0 Then outCoatingType = "DNF": outNeedsOutsourcing = True: outNeedsPolishing = True
    If InStr(normalizedZ, "SUB0") > 0 Or InStr(normalizedZ, "ｻﾌﾞ0") > 0 Or InStr(normalizedZ, "S0") > 0 Then outHasSubZero = True
End Sub

' --- 形状取得 (OptionButtonから) ---
Private Function GetShapeFromOptionButtons() As String
    If Me.OptionButton5.Value Then
        GetShapeFromOptionButtons = "プレート"
    ElseIf Me.OptionButton6.Value Then
        GetShapeFromOptionButtons = "ファミリー加工"
    Else
        GetShapeFromOptionButtons = "ブロック"
    End If
End Function

' --- 工程行追加の共通サブルーチン ---
Private Sub AddProcessToSheet(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                              processName As String, Optional supplier As String = "", _
                              Optional maeDandoriTime As Variant = "", Optional yujinTime As Variant = "", Optional machineTime As Variant = "", Optional goDandoriTime As Variant = "", _
                              Optional memo As String = "") ' memo は AS列(詳細備考)用
    If currentRow > initialTargetRow Then
        ws.Rows(currentRow).Insert Shift:=xlDown
    ElseIf ws.Cells(currentRow, COL_KOUTEI).Value <> "" Or ws.Cells(currentRow, COL_JINKAN_YUJIN).Value <> "" Then
        ws.Rows(currentRow).Insert Shift:=xlDown
    End If

    If processName <> "" Then ws.Cells(currentRow, COL_KOUTEI).Value = processName
    If supplier <> "" Then ws.Cells(currentRow, COL_GYOUSHA).Value = supplier
    If Not IsEmpty(maeDandoriTime) And maeDandoriTime <> "" Then ws.Cells(currentRow, COL_MAE_DANDORI_OUTPUT).Value = maeDandoriTime
    If Not IsEmpty(yujinTime) And yujinTime <> "" Then ws.Cells(currentRow, COL_JINKAN_YUJIN).Value = yujinTime
    If Not IsEmpty(machineTime) And machineTime <> "" Then ws.Cells(currentRow, COL_JINKAN_MACHINE).Value = machineTime
    If Not IsEmpty(goDandoriTime) And goDandoriTime <> "" Then ws.Cells(currentRow, COL_JINKAN_SETUP).Value = goDandoriTime
    If memo <> "" Then ws.Cells(currentRow, COL_BIKOU).Value = memo

    currentRow = currentRow + 1
End Sub

' --- 調整P工程追加 ---
Private Sub AddAdjustPProcess(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, needsAdjustP As Boolean)
    If needsAdjustP Then
        Dim times As Variant
        Dim remarksFromSheetF As String ' ★シート2のF列から取得する備考
        times = GetProcessTimes("調整（P）")
        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4)) ' ★備考(F列の内容)を取得
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "調整（P）", , times(0), times(1), times(2), times(3), remarksFromSheetF)
        Else
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "調整（P）", , "", "", "", "", "※工数/備考未設定")
        End If
    End If
End Sub

' --- 4-1. 外作の場合 ---
Private Sub ProcessOutsourcedProduct(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                     coatingType As String, needsOutsourcingForCoating As Boolean, needsAdjustP As Boolean, _
                                     outsourcedSupplier As String)
    Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", outsourcedSupplier)
    If needsOutsourcingForCoating Then
        Dim coatingSupplierText As String
        coatingSupplierText = IIf(coatingType = "AlCrN", "和興産業", IIf(coatingType = "TiCN", "北熱", IIf(coatingType = "DNF", "和興産業", "")))
        If coatingSupplierText <> "" Then
             Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", coatingSupplierText)
        End If
    End If
    Call AddAdjustPProcess(ws, currentRow, initialTargetRow, needsAdjustP)
End Sub

' --- 4-2. ミスミ購入品のみの場合 ---
Private Sub ProcessMisumiPurchase(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                  hasAdditionalProcessing As Boolean, additionalProcessName As String, needsAdjustP As Boolean)
    Call AddProcessToSheet(ws, currentRow, initialTargetRow, "副材(購入品)", "ﾐｽﾐ")
    If hasAdditionalProcessing Then
        Dim times As Variant
        Dim remarksFromSheetF As String ' ★シート2のF列から取得する備考
        
        Debug.Print "ProcessMisumiPurchase: additionalProcessName (ComboBox3.Value) = '" & additionalProcessName & "'"
        times = GetProcessTimes(additionalProcessName)

        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4)) ' ★備考(F列の内容)を取得
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, additionalProcessName, , times(0), times(1), times(2), times(3), remarksFromSheetF)
            Debug.Print "ProcessMisumiPurchase: Data applied for '" & additionalProcessName & "'"
        Else
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, additionalProcessName, , "", "", "", "", "※工数/備考未設定:" & additionalProcessName)
            Debug.Print "ProcessMisumiPurchase: Data NOT FOUND for '" & additionalProcessName & "'"
        End If
    End If
    Call AddAdjustPProcess(ws, currentRow, initialTargetRow, needsAdjustP)
End Sub

' --- 4-3. レイアウト切り離し後部品の場合 ---
Private Sub ProcessLayoutAfterCut(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                needsPolishing As Boolean, hasCuttingEdge As Boolean, _
                                needsOutsourcingForCoating As Boolean, coatingType As String, needsAdjustP As Boolean, _
                                hasTsubaProcessing As Boolean, tsubaCount As Integer, tsubaRoughMethod As String, _
                                kataboriChoosenByUserAsLayout As Boolean, naraiKensakuChoosenByUserAsLayout As Boolean, _
                                useAfterMCAsLayout As Boolean, shapeForMC As String)
    Dim specificMemo As String
    Dim times As Variant
    Dim processKeyDetail As String
    Dim remarksFromSheetF As String ' ★シート2のF列から取得する備考

    If hasCuttingEdge Then
        If hasTsubaProcessing Or kataboriChoosenByUserAsLayout Or needsPolishing Then specificMemo = "ﾍｿ取り" Else specificMemo = "ﾍｿ取り・上面"
    Else
        specificMemo = "ﾍｿ取り"
    End If
    processKeyDetail = IIf(specificMemo = "ﾍｿ取り・上面", "レイアウト後ヘソ上面", "レイアウト後ヘソ取り")
    times = GetProcessTimes("平面研削 汎用", processKeyDetail)
    If IsArray(times) Then
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 汎用", , times(0), times(1), times(2), times(3), specificMemo)
    Else
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 汎用", , "", "0.1", , "0.2", specificMemo & " (※工数未設定)")
    End If

    If useAfterMCAsLayout Then
        Dim mcProcessNameLayout As String
        mcProcessNameLayout = IIf(shapeForMC = "プレート", "M/C（大）", "M/C（小）")
        times = GetProcessTimes(mcProcessNameLayout, "レイアウト後MC")
        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4))
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, mcProcessNameLayout, , times(0), times(1), times(2), times(3), remarksFromSheetF)
        Else
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, mcProcessNameLayout, , "", "", "", "", "※工数/備考未設定:" & mcProcessNameLayout & "-レイアウト後MC")
        End If
    End If

    If hasTsubaProcessing Then Call AddTsubaProcessing(ws, currentRow, initialTargetRow, tsubaCount, tsubaRoughMethod, needsPolishing, kataboriChoosenByUserAsLayout)

    If naraiKensakuChoosenByUserAsLayout Then
        times = GetProcessTimes("倣い研削", "レイアウト後")
        If IsArray(times) Then
             remarksFromSheetF = CStr(times(4))
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "倣い研削", , times(0), times(1), times(2), times(3), remarksFromSheetF)
        Else
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "倣い研削", , "", "1.0", "", "0.2", "※工数/備考未設定")
        End If
    End If

    If kataboriChoosenByUserAsLayout Then
        times = GetProcessTimes("型彫放電加工", "レイアウト後")
        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4))
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "型彫放電加工", , times(0), times(1), times(2), times(3), remarksFromSheetF)
        Else
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "型彫放電加工", , "", "0.5", "1.5", "0.2", "※工数/備考未設定")
        End If
        If hasCuttingEdge And Not needsPolishing Then
            times = GetProcessTimes("平面研削 NC", "レイアウト後上面")
            If IsArray(times) Then
                Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , times(0), times(1), times(2), times(3), "上面")
            Else
                Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , "", "0.2", "0.2", "0.1", "上面 (※工数未設定)")
            End If
        End If
    End If

    Call AddPolishingAndCoating(ws, currentRow, initialTargetRow, needsPolishing, hasCuttingEdge, needsOutsourcingForCoating, coatingType)
    Call AddAdjustPProcess(ws, currentRow, initialTargetRow, needsAdjustP)
End Sub


' --- 材料購入処理 ---
Private Sub AddMaterialPurchase(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                materialName As String, noChamfer As Boolean, hasLiftingScrew As Boolean)
    Dim supplier As String
    Select Case materialName
        Case "SKH51", "HAP40", "SKD51": supplier = "ﾒﾀﾙﾜﾝ"
        Case "DC53", "SKD11", "SKS3", "SS400": supplier = "深江特殊鋼"
        Case "SLD-MAGIC": supplier = "ﾒﾀﾙﾃｯｸ"
        Case "FDAC", "S50C", "S50C相当", "HPM38", "NAK80": supplier = "小山鋼材"
        Case Else: supplier = ""
    End Select
    Dim specificMemo As String
    specificMemo = IIf(noChamfer, "Cなし", "Cあり")
    If hasLiftingScrew Then specificMemo = specificMemo & ",吊り"
    Call AddProcessToSheet(ws, currentRow, initialTargetRow, "主材購入", supplier, , , , , specificMemo)
End Sub

' --- 熱処理前M/C加工 ---
Private Sub AddMCBeforeHeatTreatment(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, shape As String, reduceToOneStep As Boolean, increaseToThreeSteps As Boolean)
    Dim mcProcessName As String
    mcProcessName = IIf(shape = "プレート", "M/C（大）", "M/C（小）")
    Dim i As Integer
    Dim times As Variant
    Dim maeDandori As String, yTime As String, mTime As String, sTimeBase As String, sTimeFinal As String
    Dim loopCount As Integer
    Dim specificMemo As String

    times = GetProcessTimes(mcProcessName, "熱処理前")
    If IsArray(times) Then
        maeDandori = CStr(times(0))
        yTime = CStr(times(1)): mTime = CStr(times(2)): sTimeBase = CStr(times(3))
    Else
        maeDandori = ""
        yTime = "0.25": mTime = "0.1": sTimeBase = "0.1"
    End If

    If increaseToThreeSteps Then
    loopCount = 3
    ElseIf reduceToOneStep Then loopCount = 1
    Else: loopCount = 2
    End If

    For i = 1 To loopCount
        sTimeFinal = IIf(i = loopCount, sTimeBase, "")
        specificMemo = i & "/" & loopCount
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, mcProcessName, , maeDandori, yTime, mTime, sTimeFinal, specificMemo)
    Next i
End Sub


' --- 穴あけタップ処理 ---
Private Sub AddTapHole(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, hasSubZero As Boolean)
    Dim specificMemo As String
    Dim remarksFromSheetF As String ' ★シート2のF列から取得する備考
    Dim finalMemo As String
    Dim times As Variant
    Dim maeDandoriTime As String

    If hasSubZero Then specificMemo = "ｻﾌﾞｾﾞﾛ注意" Else specificMemo = ""

    times = GetProcessTimes("穴あけﾀｯﾌﾟ")
    If IsArray(times) Then
        maeDandoriTime = CStr(times(0))
        remarksFromSheetF = CStr(times(4)) ' ★備考(F列の内容)を取得
        If specificMemo <> "" Then finalMemo = specificMemo Else finalMemo = remarksFromSheetF
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "穴あけﾀｯﾌﾟ", , maeDandoriTime, times(1), times(2), times(3), finalMemo)
    Else
        finalMemo = specificMemo & IIf(specificMemo <> "", " ", "") & "(※工数/備考未設定)"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "穴あけﾀｯﾌﾟ", , "", "0.3", , , finalMemo)
    End If
End Sub

' --- 熱処理 ---
Private Sub AddHeatTreatment(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, materialName As String, hasSubZero As Boolean)
    Dim supplier As String
    If hasSubZero Then
        supplier = "ｴｼﾞｿﾝ熱処理"
    Else
        Select Case materialName
            Case "SKH51", "HAP40", "SKD51": supplier = "ﾘﾋﾄ精光"
            Case "DC53", "SKD11", "SKS3": supplier = "光陽産業 高温"
            Case "HPM38": supplier = "光陽産業"
            Case "SLD-MAGIC": supplier = "ｴｼﾞｿﾝ熱処理"
            Case Else: supplier = ""
        End Select
    End If
    If supplier <> "" Or hasSubZero Then
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "熱処理", supplier)
    End If
End Sub

' --- 焼き入れ後SG (平面研削 NC) ---
Private Sub AddPostHeatTreatmentSG(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                   shape As String, useWireEDM As Boolean, useAfterMC As Boolean, _
                                   autoSg As Boolean, userSgNum As Integer)
    Dim sgCount As Integer

    If autoSg Then
        Select Case shape
            Case "ブロック": sgCount = 6
            Case "プレート"
                If Not useWireEDM And useAfterMC Then
                sgCount = 4
                ElseIf Not useWireEDM Then sgCount = 2
                ElseIf useAfterMC Then sgCount = 4
                Else: sgCount = 3
                End If
            Case "ファミリー加工": sgCount = 2
            Case Else: sgCount = 3
        End Select
    Else
        sgCount = userSgNum
        If sgCount < 1 Or sgCount > 6 Then sgCount = 3
    End If

    Dim i As Integer
    Dim times As Variant
    Dim maeDandori As String, yTime As String, mTime As String, sTimeBase As String, sTimeFinal As String
    Dim specificMemo As String

    times = GetProcessTimes("平面研削 NC", "SG")
    If IsArray(times) Then
        maeDandori = CStr(times(0))
        yTime = CStr(times(1)): mTime = CStr(times(2)): sTimeBase = CStr(times(3))
    Else
        maeDandori = ""
        yTime = "0.3": mTime = "0.3": sTimeBase = "0.1"
    End If

    For i = 1 To sgCount
        sTimeFinal = IIf(i = sgCount, sTimeBase, "")
        specificMemo = i & "/" & sgCount
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , maeDandori, yTime, mTime, sTimeFinal, specificMemo)
    Next i
End Sub

' --- 焼き後MC仕上げ ---
Private Sub AddAfterMCFinish(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, shape As String)
    Dim mcFinishName As String
    Dim maeDandori As String, yujin As String, machine As String, setup As String
    Dim times As Variant
    Dim finalMemo As String

    mcFinishName = IIf(shape = "プレート", "M/C（大）", "M/C（小）")
    times = GetProcessTimes(mcFinishName, "MC仕上げ")

    If IsArray(times) Then
        maeDandori = CStr(times(0))
        yujin = CStr(times(1)): machine = CStr(times(2)): setup = CStr(times(3))
        finalMemo = CStr(times(4)) ' ★備考(F列)を取得
        If finalMemo = "" Then finalMemo = "MC仕上げ" ' シートに備考がなければデフォルトテキスト
    Else
        maeDandori = ""
        If shape = "プレート" Then yujin = "0.4": machine = "0.2": setup = "0.2" Else yujin = "0.25": machine = "0.1": setup = "0.1"
        finalMemo = "MC仕上げ (※工数/備考未設定)"
    End If

    Call AddProcessToSheet(ws, currentRow, initialTargetRow, mcFinishName, , maeDandori, yujin, machine, setup, finalMemo)
End Sub

' --- スタート穴 (細穴放電) ---
Private Sub AddSmallStartHole(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long)
    Dim times As Variant
    Dim remarksFromSheetF As String ' ★シート2のF列から取得する備考
    Dim maeDandoriTime As String
    times = GetProcessTimes("細穴放電加工")
    If IsArray(times) Then
        maeDandoriTime = CStr(times(0))
        remarksFromSheetF = CStr(times(4)) ' ★備考(F列の内容)を取得
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "細穴放電加工", , maeDandoriTime, times(1), times(2), times(3), remarksFromSheetF)
    Else
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "細穴放電加工", , "", "0.8", , "0.1", "※工数/備考未設定")
    End If
End Sub

' --- ワイヤー加工 ---
Private Sub AddWireEDMProcessing(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                 isDia10OrLess As Boolean, hasShapeProcessing As Boolean, isFamilyProcessing As Boolean)
    Dim times As Variant
    Dim remarksFromSheetF As String ' ★シート2のF列から取得する備考
    Dim maeDandori As String, yTime As String, mTime As String, sTime As String
    Dim specificMemo As String ' プログラムで生成する備考

    If isFamilyProcessing Then
        times = GetProcessTimes("ﾜｲﾔ放電加工")
        If IsArray(times) Then
            maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4))
        Else
            maeDandori = "": yTime = "0.75": mTime = "2": sTime = "0.5": remarksFromSheetF = "※工数/備考未設定"
        End If
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, remarksFromSheetF)
    ElseIf isDia10OrLess And hasShapeProcessing Then
        specificMemo = "荒加工"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "荒加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "3": sTime = ""
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        
        specificMemo = "ｶｽ取り・仕上げ"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "ｶｽ取り・仕上げ")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "6": sTime = "0.5"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
    ElseIf isDia10OrLess Or Not hasShapeProcessing Then
        times = GetProcessTimes("ﾜｲﾔ放電加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4)) Else maeDandori = "": yTime = "0.75": mTime = "2": sTime = "0.5": remarksFromSheetF = "※工数/備考未設定"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, remarksFromSheetF)
    Else
        specificMemo = "荒加工"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "荒加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "3": sTime = ""
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        
        specificMemo = "ｶｽ取り・仕上げ"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "ｶｽ取り・仕上げ")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "6": sTime = "0.5"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
    End If
End Sub


' --- ヘソ取り or 上面SG (ワイヤー加工後) ---
Private Sub AddPostWireEDMGrinding(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                   shape As String, needsPolishing As Boolean, hasCuttingEdge As Boolean, hasTsubaProcessing As Boolean, _
                                   kataboriChoosenByUserAsLaterStep As Boolean)
    Dim specificMemo As String
    Dim times As Variant
    Dim processKey As String, processKeyDetail As String
    Dim maeDandori As String, yTime As String, mTime As String, sTime As String

    If shape = "ファミリー加工" Then
        If needsPolishing Then
            processKey = "平面研削 汎用"
            processKeyDetail = "ファミリー後ヘソ取り"
            specificMemo = "ﾍｿ取り"
            times = GetProcessTimes(processKey, processKeyDetail)
            If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "": sTime = "0.1"
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, processKey, , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        Else
            processKey = "平面研削 NC"
            specificMemo = "ﾍｿ取り"
            If hasCuttingEdge And Not hasTsubaProcessing And Not kataboriChoosenByUserAsLaterStep Then specificMemo = "ﾍｿ・上面"
            processKeyDetail = IIf(specificMemo = "ﾍｿ・上面", "ファミリー後ヘソ上面", "ファミリー後ヘソ取り")
            times = GetProcessTimes(processKey, processKeyDetail)
            If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "0.3": sTime = "0.1"
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, processKey, , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        End If
    ElseIf shape = "ブロック" Or shape = "プレート" Then
        If hasCuttingEdge And Not needsPolishing Then
            Dim addThisSG As Boolean: addThisSG = True
            If kataboriChoosenByUserAsLaterStep Then addThisSG = False
            If addThisSG And hasTsubaProcessing Then
                If Not needsPolishing And Not kataboriChoosenByUserAsLaterStep Then addThisSG = False
            End If
            If addThisSG Then
                Dim grindingMachine As String
                grindingMachine = IIf(shape = "プレート", "平面研削 NC", "平面研削 汎用")
                specificMemo = "上面"
                times = GetProcessTimes(grindingMachine, "上面後")
                If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = IIf(grindingMachine = "平面研削 NC", "0.2", ""): sTime = "0.1"
                Call AddProcessToSheet(ws, currentRow, initialTargetRow, grindingMachine, , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
            End If
        End If
    End If
End Sub

' --- ツバ加工追加 (共通部品) ---
Private Sub AddTsubaProcessing(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                               tsubaCount As Integer, tsubaRoughMethod As String, needsPolishingForTsubaUe As Boolean, _
                               kataboriChoosenByUser As Boolean)
    Dim n As Integer
    Dim isLastTsuba As Boolean
    Dim specificMemoRough As String, specificMemoFinish As String
    Dim timesRough As Variant, timesFinish As Variant
    Dim maeDandoriRough As String, yRough As String, mRough As String, sRough As String
    Dim maeDandoriFinish As String, yFinish As String, mFinish As String, sFinish As String

    timesRough = GetProcessTimes(tsubaRoughMethod, "つば荒")
    timesFinish = GetProcessTimes("平面研削 NC", "つば仕上げ")

    If IsArray(timesRough) Then maeDandoriRough = CStr(timesRough(0)): yRough = CStr(timesRough(1)): mRough = CStr(timesRough(2)): sRough = CStr(timesRough(3)) Else maeDandoriRough = "": yRough = "0.6": mRough = "0.1": sRough = "0.1"
    If IsArray(timesFinish) Then maeDandoriFinish = CStr(timesFinish(0)): yFinish = CStr(timesFinish(1)): mFinish = CStr(timesFinish(2)): sFinish = CStr(timesFinish(3)) Else maeDandoriFinish = "": yFinish = "0.3": mFinish = "0.1": sFinish = "0.1"

    For n = 1 To tsubaCount
        specificMemoRough = "つば荒 " & n & "/" & tsubaCount
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, tsubaRoughMethod, , maeDandoriRough, yRough, mRough, sRough, specificMemoRough & IIf(IsArray(timesRough), "", " (※工数未設定)"))

        isLastTsuba = (n = tsubaCount)
        specificMemoFinish = "つば仕上げ " & n & "/" & tsubaCount
        If isLastTsuba And Not needsPolishingForTsubaUe And Not kataboriChoosenByUser Then specificMemoFinish = specificMemoFinish & "・上面"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , maeDandoriFinish, yFinish, mFinish, sFinish, specificMemoFinish & IIf(IsArray(timesFinish), "", " (※工数未設定)"))
    Next n
End Sub

' --- 磨きとコーティング処理 ---
Private Sub AddPolishingAndCoating(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                   needsPolishing As Boolean, hasCuttingEdge As Boolean, _
                                   needsOutsourcingForCoating As Boolean, coatingType As String)
    Dim times As Variant
    Dim remarksFromSheetF As String ' ★シート2のF列から取得する備考
    Dim specificMemo As String
    Dim maeDandori As String, yTime As String, mTime As String, sTime As String

    If needsPolishing Then
        times = GetProcessTimes("磨き")
        If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4)) Else maeDandori = "": yTime = "0.5": mTime = "": sTime = "": remarksFromSheetF = "※工数/備考未設定"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "磨き", , maeDandori, yTime, mTime, sTime, remarksFromSheetF)

        If hasCuttingEdge Then
            specificMemo = "上面"
            times = GetProcessTimes("平面研削 NC", "上面後")
            If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "0.2": sTime = "0.1"
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        End If
    End If

    If needsOutsourcingForCoating Then
        Dim coatingSupplierText As String
        coatingSupplierText = IIf(coatingType = "AlCrN", "和興産業", IIf(coatingType = "TiCN", "北熱", IIf(coatingType = "DNF", "和興産業", "")))
        If coatingSupplierText <> "" Then
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", coatingSupplierText)
        End If
    End If
End Sub

' --- 熱処理後から最終調整までの共通工程群 ---
Private Sub AddPostHeatTreatmentProcesses(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                        materialName As String, shape As String, useWireEDM As Boolean, isDia10OrLess As Boolean, hasShapeProcessing As Boolean, hasCuttingEdge As Boolean, _
                                        useAfterMC As Boolean, useSmallStartHole As Boolean, _
                                        hasTsubaProcessing As Boolean, tsubaCount As Integer, tsubaRoughMethod As String, _
                                        needsPolishing As Boolean, needsOutsourcingForCoating As Boolean, coatingType As String, needsAdjustP As Boolean, _
                                        kataboriChoosenByUser As Boolean, naraiKensakuChoosenByUser As Boolean, _
                                        autoSg As Boolean, userSgNum As Integer)
    Dim skipPostHeatProcesses As Boolean
    skipPostHeatProcesses = (materialName = "NAK80" Or materialName = "FDAC" Or materialName = "SS400")

    Dim times As Variant
    Dim remarksFromSheetF As String ' ★シート2のF列から取得する備考
    Dim specificMemo As String
    Dim maeDandori As String, yTime As String, mTime As String, sTime As String

    Call AddPostHeatTreatmentSG(ws, currentRow, initialTargetRow, shape, useWireEDM, useAfterMC, autoSg, userSgNum)
    If useAfterMC Then Call AddAfterMCFinish(ws, currentRow, initialTargetRow, shape)
    If useWireEDM And useSmallStartHole Then Call AddSmallStartHole(ws, currentRow, initialTargetRow)
    If useWireEDM Then
        Dim effectiveHasShapeProcessing As Boolean: effectiveHasShapeProcessing = hasShapeProcessing
        If shape = "ファミリー加工" Then effectiveHasShapeProcessing = True
        Call AddWireEDMProcessing(ws, currentRow, initialTargetRow, isDia10OrLess, effectiveHasShapeProcessing, (shape = "ファミリー加工"))
        Call AddPostWireEDMGrinding(ws, currentRow, initialTargetRow, shape, needsPolishing, hasCuttingEdge, hasTsubaProcessing, kataboriChoosenByUser)
    End If
    If hasTsubaProcessing Then Call AddTsubaProcessing(ws, currentRow, initialTargetRow, tsubaCount, tsubaRoughMethod, needsPolishing, kataboriChoosenByUser)
    If naraiKensakuChoosenByUser Then
        times = GetProcessTimes("倣い研削")
        If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4)) Else maeDandori = "": yTime = "1.0": mTime = "": sTime = "0.2": remarksFromSheetF = "※工数/備考未設定"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "倣い研削", , maeDandori, yTime, mTime, sTime, remarksFromSheetF)
    End If
    If kataboriChoosenByUser Then
        times = GetProcessTimes("型彫放電加工")
        If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4)) Else maeDandori = "": yTime = "0.5": mTime = "1.5": sTime = "0.2": remarksFromSheetF = "※工数/備考未設定"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "型彫放電加工", , maeDandori, yTime, mTime, sTime, remarksFromSheetF)
        If hasCuttingEdge And Not needsPolishing Then
            specificMemo = "上面"
            times = GetProcessTimes("平面研削 NC", "上面後")
            If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "0.2": sTime = "0.1"
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        End If
    End If
    Call AddPolishingAndCoating(ws, currentRow, initialTargetRow, needsPolishing, hasCuttingEdge, needsOutsourcingForCoating, coatingType)
    Call AddAdjustPProcess(ws, currentRow, initialTargetRow, needsAdjustP)
End Sub


' --- 4-4. ゲイビ外注パターンの場合 ---
Private Sub ProcessGeibiOutsource(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                 materialName As String, geibiPattern As String, hasSubZero As Boolean, _
                                 shape As String, useWireEDM As Boolean, isDia10OrLess As Boolean, hasShapeProcessing As Boolean, hasCuttingEdge As Boolean, _
                                 useAfterMC As Boolean, useSmallStartHole As Boolean, _
                                 hasTsubaProcessing As Boolean, tsubaCount As Integer, tsubaRoughMethod As String, _
                                 needsPolishing As Boolean, needsOutsourcingForCoating As Boolean, coatingType As String, needsAdjustP As Boolean, _
                                 noChamfer As Boolean, hasLiftingScrew As Boolean, _
                                 kataboriChoosenByUser As Boolean, naraiKensakuChoosenByUser As Boolean, _
                                 isSingleMCPreHeat As Boolean, isTripleMCPreHeat As Boolean, _
                                 autoSg As Boolean, userSgNum As Integer)
    Select Case geibiPattern
        Case "材料～焼きまで"
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", "ｹﾞｲﾋﾞ鋼業", , , , , geibiPattern)
            Call AddPostHeatTreatmentProcesses(ws, currentRow, initialTargetRow, materialName, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingType, needsAdjustP, kataboriChoosenByUser, naraiKensakuChoosenByUser, autoSg, userSgNum)
        Case "荒加工のみ"
            Call AddMaterialPurchase(ws, currentRow, initialTargetRow, materialName, noChamfer, hasLiftingScrew)
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", "ｹﾞｲﾋﾞ鋼業", , , , , geibiPattern)
            Call AddTapHole(ws, currentRow, initialTargetRow, hasSubZero)
            If Not (materialName = "NAK80" Or materialName = "FDAC" Or materialName = "SS400") Then Call AddHeatTreatment(ws, currentRow, initialTargetRow, materialName, hasSubZero)
            Call AddPostHeatTreatmentProcesses(ws, currentRow, initialTargetRow, materialName, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingType, needsAdjustP, kataboriChoosenByUser, naraiKensakuChoosenByUser, autoSg, userSgNum)
        Case "荒～焼きまで"
            Call AddMaterialPurchase(ws, currentRow, initialTargetRow, materialName, noChamfer, hasLiftingScrew)
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", "ｹﾞｲﾋﾞ鋼業", , , , , geibiPattern)
            Call AddPostHeatTreatmentProcesses(ws, currentRow, initialTargetRow, materialName, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingType, needsAdjustP, kataboriChoosenByUser, naraiKensakuChoosenByUser, autoSg, userSgNum)
    End Select
End Sub

' --- 4-5. 通常ルート（主材購入～最後まで）の場合 ---
Private Sub ProcessNormalRoute(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                               materialName As String, hasSubZero As Boolean, _
                               shape As String, useWireEDM As Boolean, isDia10OrLess As Boolean, hasShapeProcessing As Boolean, hasCuttingEdge As Boolean, _
                               useAfterMC As Boolean, useSmallStartHole As Boolean, _
                               hasTsubaProcessing As Boolean, tsubaCount As Integer, tsubaRoughMethod As String, _
                               needsPolishing As Boolean, needsOutsourcingForCoating As Boolean, coatingType As String, needsAdjustP As Boolean, _
                               noChamfer As Boolean, hasLiftingScrew As Boolean, _
                               kataboriChoosenByUser As Boolean, naraiKensakuChoosenByUser As Boolean, _
                               isSingleMCPreHeat As Boolean, isTripleMCPreHeat As Boolean, _
                               autoSg As Boolean, userSgNum As Integer)
    Call AddMaterialPurchase(ws, currentRow, initialTargetRow, materialName, noChamfer, hasLiftingScrew)
    Call AddMCBeforeHeatTreatment(ws, currentRow, initialTargetRow, shape, isSingleMCPreHeat, isTripleMCPreHeat)
    Call AddTapHole(ws, currentRow, initialTargetRow, hasSubZero)
    If Not (materialName = "NAK80" Or materialName = "FDAC" Or materialName = "SS400") Then Call AddHeatTreatment(ws, currentRow, initialTargetRow, materialName, hasSubZero)
    Call AddPostHeatTreatmentProcesses(ws, currentRow, initialTargetRow, materialName, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingType, needsAdjustP, kataboriChoosenByUser, naraiKensakuChoosenByUser, autoSg, userSgNum)
End Sub

' === NormalizeZText 関数 ===
Private Function NormalizeZText(src As String) As String
    Dim t As String: t = StrConv(src, vbNarrow + vbKatakana): t = UCase(t)
    t = Replace(t, " ", ""): t = Replace(t, "　", "")
    t = Replace(t, "COATING", ""): t = Replace(t, "ｺｰﾃｨﾝｸﾞ", ""): t = Replace(t, "コーティング", "")
    t = Replace(t, "ｾﾞﾛ", "0"): t = Replace(t, "ゼロ", "0"): t = Replace(t, "ZERO", "0")
    NormalizeZText = t
End Function

' === 単品工程挿入ボタン (CommandButton単品挿入_Click) ===
Private Sub CommandButton単品挿入_Click()
    Dim 工程名 As String: 工程名 = Me.ComboBox工程選択.Value
    If 工程名 = "" Then MsgBox "工程を選択", vbExclamation: Exit Sub

    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(SHEET_KOUTEIHYO)
    Dim r As Long: If Not ValidateActiveCell(ws, r) Then Exit Sub

    Dim times As Variant
    Dim remarksFromSheetF As String ' ★シート2のF列から取得する備考
    Dim maeDandoriTime As String
    
    Debug.Print "CommandButton単品挿入_Click: ComboBox工程選択.Value = '" & 工程名 & "'"
    times = GetProcessTimes(工程名)

    Application.ScreenUpdating = False
    On Error GoTo SingleInsertErrorHandler

    ws.Rows(r).Insert Shift:=xlDown
    ws.Cells(r, COL_KOUTEI).Value = 工程名

    If IsArray(times) Then
        maeDandoriTime = CStr(times(0))
        If maeDandoriTime <> "" Then ws.Cells(r, COL_MAE_DANDORI_OUTPUT).Value = maeDandoriTime

        ws.Cells(r, COL_JINKAN_YUJIN).Value = times(1)
        ws.Cells(r, COL_JINKAN_MACHINE).Value = times(2)
        ws.Cells(r, COL_JINKAN_SETUP).Value = times(3) ' 後段取
        remarksFromSheetF = CStr(times(4)) ' ★備考(F列の内容)を取得
        If remarksFromSheetF <> "" Then ws.Cells(r, COL_BIKOU).Value = remarksFromSheetF ' ★AS列に書き込み
        Debug.Print "CommandButton単品挿入_Click: Data applied for '" & 工程名 & "'"
    Else
        ws.Cells(r, COL_JINKAN_YUJIN).Resize(1, 3).Value = Array("", "", "")
        ws.Cells(r, COL_MAE_DANDORI_OUTPUT).Value = ""
        ws.Cells(r, COL_BIKOU).Value = "※工数/備考未設定"
        Debug.Print "CommandButton単品挿入_Click: Data NOT FOUND for '" & 工程名 & "'"
    End If

    MsgBox "単品工程「" & 工程名 & "」挿入完了", vbInformation

SingleInsertFinally:
    Application.ScreenUpdating = True
    Exit Sub
SingleInsertErrorHandler:
    MsgBox "単品工程挿入エラー: " & Err.Number & " - " & Err.Description, vbCritical
    Resume SingleInsertFinally
End Sub

' === 過去データ検索ボタン (CommandButton2_Click) ===
Private Sub CommandButton2_Click()
    Dim searchItemName As String, searchItemNumber As String, searchItemSize As String, searchItemMaterial As String
    Dim sourceWorkbook As Workbook, sourceSheet As Worksheet, outputSheet As Worksheet
    Dim lastRowSource As Long, i As Long, j As Long, blockStartRow As Long, outputRow As Long
    Dim outputSheetNameBase As String, outputSheetName As String, outputSheetCounter As Long
    Dim sourceFilePath As String
    sourceFilePath = "C:\Users\ysmft\Desktop\AAAA\スト.xlsm"
    Application.ScreenUpdating = False
    On Error GoTo SearchErrorHandler
    searchItemName = InputBox("検索する品名を入力してください（必須）：", "過去データ検索")
    If Len(Trim(searchItemName)) = 0 Then MsgBox "品名が未入力です。", vbExclamation: GoTo SearchFinally
    searchItemNumber = InputBox("品番でさらに絞り込む場合は入力してください（任意）：", "追加検索条件")
    searchItemSize = InputBox("サイズでさらに絞り込む場合は入力してください（任意）：", "追加検索条件")
    searchItemMaterial = InputBox("材質でさらに絞り込む場合は入力してください（任意）：", "追加検索条件")
    On Error Resume Next
    Set sourceWorkbook = Workbooks.Open(Filename:=sourceFilePath, ReadOnly:=True, UpdateLinks:=0)
    On Error GoTo SearchErrorHandler
    If sourceWorkbook Is Nothing Then MsgBox "指定のファイルを開けませんでした：" & vbCrLf & sourceFilePath, vbCritical: GoTo SearchFinally
    On Error Resume Next
    Set sourceSheet = sourceWorkbook.Sheets("Sheet1")
    On Error GoTo SearchErrorHandler
    If sourceSheet Is Nothing Then MsgBox "検索対象ファイルに指定のシート「Sheet1」が見つかりません。", vbCritical: sourceWorkbook.Close SaveChanges:=False: GoTo SearchFinally
    lastRowSource = sourceSheet.Cells(sourceSheet.Rows.Count, "K").End(xlUp).Row
    Const START_ROW_SOURCE As Long = 3
    outputSheetNameBase = "抽出_" & ReplaceCharsForSheetName(searchItemName)
    If Len(outputSheetNameBase) > 25 Then outputSheetNameBase = Left(outputSheetNameBase, 25)
    outputSheetCounter = 0
    Do
        outputSheetName = outputSheetNameBase
        If outputSheetCounter > 0 Then outputSheetName = outputSheetNameBase & "_" & outputSheetCounter
        On Error Resume Next
        Set outputSheet = Nothing
        Set outputSheet = ThisWorkbook.Sheets(outputSheetName)
        On Error GoTo SearchErrorHandler
        If outputSheet Is Nothing Then Exit Do
        outputSheetCounter = outputSheetCounter + 1
    Loop
    Set outputSheet = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
    outputSheet.name = outputSheetName
    outputRow = 1
    For i = START_ROW_SOURCE To lastRowSource
        Dim currentItemName As String, currentItemNumber As String, currentItemSize As String, currentItemMaterialVal As String
        currentItemName = Trim(CStr(sourceSheet.Cells(i, "K").Value))
        currentItemNumber = Trim(CStr(sourceSheet.Cells(i, "J").Value))
        currentItemSize = Trim(CStr(sourceSheet.Cells(i, "G").Value))
        currentItemMaterialVal = Trim(CStr(sourceSheet.Cells(i, "F").Value))
        If InStr(1, currentItemName, searchItemName, vbTextCompare) > 0 Then
            If (Len(Trim(searchItemNumber)) = 0 Or InStr(1, currentItemNumber, searchItemNumber, vbTextCompare) > 0) And _
               (Len(Trim(searchItemSize)) = 0 Or InStr(1, currentItemSize, searchItemSize, vbTextCompare) > 0) And _
               (Len(Trim(searchItemMaterial)) = 0 Or InStr(1, currentItemMaterialVal, searchItemMaterial, vbTextCompare) > 0) Then
                
                blockStartRow = i
                For j = blockStartRow + 1 To lastRowSource + 1
                    Dim nextItemNameInBlock As String
                    If j <= lastRowSource Then nextItemNameInBlock = Trim(CStr(sourceSheet.Cells(j, "K").Value)) Else nextItemNameInBlock = "EndOfDataDummy"
                    
                    If Len(nextItemNameInBlock) > 0 Or j > lastRowSource Then
                        sourceSheet.Range("A" & blockStartRow & ":V" & j - 1).Copy
                        outputSheet.Range("A" & outputRow).PasteSpecial xlPasteValues
                        outputRow = outputRow + (j - blockStartRow)
                        i = j - 1
                        Exit For
                    End If
                Next j
            End If
        End If
    Next i
    Application.CutCopyMode = False
    sourceWorkbook.Close SaveChanges:=False
    If outputRow = 1 Then
        MsgBox "条件に一致するデータは見つかりませんでした。" & vbCrLf & "作成したシート「" & outputSheet.name & "」は空です。", vbInformation
    Else
        MsgBox "抽出完了 → " & outputSheet.name, vbInformation
        outputSheet.Activate
    End If
SearchFinally:
    If Not sourceWorkbook Is Nothing Then
        Dim wb As Workbook
        On Error Resume Next
        For Each wb In Workbooks
            If wb.name = sourceWorkbook.name Then
                sourceWorkbook.Close SaveChanges:=False
                Exit For
            End If
        Next wb
        On Error GoTo 0
    End If
    Application.ScreenUpdating = True
    Exit Sub
SearchErrorHandler:
    MsgBox "過去データ検索中にエラーが発生しました。" & vbCrLf & "エラー番号: " & Err.Number & vbCrLf & "エラー内容: " & Err.Description, vbCritical
    Resume SearchFinally
End Sub

' --- シート名に使用できない文字を置換/削除するヘルパー関数 ---
Private Function ReplaceCharsForSheetName(ByVal name As String) As String
    Dim invalidChars As Variant, charIdx As Long
    invalidChars = Array("\", "/", "*", "[", "]", ":", "?")
    ReplaceCharsForSheetName = name
    For charIdx = LBound(invalidChars) To UBound(invalidChars)
        ReplaceCharsForSheetName = Replace(ReplaceCharsForSheetName, invalidChars(charIdx), "_")
    Next charIdx
    If Len(ReplaceCharsForSheetName) > 31 Then ReplaceCharsForSheetName = Left(ReplaceCharsForSheetName, 31)
End Function


