Private Type PreviewProcessItem
    ProcessName As String
    supplier As String
    MaeDandoriTime As String
    YujinTime As String
    MachineTime As String
    GoDandoriTime As String
    bikou As String
    IsEdited As Boolean
    UserEditedGoDandori As String
    IsGoDandoriUserEdited As Boolean
End Type

' === モジュールレベル定数 ===
Private Const SHEET_KOUTEIHYO As String = "工程表"
Private Const SHEET_KOUTEI_TIMES As String = "シート2"
Private Const SHEET_LAST_OUTPUT_LOG As String = "LastOutputLog"

' 入力列 (工程表シート)
Private Const COL_Z_INPUT As Long = 26
Private Const COL_AC_INPUT As Long = 29
Private Const COL_AD_SIZE_INPUT As Long = 30
Private Const COL_AH_ITEMNAME_INPUT As Long = 34
Private Const COL_Y_REMARKS_INPUT As Long = 25

' 出力列 (工程表シート)
Private Const COL_KOUTEI As Long = 36
Private Const COL_GYOUSHA As Long = 38
Private Const COL_MAE_DANDORI_OUTPUT As Long = 39
Private Const COL_JINKAN_YUJIN As Long = 40
Private Const COL_JINKAN_MACHINE As Long = 41
Private Const COL_JINKAN_SETUP As Long = 42
Private Const COL_BIKOU As Long = 45

' 工数シート列定義 (シート2)
Private Const COL_TIME_KEY As Long = 1
Private Const COL_TIME_MAE_DANDORI As Long = 2
Private Const COL_TIME_YUJIN As Long = 3
Private Const COL_TIME_MACHINE As Long = 4
Private Const COL_TIME_SETUP As Long = 5
Private Const COL_TIME_REMARKS As Long = 6
Private Const COL_TIME_REMARKS_DETAIL As Long = 7

' 材質情報シート列定義 (シート2)
Private Const COL_MATERIAL_CODE As Long = 10
Private Const COL_MATERIAL_SUPPLIER As Long = 11
Private Const COL_MATERIAL_HEAT_NORMAL As Long = 12
Private Const COL_MATERIAL_HEAT_SUBZERO As Long = 13

' 外注先情報シート列定義 (シート2)
Private Const COL_OUTSOURCE_KEY As Long = 15
Private Const COL_OUTSOURCE_NAME As Long = 16
Private Const COL_OUTSOURCE_FLAG_CB2 As Long = 17
Private Const COL_OUTSOURCE_FLAG_EDIT As Long = 18

' Z列キーワード定義テーブル用 (シート2)
Private Const COL_ZKEYWORD_START As Long = 20
Private Const COL_ZKEYWORD_KEY As Long = 20
Private Const COL_ZKEYWORD_TYPE As Long = 21
Private Const COL_ZKEYWORD_INTERNALKEY As Long = 22
Private Const COL_ZKEYWORD_NEEDSOUTSourcing As Long = 23
Private Const COL_ZKEYWORD_NEEDSPOLISHING As Long = 24

' === モジュールレベル変数 ===
Private m_arrPreviewProcesses() As PreviewProcessItem
Private m_lPreviewProcessCount As Long
Private m_lEditingArrayIndex As Long
Private processTimesDict As Object
Private materialInfoDict As Object
Private outsourcingInfoDict As Object
Private zKeywordsDict As Object
Private m_bCheckBox7_IsAutoChecked As Boolean
Private m_bIsProgrammaticTextBoxChange As Boolean
Private m_bIsProgrammaticChange As Boolean

' ComboBox用
Private m_sOldComboBoxGeibiType As String
Private m_sOldComboBoxTsubaCount As String
Private m_sOldComboBoxTsubaRough As String
Private m_sOldComboBoxSgCount As String
Private m_sOldComboBox2Value As String
Private m_sOldComboBox3Value As String

' TextBox用
Private m_sOldTxtMaterialCodePreview As String
Private m_sOldTxtZValuePreview As String
Private m_sOldTxtSizePreview As String

' OptionButton用
Private m_sPreviouslySelectedShapeOption As String

Private Sub cmdDeletePreviewItem_Click()
    Dim selectedItem As MSComctlLib.ListItem
    Dim lSelectedIndexInView As Long
    Dim lArrayIndexToDelete As Long
    Dim i As Long

    Set selectedItem = Me.ListViewPreview.selectedItem

    If selectedItem Is Nothing Then
        MsgBox "削除する工程をプレビューリストから選択してください。", vbInformation
        Exit Sub
    End If

    lSelectedIndexInView = selectedItem.Index
    lArrayIndexToDelete = lSelectedIndexInView - 1

    If lArrayIndexToDelete < 0 Or lArrayIndexToDelete >= m_lPreviewProcessCount Then
        MsgBox "内部エラー: 選択されたインデックスが配列の範囲外です。処理を中断します。", vbCritical
        Exit Sub
    End If

    If m_lPreviewProcessCount > 0 Then
        For i = lArrayIndexToDelete To m_lPreviewProcessCount - 2
            m_arrPreviewProcesses(i) = m_arrPreviewProcesses(i + 1)
        Next i

        m_lPreviewProcessCount = m_lPreviewProcessCount - 1

        If m_lPreviewProcessCount >= 0 And m_lPreviewProcessCount <= UBound(m_arrPreviewProcesses) Then
            m_arrPreviewProcesses(m_lPreviewProcessCount).ProcessName = ""
            m_arrPreviewProcesses(m_lPreviewProcessCount).supplier = ""
            m_arrPreviewProcesses(m_lPreviewProcessCount).MaeDandoriTime = ""
            m_arrPreviewProcesses(m_lPreviewProcessCount).YujinTime = ""
            m_arrPreviewProcesses(m_lPreviewProcessCount).MachineTime = ""
            m_arrPreviewProcesses(m_lPreviewProcessCount).GoDandoriTime = ""
            m_arrPreviewProcesses(m_lPreviewProcessCount).bikou = ""
            m_arrPreviewProcesses(m_lPreviewProcessCount).IsEdited = False
            m_arrPreviewProcesses(m_lPreviewProcessCount).UserEditedGoDandori = ""
            m_arrPreviewProcesses(m_lPreviewProcessCount).IsGoDandoriUserEdited = False
        End If
    End If

    Call RefreshListBoxFromInternalArray

    If Me.ListViewPreview.ListItems.Count > 0 Then
        Dim newSelectionIndex As Long
        If lSelectedIndexInView <= Me.ListViewPreview.ListItems.Count Then
            newSelectionIndex = lSelectedIndexInView
        Else
            newSelectionIndex = Me.ListViewPreview.ListItems.Count
        End If
        Me.ListViewPreview.ListItems(newSelectionIndex).Selected = True
        Me.ListViewPreview.ListItems(newSelectionIndex).EnsureVisible
        Me.ListViewPreview.SetFocus
    End If
End Sub

Private Sub cmdDuplicatePreviewItem_Click()
    Dim selectedItem As MSComctlLib.ListItem
    Dim lSelectedIndexInView As Long
    Dim lArrayIndexToDuplicate As Long
    Dim duplicatedItem As PreviewProcessItem
    Dim i As Long
    Dim lInsertAtIndexInArray As Long

    Set selectedItem = Me.ListViewPreview.selectedItem

    If selectedItem Is Nothing Then
        MsgBox "複製する工程をプレビューリストから選択してください。", vbInformation
        Exit Sub
    End If

    lSelectedIndexInView = selectedItem.Index
    lArrayIndexToDuplicate = lSelectedIndexInView - 1

    If lArrayIndexToDuplicate < 0 Or lArrayIndexToDuplicate >= m_lPreviewProcessCount Then
        MsgBox "内部エラー: 複製元のインデックスが配列の範囲外です。", vbCritical
        Exit Sub
    End If

    If m_lPreviewProcessCount > UBound(m_arrPreviewProcesses) Then
        ReDim Preserve m_arrPreviewProcesses(0 To m_lPreviewProcessCount + 9)
    End If

    duplicatedItem = m_arrPreviewProcesses(lArrayIndexToDuplicate)
    duplicatedItem.IsEdited = False
    duplicatedItem.UserEditedGoDandori = ""
    duplicatedItem.IsGoDandoriUserEdited = False

    lInsertAtIndexInArray = lArrayIndexToDuplicate + 1

    For i = m_lPreviewProcessCount To lInsertAtIndexInArray Step -1
        m_arrPreviewProcesses(i) = m_arrPreviewProcesses(i - 1)
    Next i

    m_arrPreviewProcesses(lInsertAtIndexInArray) = duplicatedItem
    m_lPreviewProcessCount = m_lPreviewProcessCount + 1

    Call RefreshListBoxFromInternalArray

    Dim newSelectionIndexInView As Long
    newSelectionIndexInView = lInsertAtIndexInArray + 1
    If newSelectionIndexInView <= Me.ListViewPreview.ListItems.Count Then
        Me.ListViewPreview.ListItems(newSelectionIndexInView).Selected = True
        Me.ListViewPreview.ListItems(newSelectionIndexInView).EnsureVisible
        Me.ListViewPreview.SetFocus
    End If
End Sub

Private Sub cmdMoveDown_Click()
    Dim selectedItem As MSComctlLib.ListItem
    Dim lSelectedIndexInView As Long
    Dim lArrayIndexToMove As Long
    Dim tempItem As PreviewProcessItem

    Set selectedItem = Me.ListViewPreview.selectedItem

    If selectedItem Is Nothing Then
        MsgBox "移動する工程をリストから選択してください。", vbInformation
        Exit Sub
    End If

    lSelectedIndexInView = selectedItem.Index

    If lSelectedIndexInView >= Me.ListViewPreview.ListItems.Count Then
        MsgBox "これ以上、下には移動できません。", vbInformation
        Exit Sub
    End If

    lArrayIndexToMove = lSelectedIndexInView - 1

    tempItem = m_arrPreviewProcesses(lArrayIndexToMove)
    m_arrPreviewProcesses(lArrayIndexToMove) = m_arrPreviewProcesses(lArrayIndexToMove + 1)
    m_arrPreviewProcesses(lArrayIndexToMove + 1) = tempItem

    Call RefreshListBoxFromInternalArray

    Dim newSelectionIndexInView As Long
    newSelectionIndexInView = lSelectedIndexInView + 1
    If newSelectionIndexInView <= Me.ListViewPreview.ListItems.Count Then
        Me.ListViewPreview.ListItems(newSelectionIndexInView).Selected = True
        Me.ListViewPreview.ListItems(newSelectionIndexInView).EnsureVisible
        Me.ListViewPreview.SetFocus
    End If
End Sub

Private Sub cmdMoveUp_Click()
    Dim selectedItem As MSComctlLib.ListItem
    Dim lSelectedIndexInView As Long
    Dim lArrayIndexToMove As Long
    Dim tempItem As PreviewProcessItem

    Set selectedItem = Me.ListViewPreview.selectedItem

    If selectedItem Is Nothing Then
        MsgBox "移動する工程をリストから選択してください。", vbInformation
        Exit Sub
    End If

    lSelectedIndexInView = selectedItem.Index

    If lSelectedIndexInView <= 1 Then
        MsgBox "これ以上、上には移動できません。", vbInformation
        Exit Sub
    End If

    lArrayIndexToMove = lSelectedIndexInView - 1

    tempItem = m_arrPreviewProcesses(lArrayIndexToMove)
    m_arrPreviewProcesses(lArrayIndexToMove) = m_arrPreviewProcesses(lArrayIndexToMove - 1)
    m_arrPreviewProcesses(lArrayIndexToMove - 1) = tempItem

    Call RefreshListBoxFromInternalArray

    Dim newSelectionIndexInView As Long
    newSelectionIndexInView = lSelectedIndexInView - 1
    If newSelectionIndexInView >= 1 And newSelectionIndexInView <= Me.ListViewPreview.ListItems.Count Then
        Me.ListViewPreview.ListItems(newSelectionIndexInView).Selected = True
        Me.ListViewPreview.ListItems(newSelectionIndexInView).EnsureVisible
        Me.ListViewPreview.SetFocus
    End If
End Sub

Private Sub LoadZKeywords()
    Dim wsKeywords As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim keyword As String
    Dim keywordType As String
    Dim internalKey As String
    Dim needsOutsource As Boolean
    Dim needsPolish As Boolean

    Set zKeywordsDict = CreateObject("Scripting.Dictionary")
    zKeywordsDict.CompareMode = vbTextCompare

    On Error Resume Next
    Set wsKeywords = ThisWorkbook.Sheets(SHEET_KOUTEI_TIMES)
    On Error GoTo 0

    If wsKeywords Is Nothing Then
        MsgBox "Z列キーワード定義用のシート「" & SHEET_KOUTEI_TIMES & "」が見つかりません。", vbCritical
        Set zKeywordsDict = Nothing
        Exit Sub
    End If

    lastRow = wsKeywords.Cells(wsKeywords.Rows.Count, COL_ZKEYWORD_KEY).End(xlUp).Row
    
    For i = 2 To lastRow
        keyword = UCase(Trim(CStr(wsKeywords.Cells(i, COL_ZKEYWORD_KEY).Value)))
        keywordType = Trim(CStr(wsKeywords.Cells(i, COL_ZKEYWORD_TYPE).Value))
        internalKey = Trim(CStr(wsKeywords.Cells(i, COL_ZKEYWORD_INTERNALKEY).Value))
        
        If UCase(Trim(CStr(wsKeywords.Cells(i, COL_ZKEYWORD_NEEDSOUTSourcing).Value))) = "TRUE" Then
            needsOutsource = True
        Else
            needsOutsource = False
        End If
        
        If UCase(Trim(CStr(wsKeywords.Cells(i, COL_ZKEYWORD_NEEDSPOLISHING).Value))) = "TRUE" Then
            needsPolish = True
        Else
            needsPolish = False
        End If

        If keyword <> "" Then
            If Not zKeywordsDict.Exists(keyword) Then
                zKeywordsDict.Add keyword, Array(keywordType, internalKey, needsOutsource, needsPolish)
            End If
        End If
    Next i
End Sub

Private Sub cmdExecuteLastOutputToActive_Click()
    Dim wsLog As Worksheet
    Dim wsTarget As Worksheet
    Dim lastLoggedRow As Long
    Dim i As Long
    Dim outputStartRow As Long
    Dim tempPreviewItem As PreviewProcessItem
    Dim currentOutputRow As Long

    On Error GoTo ErrorHandlerCmdExecuteLast

    Set wsLog = Nothing
    On Error Resume Next
    Set wsLog = ThisWorkbook.Sheets(SHEET_LAST_OUTPUT_LOG)
    On Error GoTo ErrorHandlerCmdExecuteLast
        
    If wsLog Is Nothing Then
        MsgBox "「" & SHEET_LAST_OUTPUT_LOG & "」シートが見つかりません。", vbExclamation
        Exit Sub
    End If

    lastLoggedRow = wsLog.Cells(wsLog.Rows.Count, 1).End(xlUp).Row
    If lastLoggedRow < 1 Or IsEmpty(wsLog.Cells(1, 1).Value) Then
        MsgBox "ログが空です。", vbInformation
        Exit Sub
    End If

    Set wsTarget = ThisWorkbook.Sheets(SHEET_KOUTEIHYO)
    If Not ValidateActiveCell(wsTarget, outputStartRow) Then Exit Sub
    
    Application.ScreenUpdating = False
    currentOutputRow = outputStartRow

    For i = 1 To lastLoggedRow
        tempPreviewItem.ProcessName = CStr(wsLog.Cells(i, 1).Value)
        tempPreviewItem.supplier = CStr(wsLog.Cells(i, 2).Value)
        tempPreviewItem.MaeDandoriTime = CStr(wsLog.Cells(i, 3).Value)
        tempPreviewItem.YujinTime = CStr(wsLog.Cells(i, 4).Value)
        tempPreviewItem.MachineTime = CStr(wsLog.Cells(i, 5).Value)
        tempPreviewItem.GoDandoriTime = CStr(wsLog.Cells(i, 6).Value)
        tempPreviewItem.bikou = CStr(wsLog.Cells(i, 7).Value)
        tempPreviewItem.UserEditedGoDandori = CStr(wsLog.Cells(i, 8).Value)
        tempPreviewItem.IsGoDandoriUserEdited = _
            Not IsEmpty(wsLog.Cells(i, 9).Value) And CBool(wsLog.Cells(i, 9).Value)

        Call AddProcessToSheet( _
                wsTarget, _
                currentOutputRow, _
                outputStartRow, _
                tempPreviewItem.ProcessName, _
                tempPreviewItem.supplier, _
                tempPreviewItem.MaeDandoriTime, _
                tempPreviewItem.YujinTime, _
                tempPreviewItem.MachineTime, _
                tempPreviewItem.GoDandoriTime, _
                tempPreviewItem.bikou)
    Next i

FinallyCmdExecuteLast:
    Application.ScreenUpdating = True
    Set wsLog = Nothing: Set wsTarget = Nothing
    Unload Me
    Exit Sub

ErrorHandlerCmdExecuteLast:
    MsgBox "再出力中にエラー発生。" & vbCrLf & _
           "番号: " & Err.Number & vbCrLf & _
           "内容: " & Err.Description, vbCritical
    Resume FinallyCmdExecuteLast
End Sub

Private Sub AllowNumericOnlyWithOptionalDecimal(ByVal TargetTextbox As MSForms.TextBox, ByRef KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case vbKey0 To vbKey9
            ' そのまま許可
        Case Asc(".")
            If InStr(1, TargetTextbox.Text, ".") > 0 Then
                KeyAscii = 0
                Beep
            End If
        Case vbKeyBack
            ' そのまま許可
        Case Else
            KeyAscii = 0
            Beep
    End Select
End Sub

Private Sub UpdateGoDandoriTimes()
    Dim i As Long, k As Long
    Dim currentProcessName As String
    Dim groupStartIndex As Long
    Dim groupCount As Long
    Dim masterGoDandoriValue As String

    If m_lPreviewProcessCount = 0 Then Exit Sub

    i = 0
    Do While i < m_lPreviewProcessCount
        currentProcessName = m_arrPreviewProcesses(i).ProcessName
        groupStartIndex = i
        groupCount = 1

        Dim processData As Variant
        processData = GetProcessTimes(currentProcessName)
        If IsArray(processData) Then
            If UBound(processData) >= 3 Then
                masterGoDandoriValue = CStr(processData(3))
            Else
                masterGoDandoriValue = ""
            End If
        Else
            masterGoDandoriValue = ""
        End If
        
        For k = i + 1 To m_lPreviewProcessCount - 1
            If m_arrPreviewProcesses(k).ProcessName = currentProcessName Then
                groupCount = groupCount + 1
            Else
                Exit For
            End If
        Next k
        
        For k = 0 To groupCount - 1
            Dim currentIndexInArray As Long
            currentIndexInArray = groupStartIndex + k
            
            If k = groupCount - 1 Then
                If m_arrPreviewProcesses(currentIndexInArray).IsGoDandoriUserEdited Then
                    m_arrPreviewProcesses(currentIndexInArray).GoDandoriTime = m_arrPreviewProcesses(currentIndexInArray).UserEditedGoDandori
                Else
                    m_arrPreviewProcesses(currentIndexInArray).GoDandoriTime = masterGoDandoriValue
                End If
            Else
                m_arrPreviewProcesses(currentIndexInArray).GoDandoriTime = ""
            End If
        Next k
        
        i = groupStartIndex + groupCount
    Loop
End Sub

Private Sub cmdUpdateEdit_Click()
    Dim originalItem As PreviewProcessItem
    Dim changedFields As String
    Dim newFieldVal As String

    If m_lEditingArrayIndex = -1 Then Exit Sub
    If m_lEditingArrayIndex < 0 Or m_lEditingArrayIndex >= m_lPreviewProcessCount Then
        MsgBox "内部エラー: 更新対象のインデックスが不正です。", vbCritical
        GoTo CleanupEditState
    End If

    originalItem = m_arrPreviewProcesses(m_lEditingArrayIndex)
    changedFields = ""

    With m_arrPreviewProcesses(m_lEditingArrayIndex)
        On Error Resume Next

        newFieldVal = Me.cboNameEdit.Value
        If originalItem.ProcessName <> newFieldVal Then changedFields = changedFields & "工程名,"
        .ProcessName = newFieldVal

        newFieldVal = Me.cboSupplierEdit.Value
        If originalItem.supplier <> newFieldVal Then changedFields = changedFields & "業者,"
        .supplier = newFieldVal

        newFieldVal = Me.txtMaeDandoriEdit.Text
        If originalItem.MaeDandoriTime <> newFieldVal Then changedFields = changedFields & "前段取,"
        .MaeDandoriTime = newFieldVal

        newFieldVal = Me.txtYujinTimeEdit.Text
        If originalItem.YujinTime <> newFieldVal Then changedFields = changedFields & "有人,"
        .YujinTime = newFieldVal

        newFieldVal = Me.txtMachineTimeEdit.Text
        If originalItem.MachineTime <> newFieldVal Then changedFields = changedFields & "機械,"
        .MachineTime = newFieldVal
        
        newFieldVal = Me.txtGoDandoriEdit.Text
        If .GoDandoriTime <> newFieldVal Then
            changedFields = changedFields & "後段取,"
            .IsGoDandoriUserEdited = True
            .UserEditedGoDandori = newFieldVal
        ElseIf .IsGoDandoriUserEdited And .UserEditedGoDandori <> newFieldVal Then
            changedFields = changedFields & "後段取(再),"
            .UserEditedGoDandori = newFieldVal
        End If
        .GoDandoriTime = newFieldVal
        
        newFieldVal = Me.txtBikouEdit.Text
        If originalItem.bikou <> newFieldVal Then changedFields = changedFields & "備考,"
        .bikou = newFieldVal
        
        If Err.Number <> 0 Then
            MsgBox "編集用コントロールの一部からの値の取得に失敗しました。" & vbCrLf & _
                   "フォームデザインでコントロール名を確認してください。", vbExclamation
            Err.Clear
            On Error GoTo 0
            GoTo CleanupEditState
        End If
        On Error GoTo 0

        If changedFields <> "" Then
            .IsEdited = True
        End If
    End With

    Call RefreshListBoxFromInternalArray
    
    If m_lEditingArrayIndex >= 0 And m_lEditingArrayIndex < Me.ListViewPreview.ListItems.Count Then
        Dim newSelectionIndexInView As Long
        newSelectionIndexInView = m_lEditingArrayIndex + 1
        
        If newSelectionIndexInView <= Me.ListViewPreview.ListItems.Count Then
            Me.ListViewPreview.ListItems(newSelectionIndexInView).Selected = True
            Me.ListViewPreview.ListItems(newSelectionIndexInView).EnsureVisible
            Me.ListViewPreview.SetFocus
        End If
    End If

    If changedFields = "" Then
        MsgBox "値に変更はありませんでした。", vbInformation
    End If

CleanupEditState:
    On Error Resume Next
    Me.FrameEditControls.Visible = False
    On Error GoTo 0
    m_lEditingArrayIndex = -1
End Sub

Private Sub cmdCancelEdit_Click()
    On Error Resume Next
    Me.FrameEditControls.Visible = False
    On Error GoTo 0
    m_lEditingArrayIndex = -1
End Sub

Private Sub ListViewPreview_ItemClick(ByVal Item As MSComctlLib.ListItem)
    Dim lArrayIndexToEdit As Long
    Dim itemIsValid As Boolean
    itemIsValid = False

    On Error Resume Next
    itemIsValid = Not (Item Is Nothing)
    
    If Err.Number <> 0 Then
        MsgBox "引数 'Item' の状態確認中に予期せぬエラーが発生しました。" & vbCrLf & _
               "エラー番号: " & Err.Number & " (" & Err.Description & ")" & vbCrLf & _
               "ListViewコントロールまたは関連ライブラリに問題がある可能性があります。", vbCritical, "内部エラー"
        Err.Clear
        On Error GoTo 0
        Exit Sub
    End If
    On Error GoTo 0

    If Not itemIsValid Then
        Exit Sub
    End If

    lArrayIndexToEdit = Item.Index - 1
    m_lEditingArrayIndex = lArrayIndexToEdit

    If m_lEditingArrayIndex < 0 Or m_lEditingArrayIndex >= m_lPreviewProcessCount Then
        MsgBox "内部エラー: 編集対象のインデックスが配列の範囲外です。" & vbCrLf & _
               "配列インデックス: " & m_lEditingArrayIndex & ", 配列要素数: " & m_lPreviewProcessCount, vbCritical
        m_lEditingArrayIndex = -1
        Exit Sub
    End If

    With m_arrPreviewProcesses(m_lEditingArrayIndex)
        On Error Resume Next
        Me.cboNameEdit.Value = .ProcessName
        Me.cboSupplierEdit.Value = .supplier
        Me.txtMaeDandoriEdit.Text = .MaeDandoriTime
        Me.txtYujinTimeEdit.Text = .YujinTime
        Me.txtMachineTimeEdit.Text = .MachineTime
        Me.txtGoDandoriEdit.Text = .GoDandoriTime
        Me.txtBikouEdit.Text = .bikou
        
        If Err.Number <> 0 Then
            MsgBox "編集用テキストボックスへのデータセット中にエラーが発生しました。" & vbCrLf & _
                   "エラー番号: " & Err.Number & ", 内容: " & Err.Description & vbCrLf & _
                   "フォームデザインでコントロール名を確認してください。", vbExclamation
            Err.Clear
            On Error GoTo 0
            Exit Sub
        End If
        On Error GoTo 0
    End With

    On Error Resume Next
    If TypeName(Me.Controls("FrameEditControls")) = "Frame" Then
        Me.FrameEditControls.Visible = True
    Else
        MsgBox "編集用フレーム 'FrameEditControls' が見つかりません。" & vbCrLf & _
               "フォームデザインでフレームのNameプロパティを確認してください。", vbExclamation
        Exit Sub
    End If
    If Err.Number <> 0 Then
        MsgBox "FrameEditControls の表示処理でエラーが発生しました。" & vbCrLf & _
               "エラー番号: " & Err.Number & ", 内容: " & Err.Description, vbExclamation
        Err.Clear
    End If
    On Error GoTo 0
End Sub

Private Sub SanitizeNumericTextBox(ByVal TargetTextbox As MSForms.TextBox)
    If m_bIsProgrammaticTextBoxChange Then Exit Sub

    m_bIsProgrammaticTextBoxChange = True

    Dim originalText As String
    Dim convertedText As String
    Dim cleanedText As String
    Dim char As String
    Dim i As Long
    Dim decimalFound As Boolean
    Dim originalSelStart As Long
    Dim originalSelLength As Long

    originalSelStart = TargetTextbox.SelStart
    originalSelLength = TargetTextbox.SelLength

    originalText = TargetTextbox.Text
    convertedText = StrConv(originalText, vbNarrow)

    cleanedText = ""
    decimalFound = False
    For i = 1 To Len(convertedText)
        char = Mid$(convertedText, i, 1)
        If char >= "0" And char <= "9" Then
            cleanedText = cleanedText & char
        ElseIf char = "." Then
            If Not decimalFound Then
                cleanedText = cleanedText & char
                decimalFound = True
            End If
        End If
    Next i

    If TargetTextbox.Text <> cleanedText Then
        TargetTextbox.Text = cleanedText

        On Error Resume Next
        Dim newSelStart As Long
        newSelStart = originalSelStart - (Len(originalText) - Len(cleanedText))
        If newSelStart < 0 Then newSelStart = 0
        If newSelStart > Len(cleanedText) Then newSelStart = Len(cleanedText)
        TargetTextbox.SelStart = newSelStart
        TargetTextbox.SelLength = 0
        On Error GoTo 0
    End If

    m_bIsProgrammaticTextBoxChange = False
End Sub

Private Sub txtMaeDandoriEdit_Change()
    Call SanitizeNumericTextBox(Me.txtMaeDandoriEdit)
End Sub

Private Sub txtYujinTimeEdit_Change()
    Call SanitizeNumericTextBox(Me.txtYujinTimeEdit)
End Sub

Private Sub txtMachineTimeEdit_Change()
    Call SanitizeNumericTextBox(Me.txtMachineTimeEdit)
End Sub

Private Sub txtGoDandoriEdit_Change()
    Call SanitizeNumericTextBox(Me.txtGoDandoriEdit)
End Sub

Private Sub txtMaeDandoriEdit_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call AllowNumericOnlyWithOptionalDecimal(Me.txtMaeDandoriEdit, KeyAscii)
End Sub

Private Sub txtYujinTimeEdit_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call AllowNumericOnlyWithOptionalDecimal(Me.txtYujinTimeEdit, KeyAscii)
End Sub

Private Sub txtMachineTimeEdit_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call AllowNumericOnlyWithOptionalDecimal(Me.txtMachineTimeEdit, KeyAscii)
End Sub

Private Sub txtGoDandoriEdit_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call AllowNumericOnlyWithOptionalDecimal(Me.txtGoDandoriEdit, KeyAscii)
End Sub

Private Sub txtBikouEdit_Change()
End Sub

' === ユーザーフォーム初期化 ===
Private Sub UserForm_Initialize()
    Dim i As Integer
    Dim key As Variant
    Dim editNameKey As Variant
    Dim wsTimes As Worksheet
    Dim wsTimesForEdit As Worksheet
    Dim lMatchRow As Long
    Dim lMatchRowForEdit As Long
    Dim sTargetFlag As String
    Dim sEditCandidateFlag As String
    Dim tempUniqueSuppliersEdit As Object
    Dim tempUniqueSuppliersCB2 As Object
    Dim flagValueHColumn As String

    ' ListView初期設定
    With Me.ListViewPreview
        .View = lvwReport
        .Gridlines = True
        .FullRowSelect = True
        .HideSelection = False
        .MultiSelect = False

        .ColumnHeaders.Clear
        .ColumnHeaders.Add , , "工程名", 120
        .ColumnHeaders.Add , , "業者", 80
        .ColumnHeaders.Add , , "前段取", 60, lvwColumnRight
        .ColumnHeaders.Add , , "有人", 50, lvwColumnRight
        .ColumnHeaders.Add , , "機械", 50, lvwColumnRight
        .ColumnHeaders.Add , , "後段取", 60, lvwColumnRight
        .ColumnHeaders.Add , , "備考", 180

        .Font.name = "Meiryo UI"
        .Font.Size = 9
    End With

    ' マスターデータ読み込み
    Call LoadProcessTimes
    Call LoadMaterialInfo
    Call LoadOutsourcingInfo
    Call LoadZKeywords

    ' データ読み込みエラーチェック
    If processTimesDict Is Nothing Or materialInfoDict Is Nothing Or outsourcingInfoDict Is Nothing Then
        MsgBox "データ読み込みに失敗しました。処理を中断します。", vbCritical
        Unload Me
        Exit Sub
    ElseIf processTimesDict.Count = 0 And materialInfoDict.Count = 0 And outsourcingInfoDict.Count = 0 Then
        MsgBox "工数、材質、および外注先データがシート「" & SHEET_KOUTEI_TIMES & "」に登録されていません。", vbExclamation
    ElseIf processTimesDict.Count = 0 Then
        MsgBox "工数データがシート「" & SHEET_KOUTEI_TIMES & "」のA-G列に登録されていません。", vbExclamation
    ElseIf materialInfoDict.Count = 0 Then
        MsgBox "材質データがシート「" & SHEET_KOUTEI_TIMES & "」のJ-M列に登録されていません。", vbExclamation
    ElseIf outsourcingInfoDict.Count = 0 Then
        MsgBox "外注先データがシート「" & SHEET_KOUTEI_TIMES & "」のO-P(R,S)列に登録されていません。", vbExclamation
    End If

    ' ComboBox工程選択初期化
    With Me.ComboBox工程選択
        .Clear
        If Not processTimesDict Is Nothing Then
            If processTimesDict.Count > 0 Then
                sTargetFlag = "〇"
                On Error Resume Next
                Set wsTimes = ThisWorkbook.Sheets(SHEET_KOUTEI_TIMES)
                On Error GoTo 0
                If Not wsTimes Is Nothing Then
                    For Each key In processTimesDict.Keys
                        lMatchRow = 0
                        On Error Resume Next
                        lMatchRow = Application.WorksheetFunction.Match(CStr(key), wsTimes.Columns(COL_TIME_KEY), 0)
                        On Error GoTo 0
                        If lMatchRow > 0 Then
                            flagValueHColumn = Trim(CStr(wsTimes.Cells(lMatchRow, 8).Value))
                            If flagValueHColumn = sTargetFlag Then
                                .AddItem CStr(key)
                            End If
                        End If
                    Next key
                    If .ListCount > 0 Then .ListIndex = 0 Else .AddItem "(単品対象工程なし)": .Enabled = False
                Else
                    .AddItem "(マスターシートエラー)": .Enabled = False
                End If
            Else
                .AddItem "(工程マスター未登録)": .Enabled = False
            End If
        Else
            .AddItem "(工数データ読込エラー)": .Enabled = False
        End If
    End With

    ' cboNameEdit初期化
    With Me.cboNameEdit
        .Clear
        If Not processTimesDict Is Nothing Then
            If processTimesDict.Count > 0 Then
                sEditCandidateFlag = "〇"
                On Error Resume Next
                Set wsTimesForEdit = ThisWorkbook.Sheets(SHEET_KOUTEI_TIMES)
                On Error GoTo 0
                If Not wsTimesForEdit Is Nothing Then
                    For Each editNameKey In processTimesDict.Keys
                        lMatchRowForEdit = 0
                        On Error Resume Next
                        lMatchRowForEdit = Application.WorksheetFunction.Match(CStr(editNameKey), wsTimesForEdit.Columns(COL_TIME_KEY), 0)
                        On Error GoTo 0
                        If lMatchRowForEdit > 0 Then
                            Dim flagValueIColumn As String
                            flagValueIColumn = Trim(CStr(wsTimesForEdit.Cells(lMatchRowForEdit, 9).Value))
                            If flagValueIColumn = sEditCandidateFlag Then
                                .AddItem CStr(editNameKey)
                            End If
                        End If
                    Next editNameKey
                    If .ListCount = 0 Then .AddItem "(編集候補工程なし)"
                Else
                    .AddItem "(マスターシートエラー)": .Enabled = False
                End If
            Else
                .AddItem "(工程マスター未登録)": .Enabled = False
            End If
        Else
            .AddItem "(工数データ読込エラー)": .Enabled = False
        End If
    End With

    ' cboSupplierEdit初期化
    Set tempUniqueSuppliersEdit = CreateObject("Scripting.Dictionary")
    tempUniqueSuppliersEdit.CompareMode = vbTextCompare
    With Me.cboSupplierEdit
        .Clear
        If Not outsourcingInfoDict Is Nothing Then
            If outsourcingInfoDict.Count > 0 Then
                Dim dictKeyEdit As Variant
                Dim arrSupplierInfoEdit As Variant
                Dim supplierNameEdit As String
                Dim shouldDisplayEdit As Boolean

                For Each dictKeyEdit In outsourcingInfoDict.Keys
                    arrSupplierInfoEdit = outsourcingInfoDict(dictKeyEdit)
                    If IsArray(arrSupplierInfoEdit) And UBound(arrSupplierInfoEdit) >= 2 Then
                        supplierNameEdit = Trim(CStr(arrSupplierInfoEdit(0)))
                        shouldDisplayEdit = CBool(arrSupplierInfoEdit(2))
                        If shouldDisplayEdit And supplierNameEdit <> "" And Not tempUniqueSuppliersEdit.Exists(supplierNameEdit) Then
                            tempUniqueSuppliersEdit.Add supplierNameEdit, Null
                            .AddItem supplierNameEdit
                        End If
                    End If
                Next dictKeyEdit
                If .ListCount = 0 Then .AddItem "(編集候補の業者なし)"
            Else
                .AddItem "(外注先マスター未登録)"
            End If
        Else
            .AddItem "(外注先データ読込エラー)"
        End If
    End With
    Set tempUniqueSuppliersEdit = Nothing

    ' ComboBox2初期化
    Set tempUniqueSuppliersCB2 = CreateObject("Scripting.Dictionary")
    tempUniqueSuppliersCB2.CompareMode = vbTextCompare
    With Me.ComboBox2
        .Clear
        If Not outsourcingInfoDict Is Nothing Then
            If outsourcingInfoDict.Count > 0 Then
                Dim dictKeyCB2 As Variant
                Dim arrSupplierInfoCB2 As Variant
                Dim supplierNameCB2 As String
                Dim shouldDisplayCB2 As Boolean

                For Each dictKeyCB2 In outsourcingInfoDict.Keys
                    arrSupplierInfoCB2 = outsourcingInfoDict(dictKeyCB2)
                    If IsArray(arrSupplierInfoCB2) And UBound(arrSupplierInfoCB2) >= 1 Then
                        supplierNameCB2 = Trim(CStr(arrSupplierInfoCB2(0)))
                        shouldDisplayCB2 = CBool(arrSupplierInfoCB2(1))
                        If shouldDisplayCB2 And supplierNameCB2 <> "" And Not tempUniqueSuppliersCB2.Exists(supplierNameCB2) Then
                            tempUniqueSuppliersCB2.Add supplierNameCB2, Null
                            .AddItem supplierNameCB2
                        End If
                    End If
                Next dictKeyCB2
                If .ListCount > 0 Then
                    .ListIndex = 0
                Else
                    .AddItem "(外作候補の業者なし)"
                End If
            Else
                .AddItem "(外注先マスター未登録)"
            End If
        Else
            .AddItem "(外注先データ読込エラー)"
        End If
    End With
    Set tempUniqueSuppliersCB2 = Nothing

    ' CheckBoxGeibi初期設定
    Me.CheckBoxGeibi.Caption = "ゲイビ鋼業に外注する"
    Me.CheckBoxGeibi.Value = False
    With Me.ComboBoxGeibiType
        .Clear
        .AddItem "材料～荒"
        .AddItem "材料～焼きまで"
        .AddItem "荒加工のみ"
        .AddItem "荒～焼きまで"
        .ListIndex = 0
        .Visible = Me.CheckBoxGeibi.Value
        .Enabled = Me.CheckBoxGeibi.Value
    End With

    ' ComboBox3初期設定
    With Me.ComboBox3
        .Clear
        .AddItem "平面研削 汎用": .AddItem "平面研削 NC": .AddItem "倣い研削": .AddItem "M/C（小）"
        .AddItem "M/C（大）": .AddItem "ﾜｲﾔ放電加工": .AddItem "型彫り放電"
        If .ListCount > 0 Then .ListIndex = 0
    End With

    ' ComboBoxTsubaCount初期設定
    With Me.ComboBoxTsubaCount
        .Clear
        .AddItem "1": .AddItem "2": .AddItem "3"
        If .ListCount > 0 Then .ListIndex = 0
    End With
    With Me.ComboBoxTsubaRough
        .Clear
        .AddItem "MC（小）": .AddItem "ﾜｲﾔ放電加工"
        If .ListCount > 0 Then .ListIndex = 0
    End With

    ' CheckBox初期値
    If TypeName(Me.Controls("CheckBoxKatabori")) = "CheckBox" Then Me.CheckBoxKatabori.Value = False
    If TypeName(Me.Controls("CheckBoxNaraiKensaku")) = "CheckBox" Then Me.CheckBoxNaraiKensaku.Value = False

    ' SG回数関連初期設定
    If TypeName(Me.Controls("CheckBoxAutoSgCount")) = "CheckBox" Then
        Me.CheckBoxAutoSgCount.Caption = "SG回数を自動で決定する"
        Me.CheckBoxAutoSgCount.Value = True
    End If
    If TypeName(Me.Controls("ComboBoxSgCount")) = "ComboBox" Then
        With Me.ComboBoxSgCount
            .Clear
            For i = 1 To 6
                .AddItem CStr(i)
            Next i
            .ListIndex = 2
            .Enabled = False
        End With
    End If

    ' 編集用フレーム初期化
    m_lEditingArrayIndex = -1
    If TypeName(Me.Controls("FrameEditControls")) = "Frame" Then
        Me.FrameEditControls.Visible = False
    End If

    ' プレビュー用入力フィールド初期設定
    Dim wsInitialize As Worksheet, targetRowInitialize As Long
    Dim ctrl As Object
    Dim txtBox As MSForms.TextBox
    Dim zColumnValueInitialize As String
    zColumnValueInitialize = ""

    On Error Resume Next
    Set wsInitialize = Nothing
    Set wsInitialize = ThisWorkbook.Sheets(SHEET_KOUTEIHYO)
    On Error GoTo 0

    If Not wsInitialize Is Nothing Then
        If TypeName(ActiveSheet) = "Worksheet" Then
            If ActiveSheet.name = wsInitialize.name Then
                If TypeName(Selection) = "Range" Then
                    If Selection.Cells.CountLarge = 1 Then
                        targetRowInitialize = ActiveCell.Row
                        If targetRowInitialize > 0 Then
                            Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtMaterialCodePreview"): On Error GoTo 0
                            If Not ctrl Is Nothing And TypeName(ctrl) = "TextBox" Then Set txtBox = ctrl: txtBox.Text = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_AC_INPUT).Value)): Set txtBox = Nothing

                            Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtZValuePreview"): On Error GoTo 0
                            If Not ctrl Is Nothing And TypeName(ctrl) = "TextBox" Then
                                Set txtBox = ctrl
                                zColumnValueInitialize = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_Z_INPUT).Value))
                                txtBox.Text = zColumnValueInitialize
                                Set txtBox = Nothing
                            Else
                                zColumnValueInitialize = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_Z_INPUT).Value))
                            End If
                            Set ctrl = Nothing

                            Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtSizePreview"): On Error GoTo 0
                            If Not ctrl Is Nothing And TypeName(ctrl) = "TextBox" Then Set txtBox = ctrl: txtBox.Text = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_AD_SIZE_INPUT).Value)): Set txtBox = Nothing

                            Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtItemNamePreview"): On Error GoTo 0
                            If Not ctrl Is Nothing And TypeName(ctrl) = "TextBox" Then Set txtBox = ctrl: txtBox.Text = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_AH_ITEMNAME_INPUT).Value)): Set txtBox = Nothing

                            Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtRemarksPreview"): On Error GoTo 0
                            If Not ctrl Is Nothing And TypeName(ctrl) = "TextBox" Then Set txtBox = ctrl: txtBox.Text = Trim(CStr(wsInitialize.Cells(targetRowInitialize, COL_Y_REMARKS_INPUT).Value)): Set txtBox = Nothing
                            Set ctrl = Nothing

                            If TypeName(Me.Controls("txtSizePreview")) = "TextBox" Then sizeStrInitialize = Me.txtSizePreview.Text
                            If TypeName(Me.Controls("txtItemNamePreview")) = "TextBox" Then itemNameInitialize = Me.txtItemNamePreview.Text
                            If TypeName(Me.Controls("txtRemarksPreview")) = "TextBox" Then remarksStrInitialize = Me.txtRemarksPreview.Text

                            isPlateBySizeInitialize = (ClassifyPartBasedOnSizeString(sizeStrInitialize) = "+")
                            containsPInitialize = (InStr(1, UCase(itemNameInitialize), "P", vbTextCompare) > 0)
                            If isPlateBySizeInitialize And containsPInitialize Then If TypeName(Me.Controls("OptionButton5")) = "OptionButton" Then Me.OptionButton5.Value = True

                            containsLayoutInRemarks = (InStr(1, remarksStrInitialize, "ﾚｲｱｳﾄ", vbTextCompare) > 0 Or InStr(1, remarksStrInitialize, "レイアウト", vbTextCompare) > 0)
                            If containsLayoutInRemarks Then If TypeName(Me.Controls("OptionButton6")) = "OptionButton" Then Me.OptionButton6.Value = True

                            containsDoujiInRemarks = (InStr(1, remarksStrInitialize, "同時", vbTextCompare) > 0)
                            If TypeName(Me.Controls("CheckBoxLayout")) = "CheckBox" Then
                                If containsDoujiInRemarks Then Me.CheckBoxLayout.Value = True
                            End If

                            Dim containsMisumiInZ As Boolean
                            m_bCheckBox7_IsAutoChecked = False
                            containsMisumiInZ = (InStr(1, zColumnValueInitialize, "ミスミ", vbTextCompare) > 0)
                            If TypeName(Me.Controls("CheckBox7")) = "CheckBox" Then
                                If containsMisumiInZ Then
                                    Me.CheckBox7.Value = True
                                    m_bCheckBox7_IsAutoChecked = True
                                Else
                                    Me.CheckBox7.Value = False
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End If
    End If
    On Error GoTo 0

    ' OptionButton初期選択状態保存
    If TypeName(Me.Controls("OptionButton4")) = "OptionButton" And Me.OptionButton4.Value Then
        m_sPreviouslySelectedShapeOption = Me.OptionButton4.name
    ElseIf TypeName(Me.Controls("OptionButton5")) = "OptionButton" And Me.OptionButton5.Value Then
        m_sPreviouslySelectedShapeOption = Me.OptionButton5.name
    ElseIf TypeName(Me.Controls("OptionButton6")) = "OptionButton" And Me.OptionButton6.Value Then
        m_sPreviouslySelectedShapeOption = Me.OptionButton6.name
    Else
        If TypeName(Me.Controls("OptionButton4")) = "OptionButton" Then
            Me.OptionButton4.Value = True
            m_sPreviouslySelectedShapeOption = Me.OptionButton4.name
        End If
    End If

    ' CheckBoxに連動するコントロールの表示/有効状態調整
    If TypeName(Me.Controls("CheckBox7")) = "CheckBox" Then
        If TypeName(Me.Controls("CheckBox8")) = "CheckBox" Then
            Me.CheckBox8.Visible = Me.CheckBox7.Value
            Me.CheckBox8.Enabled = Me.CheckBox7.Value
            If Not Me.CheckBox7.Value Then Me.CheckBox8.Value = False
        End If
        If TypeName(Me.Controls("ComboBox3")) = "ComboBox" Then
            Me.ComboBox3.Visible = Me.CheckBox7.Value
            Me.ComboBox3.Enabled = (Me.CheckBox7.Value And Me.CheckBox8.Value)
        End If
    End If

    If TypeName(Me.Controls("CheckBox9")) = "CheckBox" And TypeName(Me.Controls("ComboBox2")) = "ComboBox" Then
        Me.ComboBox2.Visible = Me.CheckBox9.Value
        Me.ComboBox2.Enabled = Me.CheckBox9.Value
    End If

    If TypeName(Me.Controls("CheckBoxTsuba")) = "CheckBox" Then
        Dim tsubaChecked As Boolean
        tsubaChecked = Me.CheckBoxTsuba.Value
        If TypeName(Me.Controls("ComboBoxTsubaCount")) = "ComboBox" Then
            Me.ComboBoxTsubaCount.Visible = tsubaChecked
            Me.ComboBoxTsubaCount.Enabled = tsubaChecked
        End If
        If TypeName(Me.Controls("ComboBoxTsubaRough")) = "ComboBox" Then
            Me.ComboBoxTsubaRough.Visible = tsubaChecked
            Me.ComboBoxTsubaRough.Enabled = tsubaChecked
        End If
    End If

    Call UpdatePreview
End Sub

Private Sub UpdatePreview()
    Dim ctrl As Object
    Dim txtBox As MSForms.TextBox

    m_lPreviewProcessCount = 0
    Erase m_arrPreviewProcesses
    ReDim m_arrPreviewProcesses(0 To 49)

    ' 入力値取得
    Dim zValuePreview As String, materialCodeInputPreview As String, sizeStrPreview As String
    Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtMaterialCodePreview"): On Error GoTo 0
    If Not ctrl Is Nothing And TypeName(ctrl) = "TextBox" Then Set txtBox = ctrl: materialCodeInputPreview = Trim(txtBox.Text): Set txtBox = Nothing Else materialCodeInputPreview = "SKD11"
    Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtZValuePreview"): On Error GoTo 0
    If Not ctrl Is Nothing And TypeName(ctrl) = "TextBox" Then Set txtBox = ctrl: zValuePreview = Trim(txtBox.Text): Set txtBox = Nothing Else zValuePreview = ""
    Set ctrl = Nothing: On Error Resume Next: Set ctrl = Me.Controls("txtSizePreview"): On Error GoTo 0
    If Not ctrl Is Nothing And TypeName(ctrl) = "TextBox" Then Set txtBox = ctrl: sizeStrPreview = Trim(txtBox.Text): Set txtBox = Nothing Else sizeStrPreview = "50*50*50"
    Set ctrl = Nothing: On Error GoTo 0

    ' フォーム状態取得
    Dim materialCode As String, coatingTypeKey As String
    Dim hasSubZero As Boolean, needsOutsourcingForCoating As Boolean, needsPolishing As Boolean
    Dim shape As String, useWireEDM As Boolean, isDia10OrLess As Boolean, hasShapeProcessing As Boolean
    Dim hasCuttingEdge As Boolean, isOutsourcedProduct As Boolean, isMisumiPurchase As Boolean
    Dim hasAdditionalProcessing As Boolean, additionalProcessName As String
    Dim needsAdjustP As Boolean, useAfterMC As Boolean, isGeibiOutsource As Boolean, geibiPattern As String
    Dim hasTsubaProcessing As Boolean, tsubaCount As Integer, tsubaRoughMethod As String
    Dim noChamfer As Boolean, hasLiftingScrew As Boolean, useSmallStartHole As Boolean
    Dim kataboriChoosenByUser As Boolean, naraiKensakuChoosenByUser As Boolean
    Dim autoSgCountValue As Boolean, userSgCountValue As Integer

    materialCode = GetMaterialName(materialCodeInputPreview)
    If materialCode = "" And materialCodeInputPreview <> "" Then
        Call AddItemToPreviewList("エラー: 材質コード不正", materialCodeInputPreview, "", "", "", "", "シート2のJ列確認")
    End If
    If materialCode = "" Then materialCode = "SKD11"

    Call ParseZColumnInfo(zValuePreview, coatingTypeKey, hasSubZero, needsOutsourcingForCoating, needsPolishing)
    isGeibiOutsource = Me.CheckBoxGeibi.Value
    If isGeibiOutsource Then geibiPattern = Me.ComboBoxGeibiType.Value
    shape = GetShapeFromOptionButtons()
    useWireEDM = Me.CheckBox1.Value
    If shape = "ファミリー加工" Then useWireEDM = True
    isDia10OrLess = Me.CheckBox4.Value
    hasShapeProcessing = Me.CheckBox5.Value
    hasCuttingEdge = Me.CheckBox6.Value
    isOutsourcedProduct = Me.CheckBox9.Value
    isMisumiPurchase = Me.CheckBox7.Value
    hasAdditionalProcessing = Me.CheckBox8.Value
    If hasAdditionalProcessing And Me.ComboBox3.ListIndex > -1 Then additionalProcessName = Me.ComboBox3.Value Else additionalProcessName = ""
    useAfterMC = Me.CheckBoxAfterMC.Value
    needsAdjustP = Me.CheckBoxAdjustP.Value
    hasTsubaProcessing = Me.CheckBoxTsuba.Value
    If hasTsubaProcessing Then
        If Me.ComboBoxTsubaCount.ListIndex > -1 Then tsubaCount = Val(Me.ComboBoxTsubaCount.Value) Else tsubaCount = 1
        If Me.ComboBoxTsubaRough.ListIndex > -1 Then tsubaRoughMethod = Me.ComboBoxTsubaRough.Value Else tsubaRoughMethod = "MC（小）"
    End If
    noChamfer = Me.CheckBoxChamferなし.Value
    hasLiftingScrew = Me.CheckBoxTsurinejiあり.Value
    useSmallStartHole = Me.CheckBoxStartHoleSmall.Value
    If TypeName(Me.Controls("CheckBoxKatabori")) = "CheckBox" Then kataboriChoosenByUser = Me.CheckBoxKatabori.Value Else kataboriChoosenByUser = False
    If TypeName(Me.Controls("CheckBoxNaraiKensaku")) = "CheckBox" Then naraiKensakuChoosenByUser = Me.CheckBoxNaraiKensaku.Value Else naraiKensakuChoosenByUser = False

    If TypeName(Me.Controls("CheckBoxAutoSgCount")) = "CheckBox" Then autoSgCountValue = Me.CheckBoxAutoSgCount.Value Else autoSgCountValue = True
    If Not autoSgCountValue And TypeName(Me.Controls("ComboBoxSgCount")) = "ComboBox" Then
        If Me.ComboBoxSgCount.ListIndex > -1 Then userSgCountValue = Val(Me.ComboBoxSgCount.Value) Else userSgCountValue = 3
    Else
        userSgCountValue = 0
    End If

    ' 分岐処理
    If isOutsourcedProduct Then
        Dim outsourcedSupplier As String
        If Me.ComboBox2.ListIndex > -1 Then outsourcedSupplier = Me.ComboBox2.Value Else outsourcedSupplier = "(外注先未選択)"
        Call AddItemToPreviewList("外注", outsourcedSupplier, "", "", "", "", "")
        If needsOutsourcingForCoating And coatingTypeKey <> "" Then
            Dim coatingSupplierNamePreview As String: coatingSupplierNamePreview = GetOutsourcingSupplierName(coatingTypeKey)
            If coatingSupplierNamePreview = "" Then coatingSupplierNamePreview = coatingTypeKey & " (業者未設定)"
            Call AddItemToPreviewList("外注", coatingSupplierNamePreview, "", "", "", "", "")
        End If
        Call PreviewAddAdjustPProcess(needsAdjustP)
    ElseIf isMisumiPurchase Then
        Dim misumiSupplier As String
        If m_bCheckBox7_IsAutoChecked Then
            misumiSupplier = "ﾐｽﾐ"
        Else
            misumiSupplier = ""
        End If
        Call AddItemToPreviewList("副材(購入品)", misumiSupplier, "", "", "", "", "")
        If hasAdditionalProcessing And additionalProcessName <> "" Then
            Dim timesPreview As Variant
            timesPreview = GetProcessTimes(additionalProcessName)
            If IsArray(timesPreview) Then
                Call AddItemToPreviewList(additionalProcessName, "", CStr(timesPreview(0)), CStr(timesPreview(1)), CStr(timesPreview(2)), CStr(timesPreview(3)), CStr(timesPreview(4)))
            Else
                Call AddItemToPreviewList(additionalProcessName, "", "", "", "", "", "※工数/備考未設定:" & additionalProcessName)
            End If
        End If
        Call PreviewAddAdjustPProcess(needsAdjustP)
    ElseIf shape = "レイアウト切り離し後" Then
        Call PreviewProcessLayoutAfterCut(needsPolishing, hasCuttingEdge, needsOutsourcingForCoating, coatingTypeKey, needsAdjustP, _
                                        hasTsubaProcessing, tsubaCount, tsubaRoughMethod, _
                                        kataboriChoosenByUser, naraiKensakuChoosenByUser, _
                                        useAfterMC, shape, _
                                        useWireEDM, isDia10OrLess, hasShapeProcessing, useSmallStartHole)
    ElseIf isGeibiOutsource Then
        Dim geibiSupplierNamePreview As String
        geibiSupplierNamePreview = GetOutsourcingSupplierName("GEIBI")
        If geibiSupplierNamePreview = "" Then geibiSupplierNamePreview = "ｹﾞｲﾋﾞ鋼業"

        Select Case geibiPattern
            Case "材料～荒"
                Call AddItemToPreviewList("外注", geibiSupplierNamePreview, "", "", "", "", "材料～荒加工")
                Call PreviewAddTapHole(hasSubZero)
                Dim requiresHeatTreatmentPreview As Boolean
                requiresHeatTreatmentPreview = True
                If materialInfoDict.Exists(materialCode) Then
                    Dim matData As Variant: matData = materialInfoDict(materialCode)
                    If UBound(matData) >= 3 Then
                        If CStr(matData(3)) = "SKIP_HEAT" Then requiresHeatTreatmentPreview = False
                    End If
                End If
                If requiresHeatTreatmentPreview Then Call PreviewAddHeatTreatment(materialCode, hasSubZero)
                Call PreviewAddPostHeatTreatmentProcesses(materialCode, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingTypeKey, needsAdjustP, kataboriChoosenByUser, naraiKensakuChoosenByUser, autoSgCountValue, userSgCountValue)
            Case "材料～焼きまで"
                Call AddItemToPreviewList("外注", geibiSupplierNamePreview, "", "", "", "", geibiPattern)
                Call PreviewAddPostHeatTreatmentProcesses(materialCode, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingTypeKey, needsAdjustP, kataboriChoosenByUser, naraiKensakuChoosenByUser, autoSgCountValue, userSgCountValue)
            Case "荒加工のみ"
                Call PreviewAddMaterialPurchase(materialCode, noChamfer, hasLiftingScrew)
                Call AddItemToPreviewList("外注", geibiSupplierNamePreview, "", "", "", "", geibiPattern)
                Call PreviewAddTapHole(hasSubZero)
                requiresHeatTreatmentPreview = True
                If materialInfoDict.Exists(materialCode) Then
                     matData = materialInfoDict(materialCode)
                    If UBound(matData) >= 3 Then
                        If CStr(matData(3)) = "SKIP_HEAT" Then requiresHeatTreatmentPreview = False
                    End If
                End If
                If requiresHeatTreatmentPreview Then Call PreviewAddHeatTreatment(materialCode, hasSubZero)
                Call PreviewAddPostHeatTreatmentProcesses(materialCode, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingTypeKey, needsAdjustP, kataboriChoosenByUser, naraiKensakuChoosenByUser, autoSgCountValue, userSgCountValue)
            Case "荒～焼きまで"
                Call PreviewAddMaterialPurchase(materialCode, noChamfer, hasLiftingScrew)
                Call AddItemToPreviewList("外注", geibiSupplierNamePreview, "", "", "", "", geibiPattern)
                Call PreviewAddPostHeatTreatmentProcesses(materialCode, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingTypeKey, needsAdjustP, kataboriChoosenByUser, naraiKensakuChoosenByUser, autoSgCountValue, userSgCountValue)
        End Select
    Else
        Call PreviewAddMaterialPurchase(materialCode, noChamfer, hasLiftingScrew)
        Call PreviewAddMCBeforeHeatTreatment(shape)
        Call PreviewAddTapHole(hasSubZero)
        requiresHeatTreatmentPreview = True
        If materialInfoDict.Exists(materialCode) Then
            matData = materialInfoDict(materialCode)
            If IsArray(matData) And UBound(matData) >= 3 Then
                If CStr(matData(3)) = "SKIP_HEAT" Then requiresHeatTreatmentPreview = False
            End If
        End If
        If requiresHeatTreatmentPreview Then Call PreviewAddHeatTreatment(materialCode, hasSubZero)
        Call PreviewAddPostHeatTreatmentProcesses(materialCode, shape, useWireEDM, isDia10OrLess, hasShapeProcessing, hasCuttingEdge, useAfterMC, useSmallStartHole, hasTsubaProcessing, tsubaCount, tsubaRoughMethod, needsPolishing, needsOutsourcingForCoating, coatingTypeKey, needsAdjustP, kataboriChoosenByUser, naraiKensakuChoosenByUser, autoSgCountValue, userSgCountValue)
    End If

    Call RefreshListBoxFromInternalArray
End Sub

Private Function IsAnyPreviewItemEdited() As Boolean
    Dim i As Long
    IsAnyPreviewItemEdited = False

    If m_lPreviewProcessCount > 0 Then
        For i = 0 To m_lPreviewProcessCount - 1
            If m_arrPreviewProcesses(i).IsEdited Then
                IsAnyPreviewItemEdited = True
                Exit Function
            End If
        Next i
    End If
End Function

Private Function ConfirmAndUpdatePreviewIfEdited() As Boolean
    ConfirmAndUpdatePreviewIfEdited = True

    If IsAnyPreviewItemEdited() Then
        If MsgBox("プレビューに編集された項目があります。" & vbCrLf & _
                   "この操作を行うと、それらの編集内容はリセットされます。" & vbCrLf & vbCrLf & _
                   "続行しますか？", _
                   vbYesNo + vbQuestion + vbDefaultButton2, "編集内容の破棄確認") = vbNo Then
            
            ConfirmAndUpdatePreviewIfEdited = False
        End If
    End If
End Function

Private Sub RefreshListBoxFromInternalArray()
    Dim i As Long
    Dim ListItem As MSComctlLib.ListItem
    Dim displayProcessName As String

    Call AutoRenumberProcessRemarks
    Call UpdateGoDandoriTimes

    Me.ListViewPreview.ListItems.Clear

    If m_lPreviewProcessCount > 0 Then
        For i = 0 To m_lPreviewProcessCount - 1
            If m_arrPreviewProcesses(i).IsEdited Then
                displayProcessName = m_arrPreviewProcesses(i).ProcessName
            Else
                displayProcessName = m_arrPreviewProcesses(i).ProcessName
            End If

            Set ListItem = Me.ListViewPreview.ListItems.Add(, , displayProcessName)

            ListItem.SubItems(1) = IIf(m_arrPreviewProcesses(i).supplier = "", "-", m_arrPreviewProcesses(i).supplier)
            ListItem.SubItems(2) = IIf(m_arrPreviewProcesses(i).MaeDandoriTime = "", "-", m_arrPreviewProcesses(i).MaeDandoriTime)
            ListItem.SubItems(3) = IIf(m_arrPreviewProcesses(i).YujinTime = "", "-", m_arrPreviewProcesses(i).YujinTime)
            ListItem.SubItems(4) = IIf(m_arrPreviewProcesses(i).MachineTime = "", "-", m_arrPreviewProcesses(i).MachineTime)
            ListItem.SubItems(5) = IIf(m_arrPreviewProcesses(i).GoDandoriTime = "", "-", m_arrPreviewProcesses(i).GoDandoriTime)
            ListItem.SubItems(6) = m_arrPreviewProcesses(i).bikou

            If m_arrPreviewProcesses(i).IsEdited Then
                ListItem.Bold = True
            Else
                ListItem.Bold = False
            End If
        Next i
    End If
    Set ListItem = Nothing
End Sub

Private Sub AddItemToPreviewList(procName As String, Optional supplier As String = "", _
                                Optional maeD As Variant = "", Optional yujin As Variant = "", Optional machine As Variant = "", Optional goD As Variant = "", _
                                Optional remark As String = "")
                               
    If m_lPreviewProcessCount > UBound(m_arrPreviewProcesses) Then
        ReDim Preserve m_arrPreviewProcesses(0 To m_lPreviewProcessCount + 9)
    End If

    With m_arrPreviewProcesses(m_lPreviewProcessCount)
        .ProcessName = procName
        .supplier = supplier
        .MaeDandoriTime = CStr(maeD)
        .YujinTime = CStr(yujin)
        .MachineTime = CStr(machine)
        .GoDandoriTime = CStr(goD)
        .bikou = remark
        .IsEdited = False
        .UserEditedGoDandori = ""
        .IsGoDandoriUserEdited = False
    End With

    m_lPreviewProcessCount = m_lPreviewProcessCount + 1
End Sub

Private Sub PreviewAddMaterialPurchase(materialCodePreview As String, noChamferPreview As Boolean, hasLiftingScrewPreview As Boolean)
    Dim supplier As String, materialData As Variant, normalizedMaterialCode As String
    normalizedMaterialCode = UCase(Trim(materialCodePreview))
    If materialInfoDict Is Nothing Or Not materialInfoDict.Exists(normalizedMaterialCode) Then
        supplier = "(仕入先不明)"
    Else
        materialData = materialInfoDict(normalizedMaterialCode)
        supplier = CStr(materialData(0))
    End If
    Dim specificMemo As String: specificMemo = IIf(noChamferPreview, "Cなし", "Cあり")
    If hasLiftingScrewPreview Then specificMemo = specificMemo & ",吊り"
    Call AddItemToPreviewList("主材購入", supplier, "", "", "", "", specificMemo)
End Sub

Private Sub PreviewAddMCBeforeHeatTreatment(shapePreview As String)
    Dim mcProcessName As String: mcProcessName = IIf(shapePreview = "プレート", "M/C（大）", "M/C（小）")
    Dim i As Integer, times As Variant, maeDandori As String, yTime As String, mTime As String, sTimeBase As String, sTimeFinal As String
    Dim loopCount As Integer
    Dim remarksFromSheetF As String

    times = GetProcessTimes(mcProcessName, "熱処理前")

    If IsArray(times) Then
        maeDandori = CStr(times(0))
        yTime = CStr(times(1))
        mTime = CStr(times(2))
        sTimeBase = CStr(times(3))
        remarksFromSheetF = CStr(times(4))
    Else
        maeDandori = ""
        yTime = "0.25"
        mTime = "0.1"
        sTimeBase = "0.1"
        remarksFromSheetF = "(※工数/備考未設定)"
    End If
    
    loopCount = 2
    For i = 1 To loopCount
        sTimeFinal = IIf(i = loopCount, sTimeBase, "")
        Call AddItemToPreviewList(mcProcessName, "", maeDandori, yTime, mTime, sTimeFinal, remarksFromSheetF)
    Next i
End Sub

Private Sub PreviewAddTapHole(hasSubZeroPreview As Boolean)
    Dim specificMemo As String, remarksFromSheetF As String, finalMemo As String, times As Variant, MaeDandoriTime As String
    If hasSubZeroPreview Then specificMemo = "ｻﾌﾞｾﾞﾛ注意" Else specificMemo = ""
    times = GetProcessTimes("穴あけﾀｯﾌﾟ")
    If IsArray(times) Then
        MaeDandoriTime = CStr(times(0)): remarksFromSheetF = CStr(times(4))
        If specificMemo <> "" Then finalMemo = specificMemo Else finalMemo = remarksFromSheetF
        Call AddItemToPreviewList("穴あけﾀｯﾌﾟ", "", MaeDandoriTime, CStr(times(1)), CStr(times(2)), CStr(times(3)), finalMemo)
    Else
        finalMemo = specificMemo & IIf(specificMemo <> "", " ", "") & "(※工数/備考未設定)"
        Call AddItemToPreviewList("穴あけﾀｯﾌﾟ", "", "", "0.3", "", "", finalMemo)
    End If
End Sub

Private Sub PreviewAddHeatTreatment(materialCodePreview As String, hasSubZeroPreview As Boolean)
    Dim supplier As String, materialData As Variant, normalizedMaterialCode As String
    normalizedMaterialCode = UCase(Trim(materialCodePreview))
    
    If materialInfoDict Is Nothing Or Not materialInfoDict.Exists(normalizedMaterialCode) Then
        supplier = ""
        If hasSubZeroPreview Then
            supplier = GetOutsourcingSupplierName("HEAT_SUBZERO_DEFAULT")
            If supplier = "" Then
                supplier = "ｴｼﾞｿﾝ熱処理(仮)"
            End If
        End If
        
    Else
        materialData = materialInfoDict(normalizedMaterialCode)
        
        If hasSubZeroPreview Then
            supplier = CStr(materialData(2))
            If supplier = "" Then
                supplier = GetOutsourcingSupplierName("HEAT_SUBZERO_DEFAULT")
                If supplier = "" Then
                    supplier = "ｴｼﾞｿﾝ熱処理(仮)"
                End If
            End If
        Else
            supplier = CStr(materialData(1))
        End If
        
    End If
    
    If supplier = "" Then supplier = "(熱処理業者未設定)"
    
    Call AddItemToPreviewList("熱処理", supplier, "", "", "", "", IIf(hasSubZeroPreview, "", ""))
End Sub

Private Sub PreviewAddPostHeatTreatmentSG(shapePreview As String, useWireEDMPreview As Boolean, useAfterMCPreview As Boolean, autoSg As Boolean, userSgNum As Integer)
    Dim sgCount As Integer, i As Integer, times As Variant, maeDandori As String, yTime As String, mTime As String, sTimeBase As String, sTimeFinal As String
    Dim remarksFromSheetF As String

    If autoSg Then
        Select Case shapePreview
            Case "ブロック": sgCount = 6
            Case "プレート"
                If Not useWireEDMPreview And useAfterMCPreview Then
                    sgCount = 4
                ElseIf Not useWireEDMPreview Then
                    sgCount = 2
                ElseIf useAfterMCPreview Then
                    sgCount = 4
                Else
                    sgCount = 3
                End If
            Case "ファミリー加工": sgCount = 2
            Case Else: sgCount = 3
        End Select
    Else
        sgCount = userSgNum: If sgCount < 1 Or sgCount > 6 Then sgCount = 3
    End If

    times = GetProcessTimes("平面研削 NC", "SG")

    If IsArray(times) Then
        maeDandori = CStr(times(0))
        yTime = CStr(times(1))
        mTime = CStr(times(2))
        sTimeBase = CStr(times(3))
        remarksFromSheetF = CStr(times(4))
    Else
        maeDandori = ""
        yTime = "0.3"
        mTime = "0.3"
        sTimeBase = "0.1"
        remarksFromSheetF = "(※工数/備考未設定)"
    End If

    For i = 1 To sgCount
        sTimeFinal = IIf(i = sgCount, sTimeBase, "")
        Call AddItemToPreviewList("平面研削 NC", "", maeDandori, yTime, mTime, sTimeFinal, remarksFromSheetF)
    Next i
End Sub

Private Sub PreviewAddAfterMCFinish(shapePreview As String)
    Dim mcFinishName As String
    Dim maeDandori As String, yujin As String, machine As String, setup As String
    Dim times As Variant
    Dim finalMemo As String
    
    mcFinishName = IIf(shapePreview = "プレート", "M/C（大）", "M/C（小）")
    times = GetProcessTimes(mcFinishName, "MC仕上げ")
    
    If IsArray(times) Then
        maeDandori = CStr(times(0))
        yujin = CStr(times(1))
        machine = CStr(times(2))
        setup = CStr(times(3))
        finalMemo = CStr(times(4))
        
        If finalMemo = "" Then
            finalMemo = "MC仕上げ"
        End If
    Else
        maeDandori = ""
        If shapePreview = "プレート" Then
            yujin = "0.4"
            machine = "0.2"
            setup = "0.2"
        Else
            yujin = "0.25"
            machine = "0.1"
            setup = "0.1"
        End If
        finalMemo = "MC仕上げ (※工数/備考未設定)"
    End If
    
    Call AddItemToPreviewList(mcFinishName, "", maeDandori, yujin, machine, setup, finalMemo)
End Sub

Private Sub PreviewAddSmallStartHole()
    Dim times As Variant
    Dim remarksFromSheetF As String
    Dim MaeDandoriTime As String
    
    times = GetProcessTimes("細穴放電加工")
    
    If IsArray(times) Then
        MaeDandoriTime = CStr(times(0))
        remarksFromSheetF = CStr(times(4))
        Call AddItemToPreviewList("細穴放電加工", "", MaeDandoriTime, CStr(times(1)), CStr(times(2)), CStr(times(3)), remarksFromSheetF)
    Else
        Call AddItemToPreviewList("細穴放電加工", "", "", "0.8", "", "0.1", "※工数/備考未設定")
    End If
End Sub

Private Sub PreviewAddWireEDMProcessing(isDia10OrLessPreview As Boolean, hasShapeProcessingPreview As Boolean, isFamilyProcessingPreview As Boolean)
    Dim times As Variant, remarksFromSheetF As String, maeDandori As String, yTime As String, mTime As String, sTime As String, specificMemo As String

    If isFamilyProcessingPreview Then
        If hasShapeProcessingPreview Then
            specificMemo = "荒加工"
            times = GetProcessTimes("ﾜｲﾔ放電加工", "荒加工")
            If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "3": sTime = ""
            Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
            
            specificMemo = "ｶｽ取り・仕上げ"
            times = GetProcessTimes("ﾜｲﾔ放電加工", "ｶｽ取り・仕上げ")
            If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "6": sTime = "0.5"
            Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        Else
            times = GetProcessTimes("ﾜｲﾔ放電加工")
            If IsArray(times) Then
                maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4))
            Else
                maeDandori = "": yTime = "0.75": mTime = "2": sTime = "0.5": remarksFromSheetF = "※工数/備考未設定"
            End If
            Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, remarksFromSheetF)
        End If
    ElseIf isDia10OrLessPreview And hasShapeProcessingPreview Then
        specificMemo = "荒加工"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "荒加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "3": sTime = ""
        Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        
        specificMemo = "ｶｽ取り・仕上げ"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "ｶｽ取り・仕上げ")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "6": sTime = "0.5"
        Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
    ElseIf isDia10OrLessPreview Or Not hasShapeProcessingPreview Then
        times = GetProcessTimes("ﾜｲﾔ放電加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4)) Else maeDandori = "": yTime = "0.75": mTime = "2": sTime = "0.5": remarksFromSheetF = "※工数/備考未設定"
        Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, remarksFromSheetF)
        
    Else
        specificMemo = "荒加工"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "荒加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "3": sTime = ""
        Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        
        specificMemo = "ｶｽ取り・仕上げ"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "ｶｽ取り・仕上げ")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "6": sTime = "0.5"
        Call AddItemToPreviewList("ﾜｲﾔ放電加工", "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
    End If
End Sub

Private Sub PreviewAddPostWireEDMGrinding(shapePreview As String, needsPolishingPreview As Boolean, hasCuttingEdgePreview As Boolean, hasTsubaProcessingPreview As Boolean, kataboriChoosenByUserAsLaterStepPreview As Boolean)
    Dim specificMemo As String, times As Variant, processKey As String, processKeyDetail As String, maeDandori As String, yTime As String, mTime As String, sTime As String
    If shapePreview = "ファミリー加工" Then
        If needsPolishingPreview Then
            processKey = "平面研削 汎用": processKeyDetail = "ファミリー後ヘソ取り": specificMemo = "ﾍｿ取り"
            times = GetProcessTimes(processKey, processKeyDetail): If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "": sTime = "0.1"
            Call AddItemToPreviewList(processKey, "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        Else
            processKey = "平面研削 NC": specificMemo = "ﾍｿ取り"
            If hasCuttingEdgePreview And Not hasTsubaProcessingPreview And Not kataboriChoosenByUserAsLaterStepPreview Then specificMemo = "ﾍｿ・上面"
            processKeyDetail = IIf(specificMemo = "ﾍｿ・上面", "ファミリー後ヘソ上面", "ファミリー後ヘソ取り")
            times = GetProcessTimes(processKey, processKeyDetail): If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "0.3": sTime = "0.1"
            Call AddItemToPreviewList(processKey, "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        End If
    ElseIf shapePreview = "ブロック" Or shapePreview = "プレート" Then
        If hasCuttingEdgePreview And Not needsPolishingPreview Then
            Dim addThisSG As Boolean: addThisSG = True
            If kataboriChoosenByUserAsLaterStepPreview Then addThisSG = False
            If addThisSG And hasTsubaProcessingPreview Then If Not needsPolishingPreview And Not kataboriChoosenByUserAsLaterStepPreview Then addThisSG = False
            If addThisSG Then
                Dim grindingMachine As String: grindingMachine = IIf(shapePreview = "プレート", "平面研削 NC", "平面研削 汎用")
                specificMemo = "上面"
                times = GetProcessTimes(grindingMachine, "上面後"): If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = IIf(grindingMachine = "平面研削 NC", "0.2", ""): sTime = "0.1"
                Call AddItemToPreviewList(grindingMachine, "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
            End If
        End If
    End If
End Sub

Private Sub PreviewAddTsubaProcessing(tsubaCountPreview As Integer, tsubaRoughMethodPreview As String, needsPolishingForTsubaUePreview As Boolean, kataboriChoosenByUserPreview As Boolean, ByVal hasCuttingEdgeAsParam As Boolean)
    Dim n As Integer, isLastTsuba As Boolean, specificMemoRough As String, specificMemoFinish As String
    Dim timesRough As Variant, timesFinish As Variant
    Dim maeDandoriRough As String, yRough As String, mRough As String, sRough As String
    Dim maeDandoriFinish As String, yFinish As String, mFinish As String, sFinish As String

    timesRough = GetProcessTimes(tsubaRoughMethodPreview, "つば荒")
    timesFinish = GetProcessTimes("平面研削 NC", "つば仕上げ")

    If IsArray(timesRough) Then
        maeDandoriRough = CStr(timesRough(0))
        yRough = CStr(timesRough(1))
        mRough = CStr(timesRough(2))
        sRough = CStr(timesRough(3))
    Else
        maeDandoriRough = ""
        yRough = "0.6"
        mRough = "0.1"
        sRough = "0.1"
    End If
    
    For n = 1 To tsubaCountPreview
        specificMemoRough = "つば荒 " & n & "/" & tsubaCountPreview
        
        Dim tempItemForTsubaAra As PreviewProcessItem
        tempItemForTsubaAra.ProcessName = tsubaRoughMethodPreview
        tempItemForTsubaAra.supplier = ""
        tempItemForTsubaAra.MaeDandoriTime = maeDandoriRough
        tempItemForTsubaAra.YujinTime = yRough
        tempItemForTsubaAra.MachineTime = mRough
        tempItemForTsubaAra.GoDandoriTime = sRough
        tempItemForTsubaAra.bikou = specificMemoRough & IIf(IsArray(timesRough), "", " (※工数未設定)")
        tempItemForTsubaAra.IsEdited = False
        tempItemForTsubaAra.UserEditedGoDandori = sRough
        tempItemForTsubaAra.IsGoDandoriUserEdited = True
        
        If m_lPreviewProcessCount > UBound(m_arrPreviewProcesses) Then
            ReDim Preserve m_arrPreviewProcesses(0 To m_lPreviewProcessCount + 9)
        End If
        m_arrPreviewProcesses(m_lPreviewProcessCount) = tempItemForTsubaAra
        m_lPreviewProcessCount = m_lPreviewProcessCount + 1

        isLastTsuba = (n = tsubaCountPreview)
        specificMemoFinish = "つば仕上げ " & n & "/" & tsubaCountPreview
        
        If IsArray(timesFinish) Then
            maeDandoriFinish = CStr(timesFinish(0))
            yFinish = CStr(timesFinish(1))
            mFinish = CStr(timesFinish(2))
            sFinish = CStr(timesFinish(3))
        Else
            maeDandoriFinish = ""
            yFinish = "0.3"
            mFinish = "0.1"
            sFinish = "0.1"
        End If

        If isLastTsuba And hasCuttingEdgeAsParam And Not needsPolishingForTsubaUePreview And Not kataboriChoosenByUserPreview Then
            specificMemoFinish = specificMemoFinish & "・上面"
        End If
        Call AddItemToPreviewList("平面研削 NC", "", maeDandoriFinish, yFinish, mFinish, sFinish, specificMemoFinish & IIf(IsArray(timesFinish), "", " (※工数未設定)"))
    Next n
End Sub

Private Sub PreviewAddPolishingAndCoating(needsPolishingPreview As Boolean, hasCuttingEdgePreview As Boolean, needsOutsourcingForCoatingPreview As Boolean, coatingTypeKeyPreview As String)
    Dim times As Variant, remarksFromSheetF As String, specificMemo As String, maeDandori As String, yTime As String, mTime As String, sTime As String
    If needsPolishingPreview Then
        times = GetProcessTimes("磨き"): If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4)) Else maeDandori = "": yTime = "0.5": mTime = "": sTime = "": remarksFromSheetF = "※工数/備考未設定"
        Call AddItemToPreviewList("磨き", "", maeDandori, yTime, mTime, sTime, remarksFromSheetF)
        If hasCuttingEdgePreview Then
            specificMemo = "上面": times = GetProcessTimes("平面研削 NC", "上面後"): If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "0.2": sTime = "0.1"
            Call AddItemToPreviewList("平面研削 NC", "", maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        End If
    End If
    If needsOutsourcingForCoatingPreview And coatingTypeKeyPreview <> "" Then
        Dim coatingSupplierNamePreview As String: coatingSupplierNamePreview = GetOutsourcingSupplierName(coatingTypeKeyPreview)
        If coatingSupplierNamePreview = "" Then coatingSupplierNamePreview = coatingTypeKeyPreview & " (業者未設定)"
        Call AddItemToPreviewList("外注", coatingSupplierNamePreview, "", "", "", "", "")
    End If
End Sub

Private Sub PreviewAddAdjustPProcess(needsAdjustPPreview As Boolean)
    If needsAdjustPPreview Then
        Dim times As Variant
        Dim remarksFromSheetF As String
        
        times = GetProcessTimes("調整（P）")
        
        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4))
            Call AddItemToPreviewList("調整（P）", "", CStr(times(0)), CStr(times(1)), CStr(times(2)), CStr(times(3)), remarksFromSheetF)
        Else
            Call AddItemToPreviewList("調整（P）", "", "", "", "", "", "※工数/備考未設定")
        End If
        
    End If
End Sub

Private Sub PreviewAddPostHeatTreatmentProcesses(materialCodeP As String, shapeP As String, useWireEDMP As Boolean, isDia10OrLessP As Boolean, hasShapeProcessingP As Boolean, hasCuttingEdgeP As Boolean, _
                                             useAfterMCP As Boolean, useSmallStartHoleP As Boolean, hasTsubaProcessingP As Boolean, tsubaCountP As Integer, tsubaRoughMethodP As String, _
                                             needsPolishingP As Boolean, needsOutsourcingForCoatingP As Boolean, coatingTypeKeyP As String, needsAdjustPP As Boolean, _
                                             kataboriChoosenByUserP As Boolean, naraiKensakuChoosenByUserP As Boolean, autoSgP As Boolean, userSgNumP As Integer)
    
    Call PreviewAddPostHeatTreatmentSG(shapeP, useWireEDMP, useAfterMCP, autoSgP, userSgNumP)
    If useAfterMCP Then Call PreviewAddAfterMCFinish(shapeP)
    If useWireEDMP And useSmallStartHoleP Then Call PreviewAddSmallStartHole
    If useWireEDMP Then
        Call PreviewAddWireEDMProcessing(isDia10OrLessP, hasShapeProcessingP, (shapeP = "ファミリー加工"))
        Call PreviewAddPostWireEDMGrinding(shapeP, needsPolishingP, hasCuttingEdgeP, hasTsubaProcessingP, kataboriChoosenByUserP)
    End If
    If hasTsubaProcessingP Then Call PreviewAddTsubaProcessing(tsubaCountP, tsubaRoughMethodP, needsPolishingP, kataboriChoosenByUserP, hasCuttingEdgeP)
    If naraiKensakuChoosenByUserP Then
        Dim timesNarai As Variant, remarksNarai As String, maeDandoriNarai As String, yTimeNarai As String, mTimeNarai As String, sTimeNarai As String
        timesNarai = GetProcessTimes("倣い研削")
        If IsArray(timesNarai) Then maeDandoriNarai = timesNarai(0): yTimeNarai = timesNarai(1): mTimeNarai = timesNarai(2): sTimeNarai = timesNarai(3): remarksNarai = CStr(timesNarai(4)) Else maeDandoriNarai = "": yTimeNarai = "1.0": mTimeNarai = "": sTimeNarai = "0.2": remarksNarai = "※工数/備考未設定"
        Call AddItemToPreviewList("倣い研削", "", maeDandoriNarai, yTimeNarai, mTimeNarai, sTimeNarai, remarksNarai)
    End If
    If kataboriChoosenByUserP Then
        Dim timesKatabori As Variant, remarksKatabori As String, specificMemoKatabori As String, maeDandoriKatabori As String, yTimeKatabori As String, mTimeKatabori As String, sTimeKatabori As String
        timesKatabori = GetProcessTimes("型彫放電加工")
        If IsArray(timesKatabori) Then maeDandoriKatabori = timesKatabori(0): yTimeKatabori = timesKatabori(1): mTimeKatabori = timesKatabori(2): sTimeKatabori = timesKatabori(3): remarksKatabori = CStr(timesKatabori(4)) Else maeDandoriKatabori = "": yTimeKatabori = "0.5": mTimeKatabori = "1.5": sTimeKatabori = "0.2": remarksKatabori = "※工数/備考未設定"
        Call AddItemToPreviewList("型彫放電加工", "", maeDandoriKatabori, yTimeKatabori, mTimeKatabori, sTimeKatabori, remarksKatabori)
        If hasCuttingEdgeP And Not needsPolishingP Then
            specificMemoKatabori = "上面"
            Dim timesKataboriSg As Variant, maeDandoriKataboriSg As String, yTimeKataboriSg As String, mTimeKataboriSg As String, sTimeKataboriSg As String
            timesKataboriSg = GetProcessTimes("平面研削 NC", "上面後")
            If IsArray(timesKataboriSg) Then maeDandoriKataboriSg = timesKataboriSg(0): yTimeKataboriSg = timesKataboriSg(1): mTimeKataboriSg = timesKataboriSg(2): sTimeKataboriSg = timesKataboriSg(3) Else maeDandoriKataboriSg = "": yTimeKataboriSg = "0.2": mTimeKataboriSg = "0.2": sTimeKataboriSg = "0.1"
            Call AddItemToPreviewList("平面研削 NC", "", maeDandoriKataboriSg, yTimeKataboriSg, mTimeKataboriSg, sTimeKataboriSg, specificMemoKatabori & IIf(IsArray(timesKataboriSg), "", " (※工数未設定)"))
        End If
    End If
    Call PreviewAddPolishingAndCoating(needsPolishingP, hasCuttingEdgeP, needsOutsourcingForCoatingP, coatingTypeKeyP)
    
    Call PreviewAddAdjustPProcess(needsAdjustPP)
End Sub

Private Sub PreviewProcessLayoutAfterCut(needsPolishingP As Boolean, hasCuttingEdgeP As Boolean, _
                                         needsOutsourcingForCoatingP As Boolean, coatingTypeKeyP As String, needsAdjustPP As Boolean, _
                                         hasTsubaProcessingP As Boolean, tsubaCountP As Integer, tsubaRoughMethodP As String, _
                                         kataboriChoosenByUserAsLayoutP As Boolean, naraiKensakuChoosenByUserAsLayoutP As Boolean, _
                                         useAfterMCAsLayoutP As Boolean, shapeForMCP As String, _
                                         useWireEDMLayoutP As Boolean, isDia10OrLessLayoutP As Boolean, hasShapeProcessingLayoutP As Boolean, useSmallStartHoleLayoutP As Boolean)

    Dim specificMemo As String, times As Variant, processKeyDetail As String, remarksFromSheetF As String

    If hasCuttingEdgeP Then
        If hasTsubaProcessingP Or kataboriChoosenByUserAsLayoutP Or needsPolishingP Then specificMemo = "ﾍｿ取り" Else specificMemo = "ﾍｿ取り・上面"
    Else
        specificMemo = "ﾍｿ取り"
    End If
    processKeyDetail = IIf(specificMemo = "ﾍｿ取り・上面", "レイアウト後ヘソ上面", "レイアウト後ヘソ取り")
    times = GetProcessTimes("平面研削 汎用", processKeyDetail)
    If IsArray(times) Then
        Call AddItemToPreviewList("平面研削 汎用", "", CStr(times(0)), CStr(times(1)), CStr(times(2)), CStr(times(3)), specificMemo)
    Else
        Call AddItemToPreviewList("平面研削 汎用", "", "", "0.1", "", "0.2", specificMemo & " (※工数未設定)")
    End If
    
    If useWireEDMLayoutP Then
        If useSmallStartHoleLayoutP Then
            Call PreviewAddSmallStartHole
        End If

        Call PreviewAddWireEDMProcessing(isDia10OrLessLayoutP, hasShapeProcessingLayoutP, False)
        Call PreviewAddPostWireEDMGrinding(shapeForMCP, needsPolishingP, hasCuttingEdgeP, hasTsubaProcessingP, kataboriChoosenByUserAsLayoutP)
    End If

    If hasTsubaProcessingP Then
        Call PreviewAddTsubaProcessing(tsubaCountP, tsubaRoughMethodP, needsPolishingP, kataboriChoosenByUserAsLayoutP, hasCuttingEdgeP)
    End If

    If useAfterMCAsLayoutP Then
        Dim mcProcessNameLayout As String
        mcProcessNameLayout = IIf(shapeForMCP = "プレート", "M/C（大）", "M/C（小）")
        times = GetProcessTimes(mcProcessNameLayout, "レイアウト後MC")
        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4))
            Call AddItemToPreviewList(mcProcessNameLayout, "", CStr(times(0)), CStr(times(1)), CStr(times(2)), CStr(times(3)), remarksFromSheetF)
        Else
            Call AddItemToPreviewList(mcProcessNameLayout, "", "", "", "", "", "※工数/備考未設定:" & mcProcessNameLayout & "-レイアウト後MC")
        End If
    End If

    If naraiKensakuChoosenByUserAsLayoutP Then
        times = GetProcessTimes("倣い研削", "レイアウト後")
        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4))
            Call AddItemToPreviewList("倣い研削", "", CStr(times(0)), CStr(times(1)), CStr(times(2)), CStr(times(3)), remarksFromSheetF)
        Else
            Call AddItemToPreviewList("倣い研削", "", "", "1.0", "", "0.2", "※工数/備考未設定")
        End If
    End If

    If kataboriChoosenByUserAsLayoutP Then
        times = GetProcessTimes("型彫放電加工", "レイアウト後")
        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4))
            Call AddItemToPreviewList("型彫放電加工", "", CStr(times(0)), CStr(times(1)), CStr(times(2)), CStr(times(3)), remarksFromSheetF)
        Else
            Call AddItemToPreviewList("型彫放電加工", "", "", "0.5", "1.5", "0.2", "※工数/備考未設定")
        End If
        If hasCuttingEdgeP And Not needsPolishingP Then
            times = GetProcessTimes("平面研削 NC", "レイアウト後上面")
            If IsArray(times) Then
                Call AddItemToPreviewList("平面研削 NC", "", CStr(times(0)), CStr(times(1)), CStr(times(2)), CStr(times(3)), "上面")
            Else
                Call AddItemToPreviewList("平面研削 NC", "", "", "0.2", "0.2", "0.1", "上面 (※工数未設定)")
            End If
        End If
    End If

    Call PreviewAddPolishingAndCoating(needsPolishingP, hasCuttingEdgeP, needsOutsourcingForCoatingP, coatingTypeKeyP)
    Call PreviewAddAdjustPProcess(needsAdjustPP)
End Sub

Private Sub HandleShapeOptionChange(ByVal newlyClickedOptionButtonName As String)
    If m_bIsProgrammaticChange Then Exit Sub

    If Not Me.Controls(newlyClickedOptionButtonName).Value Then
        Exit Sub
    End If

    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        If m_sPreviouslySelectedShapeOption <> "" And m_sPreviouslySelectedShapeOption <> newlyClickedOptionButtonName Then
            On Error Resume Next
            Me.Controls(m_sPreviouslySelectedShapeOption).Value = True
            On Error GoTo 0
        End If
        m_bIsProgrammaticChange = False
        Exit Sub
    End If

    m_sPreviouslySelectedShapeOption = newlyClickedOptionButtonName
    Call UpdatePreview
End Sub

' === イベントハンドラ：変更前の値を保存 ===
Private Sub ComboBoxGeibiType_Enter()
    m_sOldComboBoxGeibiType = Me.ComboBoxGeibiType.Value
End Sub

Private Sub ComboBoxTsubaCount_Enter()
    m_sOldComboBoxTsubaCount = Me.ComboBoxTsubaCount.Value
End Sub

Private Sub ComboBoxTsubaRough_Enter()
    m_sOldComboBoxTsubaRough = Me.ComboBoxTsubaRough.Value
End Sub

Private Sub ComboBoxSgCount_Enter()
    m_sOldComboBoxSgCount = Me.ComboBoxSgCount.Value
End Sub

Private Sub ComboBox2_Enter()
    m_sOldComboBox2Value = Me.ComboBox2.Value
End Sub

Private Sub ComboBox3_Enter()
    m_sOldComboBox3Value = Me.ComboBox3.Value
End Sub

Private Sub txtMaterialCodePreview_Enter()
    m_sOldTxtMaterialCodePreview = Me.txtMaterialCodePreview.Text
End Sub

Private Sub txtZValuePreview_Enter()
    m_sOldTxtZValuePreview = Me.txtZValuePreview.Text
End Sub

Private Sub txtSizePreview_Enter()
    m_sOldTxtSizePreview = Me.txtSizePreview.Text
End Sub

Private Sub OptionButton4_Enter()
    If Me.OptionButton4.Value Then m_sPreviouslySelectedShapeOption = Me.OptionButton4.name
End Sub

Private Sub OptionButton5_Enter()
    If Me.OptionButton5.Value Then m_sPreviouslySelectedShapeOption = Me.OptionButton5.name
End Sub

Private Sub OptionButton6_Enter()
    If Me.OptionButton6.Value Then m_sPreviouslySelectedShapeOption = Me.OptionButton6.name
End Sub

Private Sub CheckBoxGeibi_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBoxGeibi.Value
    Dim originalGeibiTypeEnabled As Boolean: originalGeibiTypeEnabled = Me.ComboBoxGeibiType.Enabled
    Dim originalGeibiTypeVisible As Boolean: originalGeibiTypeVisible = Me.ComboBoxGeibiType.Visible

    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBoxGeibi.Value = originalValue
        Me.ComboBoxGeibiType.Enabled = originalGeibiTypeEnabled
        Me.ComboBoxGeibiType.Visible = originalGeibiTypeVisible
        m_bIsProgrammaticChange = False
        Exit Sub
    End If

    Me.ComboBoxGeibiType.Visible = Me.CheckBoxGeibi.Value
    Me.ComboBoxGeibiType.Enabled = Me.CheckBoxGeibi.Value

    Call UpdatePreview
End Sub

Private Sub ComboBoxGeibiType_Change()
    If m_bIsProgrammaticChange Then Exit Sub
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.ComboBoxGeibiType.Value = m_sOldComboBoxGeibiType
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub CheckBox1_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBox1.Value
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBox1.Value = originalValue
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub CheckBox4_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBox4.Value
    Dim originalCb1Value As Boolean: originalCb1Value = Me.CheckBox1.Value

    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBox4.Value = originalValue
        Me.CheckBox1.Value = originalCb1Value
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    
    m_bIsProgrammaticChange = True
    Me.CheckBox1.Value = (Me.CheckBox4.Value Or Me.CheckBox5.Value)
    m_bIsProgrammaticChange = False
    Call UpdatePreview
End Sub

Private Sub CheckBox5_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBox5.Value
    Dim originalCb1Value As Boolean: originalCb1Value = Me.CheckBox1.Value
    
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBox5.Value = originalValue
        Me.CheckBox1.Value = originalCb1Value
        m_bIsProgrammaticChange = False
        Exit Sub
    End If

    m_bIsProgrammaticChange = True
    Me.CheckBox1.Value = (Me.CheckBox4.Value Or Me.CheckBox5.Value)
    m_bIsProgrammaticChange = False
    Call UpdatePreview
End Sub

Private Sub CheckBox6_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBox6.Value
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBox6.Value = originalValue
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub CheckBox7_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBox7.Value
    Dim originalCb3Enabled As Boolean: originalCb3Enabled = Me.ComboBox3.Enabled
    Dim originalCb8Value As Boolean: originalCb8Value = Me.CheckBox8.Value
    Dim originalCb8Enabled As Boolean: originalCb8Enabled = Me.CheckBox8.Enabled
    Dim previousAutoCheckState As Boolean: previousAutoCheckState = m_bCheckBox7_IsAutoChecked
    Dim originalCb8Visible As Boolean: originalCb8Visible = Me.CheckBox8.Visible
    Dim originalCb3Visible As Boolean: originalCb3Visible = Me.ComboBox3.Visible

    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBox7.Value = originalValue
        Me.ComboBox3.Enabled = originalCb3Enabled
        Me.CheckBox8.Value = originalCb8Value
        Me.CheckBox8.Enabled = originalCb8Enabled
        m_bCheckBox7_IsAutoChecked = previousAutoCheckState
        Me.CheckBox8.Visible = originalCb8Visible
        Me.ComboBox3.Visible = originalCb3Visible
        m_bIsProgrammaticChange = False
        Exit Sub
    End If

    If Me.CheckBox7.Value Then
        m_bCheckBox7_IsAutoChecked = False
        Me.CheckBox8.Visible = True
        Me.ComboBox3.Visible = True
    Else
        m_bCheckBox7_IsAutoChecked = False
        Me.CheckBox8.Visible = False
        Me.ComboBox3.Visible = False
    End If

    Me.CheckBox8.Enabled = Me.CheckBox7.Value
    If Not Me.CheckBox7.Value Then
        Me.CheckBox8.Value = False
    End If
    Me.ComboBox3.Enabled = (Me.CheckBox7.Value And Me.CheckBox8.Value)

    Call UpdatePreview
End Sub

Private Sub CheckBox8_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBox8.Value
    Dim originalCb3Enabled As Boolean: originalCb3Enabled = Me.ComboBox3.Enabled
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBox8.Value = originalValue
        Me.ComboBox3.Enabled = originalCb3Enabled
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Me.ComboBox3.Enabled = Me.CheckBox8.Value
    Call UpdatePreview
End Sub

Private Sub CheckBox9_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBox9.Value
    Dim originalCb2Enabled As Boolean: originalCb2Enabled = Me.ComboBox2.Enabled
    Dim originalCb2Visible As Boolean: originalCb2Visible = Me.ComboBox2.Visible

    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBox9.Value = originalValue
        Me.ComboBox2.Enabled = originalCb2Enabled
        Me.ComboBox2.Visible = originalCb2Visible
        m_bIsProgrammaticChange = False
        Exit Sub
    End If

    Me.ComboBox2.Visible = Me.CheckBox9.Value
    Me.ComboBox2.Enabled = Me.CheckBox9.Value

    Call UpdatePreview
End Sub

Private Sub CheckBoxLayout_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBoxLayout.Value
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBoxLayout.Value = originalValue
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub CheckBoxAfterMC_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBoxAfterMC.Value
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBoxAfterMC.Value = originalValue
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub CheckBoxAdjustP_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBoxAdjustP.Value
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBoxAdjustP.Value = originalValue
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub CheckBoxTsuba_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBoxTsuba.Value
    Dim originalTsubaCountEnabled As Boolean: originalTsubaCountEnabled = Me.ComboBoxTsubaCount.Enabled
    Dim originalTsubaRoughEnabled As Boolean: originalTsubaRoughEnabled = Me.ComboBoxTsubaRough.Enabled
    Dim originalTsubaCountVisible As Boolean: originalTsubaCountVisible = Me.ComboBoxTsubaCount.Visible
    Dim originalTsubaRoughVisible As Boolean: originalTsubaRoughVisible = Me.ComboBoxTsubaRough.Visible

    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBoxTsuba.Value = originalValue
        Me.ComboBoxTsubaCount.Enabled = originalTsubaCountEnabled
        Me.ComboBoxTsubaRough.Enabled = originalTsubaRoughEnabled
        Me.ComboBoxTsubaCount.Visible = originalTsubaCountVisible
        Me.ComboBoxTsubaRough.Visible = originalTsubaRoughVisible
        m_bIsProgrammaticChange = False
        Exit Sub
    End If

    Dim isTsubaChecked As Boolean
    isTsubaChecked = Me.CheckBoxTsuba.Value

    Me.ComboBoxTsubaCount.Visible = isTsubaChecked
    Me.ComboBoxTsubaRough.Visible = isTsubaChecked
    Me.ComboBoxTsubaCount.Enabled = isTsubaChecked
    Me.ComboBoxTsubaRough.Enabled = isTsubaChecked

    Call UpdatePreview
End Sub

Private Sub ComboBoxTsubaCount_Change()
    If m_bIsProgrammaticChange Then Exit Sub
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.ComboBoxTsubaCount.Value = m_sOldComboBoxTsubaCount
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub ComboBoxTsubaRough_Change()
    If m_bIsProgrammaticChange Then Exit Sub
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.ComboBoxTsubaRough.Value = m_sOldComboBoxTsubaRough
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub CheckBoxChamferなし_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBoxChamferなし.Value
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBoxChamferなし.Value = originalValue
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub CheckBoxTsurinejiあり_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBoxTsurinejiあり.Value
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBoxTsurinejiあり.Value = originalValue
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub CheckBoxStartHoleSmall_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBoxStartHoleSmall.Value
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBoxStartHoleSmall.Value = originalValue
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub CheckBoxKatabori_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBoxKatabori.Value
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBoxKatabori.Value = originalValue
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub CheckBoxNaraiKensaku_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBoxNaraiKensaku.Value
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBoxNaraiKensaku.Value = originalValue
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub CheckBoxAutoSgCount_Click()
    If m_bIsProgrammaticChange Then Exit Sub
    Dim originalValue As Boolean: originalValue = Not Me.CheckBoxAutoSgCount.Value
    Dim originalSgComboEnabled As Boolean: If TypeName(Me.Controls("ComboBoxSgCount")) = "ComboBox" Then originalSgComboEnabled = Me.ComboBoxSgCount.Enabled

    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.CheckBoxAutoSgCount.Value = originalValue
        If TypeName(Me.Controls("ComboBoxSgCount")) = "ComboBox" Then Me.ComboBoxSgCount.Enabled = originalSgComboEnabled
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    If TypeName(Me.Controls("ComboBoxSgCount")) = "ComboBox" Then Me.ComboBoxSgCount.Enabled = Not Me.CheckBoxAutoSgCount.Value
    Call UpdatePreview
End Sub

Private Sub ComboBoxSgCount_Change()
    If m_bIsProgrammaticChange Then Exit Sub
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.ComboBoxSgCount.Value = m_sOldComboBoxSgCount
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub ComboBox2_Change()
    If m_bIsProgrammaticChange Then Exit Sub
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.ComboBox2.Value = m_sOldComboBox2Value
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub ComboBox3_Change()
    If m_bIsProgrammaticChange Then Exit Sub
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.ComboBox3.Value = m_sOldComboBox3Value
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub RevertShapeOptionButton()
    On Error Resume Next
    If m_sPreviouslySelectedShapeOption <> "" Then
        Dim ctrl As MSForms.Control
        Set ctrl = Me.Controls(m_sPreviouslySelectedShapeOption)
        If Not ctrl Is Nothing Then
            If TypeName(ctrl) = "OptionButton" Then
                ctrl.Value = True
            End If
        Else
            If TypeName(Me.Controls("OptionButton4")) = "OptionButton" Then
                 Me.OptionButton4.Value = True
            End If
        End If
    Else
        If TypeName(Me.Controls("OptionButton4")) = "OptionButton" Then
            Me.OptionButton4.Value = True
        End If
    End If
    On Error GoTo 0
End Sub

Private Sub OptionButton4_Click()
    HandleShapeOptionChange Me.OptionButton4.name
End Sub

Private Sub OptionButton5_Click()
    HandleShapeOptionChange Me.OptionButton5.name
End Sub

Private Sub OptionButton6_Click()
    HandleShapeOptionChange Me.OptionButton6.name
End Sub

Private Sub txtMaterialCodePreview_Change()
    If m_bIsProgrammaticChange Then Exit Sub
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.txtMaterialCodePreview.Text = m_sOldTxtMaterialCodePreview
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub txtZValuePreview_Change()
    If m_bIsProgrammaticChange Then Exit Sub
    If Not ConfirmAndUpdatePreviewIfEdited() Then
        m_bIsProgrammaticChange = True
        Me.txtZValuePreview.Text = m_sOldTxtZValuePreview
        m_bIsProgrammaticChange = False
        Exit Sub
    End If
    Call UpdatePreview
End Sub

Private Sub AutoRenumberProcessRemarks()
    Dim i As Long, j As Long
    Dim currentProcessName As String
    Dim groupStartIndex As Long
    Dim groupCount As Long
    Dim originalBikou As String
    Dim baseBikou As String
    Dim newRenbanString As String
    Dim patternToRemove As Object

    Const WIRE_EDM_PROCESS_NAME As String = "ﾜｲﾔ放電加工"
    Const TSUBA_ARA_PREFIX As String = "つば荒"
    Const TSUBA_SHIAGE_PREFIX As String = "つば仕上げ"
    Const OUTSOURCE_PROCESS_NAME As String = "外注"

    If m_lPreviewProcessCount = 0 Then Exit Sub

    Set patternToRemove = CreateObject("VBScript.RegExp")
    ' 連番パターンを検出するための正規表現 (例: " 1/2", "(1/2)", "1/2")
    patternToRemove.pattern = "\s*\W*\d+/\d+\W*\s*"
    patternToRemove.Global = True

    i = 0
    Do While i < m_lPreviewProcessCount
        currentProcessName = m_arrPreviewProcesses(i).ProcessName
        groupStartIndex = i
        groupCount = 1

        For j = i + 1 To m_lPreviewProcessCount - 1
            If m_arrPreviewProcesses(j).ProcessName = currentProcessName Then
                groupCount = groupCount + 1
            Else
                Exit For
            End If
        Next j

        If currentProcessName = OUTSOURCE_PROCESS_NAME Then
            ' 「外注」工程が連続する場合、連番を振らず元の備考を維持
            For j = 0 To groupCount - 1
                Dim targetIndex As Long
                targetIndex = groupStartIndex + j
                originalBikou = m_arrPreviewProcesses(targetIndex).bikou
                baseBikou = Trim(patternToRemove.Replace(originalBikou, ""))
                Do While InStr(baseBikou, "  ") > 0
                    baseBikou = Replace(baseBikou, "  ", " ")
                Loop
                m_arrPreviewProcesses(targetIndex).bikou = baseBikou
            Next j
        ElseIf currentProcessName <> WIRE_EDM_PROCESS_NAME Then
            ' 「外注」と「ﾜｲﾔ放電加工」以外の工程の連番処理
            For j = 0 To groupCount - 1
            
                targetIndex = groupStartIndex + j
                originalBikou = m_arrPreviewProcesses(targetIndex).bikou

                If Left(Trim(originalBikou), Len(TSUBA_ARA_PREFIX)) = TSUBA_ARA_PREFIX Or _
                   Left(Trim(originalBikou), Len(TSUBA_SHIAGE_PREFIX)) = TSUBA_SHIAGE_PREFIX Then
                    ' 「つば荒」または「つば仕上げ」で始まる備考は、既存のものをそのまま使用
                    m_arrPreviewProcesses(targetIndex).bikou = originalBikou
                Else
                    baseBikou = Trim(patternToRemove.Replace(originalBikou, ""))
                    Do While InStr(baseBikou, "  ") > 0
                        baseBikou = Replace(baseBikou, "  ", " ")
                    Loop
                    If groupCount > 1 Then
                        newRenbanString = (j + 1) & "/" & groupCount
                        If Len(baseBikou) > 0 Then
                            m_arrPreviewProcesses(targetIndex).bikou = baseBikou & " " & newRenbanString
                        Else
                            m_arrPreviewProcesses(targetIndex).bikou = newRenbanString
                        End If
                    Else
                        m_arrPreviewProcesses(targetIndex).bikou = baseBikou
                    End If
                End If
            Next j
        Else ' WIRE_EDM_PROCESS_NAME など、特別に連番を自動付与しない工程
            For j = 0 To groupCount - 1
                ' 備考は変更しない (元の値を維持)
            Next j
        End If
        i = groupStartIndex + groupCount
    Loop
    Set patternToRemove = Nothing
End Sub

Private Function ClassifyPartBasedOnSizeString(ByVal sizeString As String) As String
    Dim dimsStr() As String, original_dim1 As Double, original_dim2 As Double, original_dim3 As Double
    Dim d_small As Double, d_mid As Double, d_large As Double, Volume As Double, Ratio1 As Double, Ratio2 As Double
    Dim Cond1_Result As Boolean, Cond2_Result As Boolean, Cond3_Result As Boolean, Cond4_Result As Boolean
    ClassifyPartBasedOnSizeString = "-"
    If Trim(sizeString) = "" Then Exit Function
    dimsStr = Split(Trim(sizeString), "*")
    If UBound(dimsStr) <> 2 Then Exit Function
    On Error Resume Next
    original_dim1 = CDbl(dimsStr(0)): original_dim2 = CDbl(dimsStr(1)): original_dim3 = CDbl(dimsStr(2))
    If Err.Number <> 0 Then On Error GoTo 0: Exit Function
    On Error GoTo 0
    Dim dims(0 To 2) As Double: dims(0) = original_dim1: dims(1) = original_dim2: dims(2) = original_dim3
    Dim i As Integer, j As Integer, temp As Double
    For i = 0 To UBound(dims) - 1: For j = i + 1 To UBound(dims)
        If dims(i) > dims(j) Then temp = dims(i): dims(i) = dims(j): dims(j) = temp
    Next j, i
    d_small = dims(0): d_mid = dims(1): d_large = dims(2)
    Volume = d_small * d_mid * d_large
    If d_mid = 0 Then Ratio1 = 1E+99 Else Ratio1 = d_small / d_mid
    If d_large = 0 Then Ratio2 = 1E+99 Else Ratio2 = d_small / d_large
    Cond1_Result = (d_small <= 56): Cond2_Result = ((Ratio1 < 0.6 And Ratio2 < 0.55) Or (d_small <= 30))
    Cond3_Result = (d_mid >= 58 And d_large >= 80): Cond4_Result = (Volume >= 70000)
    If Cond1_Result And Cond2_Result And Cond3_Result And Cond4_Result Then ClassifyPartBasedOnSizeString = "+" Else ClassifyPartBasedOnSizeString = "-"
End Function

Private Sub LoadProcessTimes()
    Set processTimesDict = CreateObject("Scripting.Dictionary")
    Dim wsTimes As Worksheet, lastRow As Long, iLng As Long, keyName As String
    Dim arrData(0 To 5) As String ' 0:maeDandori, 1:yujin, 2:machine, 3:goDandori, 4:remarks, 5:detailRemarks
    On Error Resume Next
    Set wsTimes = ThisWorkbook.Sheets(SHEET_KOUTEI_TIMES)
    On Error GoTo 0
    If wsTimes Is Nothing Then Exit Sub
    lastRow = wsTimes.Cells(wsTimes.Rows.Count, COL_TIME_KEY).End(xlUp).Row
    For iLng = 2 To lastRow
        keyName = Trim(CStr(wsTimes.Cells(iLng, COL_TIME_KEY).Value))
        arrData(0) = Trim(CStr(wsTimes.Cells(iLng, COL_TIME_MAE_DANDORI).Value))
        arrData(1) = Trim(CStr(wsTimes.Cells(iLng, COL_TIME_YUJIN).Value))
        arrData(2) = Trim(CStr(wsTimes.Cells(iLng, COL_TIME_MACHINE).Value))
        arrData(3) = Trim(CStr(wsTimes.Cells(iLng, COL_TIME_SETUP).Value))
        arrData(4) = Trim(CStr(wsTimes.Cells(iLng, COL_TIME_REMARKS).Value))
        arrData(5) = Trim(CStr(wsTimes.Cells(iLng, COL_TIME_REMARKS_DETAIL).Value))
        If keyName <> "" Then
            If Not processTimesDict.Exists(keyName) Then processTimesDict.Add keyName, arrData
        End If
    Next iLng
End Sub

Private Sub LoadMaterialInfo()
    Set materialInfoDict = CreateObject("Scripting.Dictionary")
    Dim wsMaterial As Worksheet, lastRow As Long, iLng As Long, materialCodeKey As String
    Dim arrData(0 To 3) As String ' 0:Supplier, 1:HeatNormal, 2:HeatSubzero, 3:SkipHeatFlag
    Dim heatNormalSupplierOrSkipFlag As String

    On Error Resume Next
    Set wsMaterial = ThisWorkbook.Sheets(SHEET_KOUTEI_TIMES)
    On Error GoTo 0
    If wsMaterial Is Nothing Then Exit Sub

    lastRow = wsMaterial.Cells(wsMaterial.Rows.Count, COL_MATERIAL_CODE).End(xlUp).Row
    For iLng = 2 To lastRow
        materialCodeKey = UCase(Trim(CStr(wsMaterial.Cells(iLng, COL_MATERIAL_CODE).Value)))
        arrData(0) = Trim(CStr(wsMaterial.Cells(iLng, COL_MATERIAL_SUPPLIER).Value))
        
        heatNormalSupplierOrSkipFlag = Trim(CStr(wsMaterial.Cells(iLng, COL_MATERIAL_HEAT_NORMAL).Value))
        arrData(1) = heatNormalSupplierOrSkipFlag

        If LCase(StrConv(heatNormalSupplierOrSkipFlag, vbNarrow)) = "無" Then
            arrData(3) = "SKIP_HEAT" ' 熱処理スキップを示す内部フラグ
        Else
            arrData(3) = "DO_HEAT"   ' 熱処理実行を示す内部フラグ
        End If

        arrData(2) = Trim(CStr(wsMaterial.Cells(iLng, COL_MATERIAL_HEAT_SUBZERO).Value))
        
        If materialCodeKey <> "" Then
            If Not materialInfoDict.Exists(materialCodeKey) Then
                materialInfoDict.Add materialCodeKey, arrData
            End If
        End If
    Next iLng
End Sub

Private Sub LoadOutsourcingInfo()
    Set outsourcingInfoDict = CreateObject("Scripting.Dictionary")
    outsourcingInfoDict.CompareMode = vbTextCompare

    Dim wsOutsource As Worksheet, lastRow As Long, iLng As Long
    Dim outsourceKey As String, supplierName As String
    Dim flagCB2String As String, flagEditString As String
    Dim displayForCB2 As Boolean, displayForEdit As Boolean

    On Error Resume Next
    Set wsOutsource = ThisWorkbook.Sheets(SHEET_KOUTEI_TIMES)
    On Error GoTo 0
    If wsOutsource Is Nothing Then
        MsgBox "外注先情報シート「" & SHEET_KOUTEI_TIMES & "」が見つかりません。", vbCritical
        Set outsourcingInfoDict = Nothing
        Exit Sub
    End If

    lastRow = wsOutsource.Cells(wsOutsource.Rows.Count, COL_OUTSOURCE_KEY).End(xlUp).Row

    For iLng = 2 To lastRow
        outsourceKey = UCase(Trim(CStr(wsOutsource.Cells(iLng, COL_OUTSOURCE_KEY).Value)))
        supplierName = Trim(CStr(wsOutsource.Cells(iLng, COL_OUTSOURCE_NAME).Value))
        
        flagCB2String = UCase(Trim(CStr(wsOutsource.Cells(iLng, COL_OUTSOURCE_FLAG_CB2).Value))) ' Q列(またはS列)
        If flagCB2String = "〇" Or flagCB2String = "Y" Or flagCB2String = "1" Then
            displayForCB2 = True
        Else
            displayForCB2 = False
        End If
        
        flagEditString = UCase(Trim(CStr(wsOutsource.Cells(iLng, COL_OUTSOURCE_FLAG_EDIT).Value))) ' R列
        If flagEditString = "〇" Or flagEditString = "Y" Or flagEditString = "1" Then
            displayForEdit = True
        Else
            displayForEdit = False
        End If

        If outsourceKey <> "" And supplierName <> "" Then
            If Not outsourcingInfoDict.Exists(outsourceKey) Then
                outsourcingInfoDict.Add outsourceKey, Array(supplierName, displayForCB2, displayForEdit)
            End If
        End If
    Next iLng
End Sub

Private Function GetProcessTimes(baseProcessName As String, Optional detailSuffix As String = "") As Variant
    Dim lookupKey As String: lookupKey = Trim(baseProcessName)
    If Trim(detailSuffix) <> "" Then lookupKey = lookupKey & "-" & Trim(detailSuffix)
    If processTimesDict Is Nothing Then GetProcessTimes = False: Exit Function
    If processTimesDict.Exists(lookupKey) Then GetProcessTimes = processTimesDict(lookupKey) Else GetProcessTimes = False
End Function

Private Function GetOutsourcingSupplierName(ByVal outsourcingKey As String) As String
    Dim normalizedKey As String: normalizedKey = UCase(Trim(outsourcingKey))
    Dim dictItem As Variant
    GetOutsourcingSupplierName = ""
    If outsourcingInfoDict Is Nothing Then Exit Function
    If outsourcingInfoDict.Count = 0 Then Exit Function
    If outsourcingInfoDict.Exists(normalizedKey) Then
        dictItem = outsourcingInfoDict(normalizedKey)
        If IsArray(dictItem) And UBound(dictItem) >= 0 Then
            GetOutsourcingSupplierName = CStr(dictItem(0))
        End If
    End If
End Function

Private Function GetMaterialName(ByVal materialCodeInputPreview As String) As String
    Dim normalizedCode As String: normalizedCode = UCase(Trim(materialCodeInputPreview))
    If materialInfoDict Is Nothing Then GetMaterialName = "": Exit Function
    If materialInfoDict.Exists(normalizedCode) Then GetMaterialName = normalizedCode Else GetMaterialName = ""
End Function

Private Sub ParseZColumnInfo(ByVal zValuePreview As String, ByRef outCoatingTypeKey As String, _
                           ByRef outHasSubZero As Boolean, ByRef outNeedsOutsourcing As Boolean, _
                           ByRef outNeedsPolishing As Boolean)
    Dim normalizedZ As String
    Dim keyword As Variant
    Dim keywordData As Variant

    outCoatingTypeKey = ""
    outHasSubZero = False
    outNeedsOutsourcing = False
    outNeedsPolishing = False

    If zKeywordsDict Is Nothing Or zKeywordsDict.Count = 0 Then Exit Sub

    normalizedZ = NormalizeZText(zValuePreview)

    For Each keyword In zKeywordsDict.Keys
        If InStr(1, normalizedZ, CStr(keyword), vbTextCompare) > 0 Then
            keywordData = zKeywordsDict(keyword)
            If IsArray(keywordData) Then
                Dim keywordType As String
                keywordType = CStr(keywordData(0))

                If UCase(keywordType) = "コーティング" Then
                    outCoatingTypeKey = CStr(keywordData(1))
                    outNeedsOutsourcing = CBool(keywordData(2))
                    outNeedsPolishing = CBool(keywordData(3))
                ElseIf UCase(keywordType) = "サブゼロ" Then
                    outHasSubZero = True
                End If
            End If
        End If
    Next keyword
End Sub

Private Function NormalizeZText(src As String) As String
    Dim t As String: t = StrConv(src, vbNarrow + vbKatakana): t = UCase(t)
    t = Replace(t, " ", ""): t = Replace(t, "　", ""): t = Replace(t, "COATING", ""): t = Replace(t, "ｺｰﾃｨﾝｸﾞ", ""): t = Replace(t, "コーティング", "")
    t = Replace(t, "ｾﾞﾛ", "0"): t = Replace(t, "ゼロ", "0"): t = Replace(t, "ZERO", "0"): NormalizeZText = t
End Function

Private Function GetShapeFromOptionButtons() As String
    If TypeName(Me.Controls("CheckBoxLayout")) = "CheckBox" Then
        If Me.CheckBoxLayout.Value Then
            GetShapeFromOptionButtons = "レイアウト切り離し後"
            Exit Function
        End If
    End If
    
    If Me.OptionButton5.Value Then
        GetShapeFromOptionButtons = "プレート"
    ElseIf Me.OptionButton6.Value Then
        GetShapeFromOptionButtons = "ファミリー加工"
    Else
        GetShapeFromOptionButtons = "ブロック"
    End If
End Function

Private Sub CommandButton1_Click()
    Dim wsKouteihyo As Worksheet
    Dim wsLog As Worksheet
    Dim targetRow As Long
    Dim currentRow As Long
    Dim i As Long

    Application.ScreenUpdating = False
    On Error GoTo ErrorHandler

    Set wsKouteihyo = ThisWorkbook.Sheets(SHEET_KOUTEIHYO)
    If Not ValidateActiveCell(wsKouteihyo, targetRow) Then GoTo Finally
    currentRow = targetRow

    If m_lPreviewProcessCount > 0 Then
        On Error Resume Next
        Set wsLog = Nothing
        Set wsLog = ThisWorkbook.Sheets(SHEET_LAST_OUTPUT_LOG)
        If wsLog Is Nothing Then
            Set wsLog = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
            wsLog.name = SHEET_LAST_OUTPUT_LOG
            ' wsLog.Visible = xlSheetVeryHidden
        End If
        On Error GoTo ErrorHandler
        If wsLog Is Nothing Then
            MsgBox "ログシート「" & SHEET_LAST_OUTPUT_LOG & "」の準備に失敗しました。", vbCritical
            GoTo Finally
        End If
        wsLog.Cells.ClearContents

        For i = 0 To m_lPreviewProcessCount - 1
            Call AddProcessToSheet( _
                wsKouteihyo, _
                currentRow, _
                targetRow, _
                m_arrPreviewProcesses(i).ProcessName, _
                m_arrPreviewProcesses(i).supplier, _
                m_arrPreviewProcesses(i).MaeDandoriTime, _
                m_arrPreviewProcesses(i).YujinTime, _
                m_arrPreviewProcesses(i).MachineTime, _
                m_arrPreviewProcesses(i).GoDandoriTime, _
                m_arrPreviewProcesses(i).bikou _
            )

            With wsLog
                .Cells(i + 1, 1).Value = m_arrPreviewProcesses(i).ProcessName
                .Cells(i + 1, 2).Value = m_arrPreviewProcesses(i).supplier
                .Cells(i + 1, 3).Value = m_arrPreviewProcesses(i).MaeDandoriTime
                .Cells(i + 1, 4).Value = m_arrPreviewProcesses(i).YujinTime
                .Cells(i + 1, 5).Value = m_arrPreviewProcesses(i).MachineTime
                .Cells(i + 1, 6).Value = m_arrPreviewProcesses(i).GoDandoriTime
                .Cells(i + 1, 7).Value = m_arrPreviewProcesses(i).bikou
                .Cells(i + 1, 8).Value = m_arrPreviewProcesses(i).UserEditedGoDandori
                .Cells(i + 1, 9).Value = m_arrPreviewProcesses(i).IsGoDandoriUserEdited
            End With
        Next i
        MsgBox "工程作成が完了しました。", vbInformation
    Else
        MsgBox "プレビューに表示されている工程がありません。出力処理を中断します。", vbExclamation
        GoTo Finally
    End If

Finally:
    Application.ScreenUpdating = True
    Set wsKouteihyo = Nothing
    Set wsLog = Nothing
    Unload Me
    Exit Sub

ErrorHandler:
    MsgBox "工程作成中にエラーが発生しました。" & vbCrLf & _
           "エラー番号: " & Err.Number & vbCrLf & _
           "エラー内容: " & Err.Description, vbCritical
    Resume Finally
End Sub

Private Function ValidateActiveCell(ByVal targetSheet As Worksheet, ByRef outTargetRow As Long) As Boolean
    ValidateActiveCell = False
    If TypeName(ActiveSheet) <> "Worksheet" Or ActiveSheet.name <> targetSheet.name Then MsgBox "「" & targetSheet.name & "」シートをアクティブにして、開始セルを選択してください。", vbExclamation: Exit Function
    If TypeName(Selection) <> "Range" Then MsgBox "開始セルを選択してください。", vbExclamation: Exit Function
    If Selection.Cells.CountLarge <> 1 Then MsgBox "開始セルを一つだけ選択してください。", vbExclamation: Exit Function
    outTargetRow = ActiveCell.Row: ValidateActiveCell = True
End Function

Private Sub CommandButton単品挿入_Click()
    Dim sProcessName As String
    Dim processDataTimes As Variant
    Dim sMaeDandori As String
    Dim sYujinTime As String
    Dim sMachineTime As String
    Dim sGoDandoriTime As String
    Dim sBikou As String

    sProcessName = Me.ComboBox工程選択.Value
    If sProcessName = "" Then
        MsgBox "工程をリストから選択してください。", vbExclamation
        Exit Sub
    End If

    processDataTimes = GetProcessTimes(sProcessName)

    If IsArray(processDataTimes) Then
        ' 0: 前段取, 1: 有人, 2: 機械, 3: 後段取, 4: 備考 (F列), 5: 詳細備考 (G列)
        sMaeDandori = CStr(processDataTimes(0))
        sYujinTime = CStr(processDataTimes(1))
        sMachineTime = CStr(processDataTimes(2))
        sGoDandoriTime = CStr(processDataTimes(3))
        sBikou = CStr(processDataTimes(4))
    Else
        sMaeDandori = ""
        sYujinTime = ""
        sMachineTime = ""
        sGoDandoriTime = ""
        sBikou = "※工数/備考未設定"
    End If

    Call AddItemToPreviewList( _
        procName:=sProcessName, _
        supplier:="", _
        maeD:=sMaeDandori, _
        yujin:=sYujinTime, _
        machine:=sMachineTime, _
        goD:=sGoDandoriTime, _
        remark:=sBikou _
    )
    Call RefreshListBoxFromInternalArray
End Sub

Private Function ReplaceCharsForSheetName(ByVal name As String) As String
    Dim invalidChars As Variant, charIdx As Long
    invalidChars = Array("\", "/", "*", "[", "]", ":", "?")
    ReplaceCharsForSheetName = name
    For charIdx = LBound(invalidChars) To UBound(invalidChars)
        ReplaceCharsForSheetName = Replace(ReplaceCharsForSheetName, invalidChars(charIdx), "_")
    Next charIdx
    If Len(ReplaceCharsForSheetName) > 31 Then ReplaceCharsForSheetName = Left(ReplaceCharsForSheetName, 31)
End Function

Private Sub AddProcessToSheet(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                            ProcessName As String, Optional supplier As String = "", _
                            Optional MaeDandoriTime As Variant = "", Optional YujinTime As Variant = "", Optional MachineTime As Variant = "", Optional GoDandoriTime As Variant = "", _
                            Optional memo As String = "")
    
    If currentRow > initialTargetRow Then
        ws.Rows(currentRow).Insert Shift:=xlDown
    ElseIf ws.Cells(currentRow, COL_KOUTEI).Value <> "" Or ws.Cells(currentRow, COL_JINKAN_YUJIN).Value <> "" Then
        ws.Rows(currentRow).Insert Shift:=xlDown
    End If

    If ProcessName <> "" Then ws.Cells(currentRow, COL_KOUTEI).Value = ProcessName
    If supplier <> "" Then ws.Cells(currentRow, COL_GYOUSHA).Value = supplier
    If Not IsEmpty(MaeDandoriTime) And MaeDandoriTime <> "" Then ws.Cells(currentRow, COL_MAE_DANDORI_OUTPUT).Value = MaeDandoriTime
    If Not IsEmpty(YujinTime) And YujinTime <> "" Then ws.Cells(currentRow, COL_JINKAN_YUJIN).Value = YujinTime
    If Not IsEmpty(MachineTime) And MachineTime <> "" Then ws.Cells(currentRow, COL_JINKAN_MACHINE).Value = MachineTime
    If Not IsEmpty(GoDandoriTime) And GoDandoriTime <> "" Then ws.Cells(currentRow, COL_JINKAN_SETUP).Value = GoDandoriTime
    
    Dim outputMemo As String
    outputMemo = memo

    If memo <> "" Then
        Dim re As Object
        Dim matches As Object
        
        On Error Resume Next
        Set re = CreateObject("VBScript.RegExp")
        re.pattern = "^(.*?)( \d+/\d+)$" ' 末尾が「 スペース 数字/数字」のパターン
                                       ' グループ1: (.*?) → 連番の前のテキスト部分
                                       ' グループ2: ( \d+/\d+) → 「 スペース 数字/数字」の連番部分
        re.Global = False
        
        If re.Test(memo) Then
            Set matches = re.Execute(memo)
            If matches.Count > 0 Then
                Dim baseTextPart As String
                Dim sequencePart As String
                
                baseTextPart = Trim(matches(0).SubMatches(0))
                sequencePart = Trim(matches(0).SubMatches(1))
                
                If Len(baseTextPart) > 0 Then
                    outputMemo = sequencePart & " " & baseTextPart
                Else
                    outputMemo = sequencePart
                End If
            End If
        End If
        Set re = Nothing
        Set matches = Nothing
        On Error GoTo 0
    End If

    If outputMemo <> "" Then ws.Cells(currentRow, COL_BIKOU).Value = outputMemo
    currentRow = currentRow + 1
End Sub

Private Sub ProcessOutsourcedProduct( _
        ws As Worksheet, _
        ByRef currentRow As Long, _
        initialTargetRow As Long, _
        coatingTypeKeyCmd As String, _
        needsOutsourcingForCoatingCmd As Boolean, _
        needsAdjustPCmd As Boolean, _
        outsourcedProductSupplierName As String)

    Call AddProcessToSheet(ws, currentRow, initialTargetRow, _
                           "外注", outsourcedProductSupplierName)

    If needsOutsourcingForCoatingCmd And coatingTypeKeyCmd <> "" Then
        Dim coatingSupplierName As String
        coatingSupplierName = GetOutsourcingSupplierName(coatingTypeKeyCmd)
        
        If coatingSupplierName <> "" Then
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, _
                                   "外注", coatingSupplierName, , , , , "")
        End If
    End If
    
    Call AddAdjustPProcess(ws, currentRow, initialTargetRow, needsAdjustPCmd)
End Sub

Private Sub ProcessMisumiPurchase(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                  hasAdditionalProcessing As Boolean, additionalProcessName As String, needsAdjustP As Boolean)
    Call AddProcessToSheet(ws, currentRow, initialTargetRow, "副材(購入品)", "ﾐｽﾐ")
    If hasAdditionalProcessing Then
        Dim times As Variant
        Dim remarksFromSheetF As String
        
        times = GetProcessTimes(additionalProcessName)

        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4))
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, additionalProcessName, , times(0), times(1), times(2), times(3), remarksFromSheetF)
        Else
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, additionalProcessName, , "", "", "", "", "※工数/備考未設定:" & additionalProcessName)
        End If
    End If
    Call AddAdjustPProcess(ws, currentRow, initialTargetRow, needsAdjustP)
End Sub

Private Sub ProcessLayoutAfterCut(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                needsPolishing As Boolean, hasCuttingEdge As Boolean, _
                                needsOutsourcingForCoating As Boolean, coatingTypeKey As String, needsAdjustP As Boolean, _
                                hasTsubaProcessing As Boolean, tsubaCount As Integer, tsubaRoughMethod As String, _
                                kataboriChoosenByUserAsLayout As Boolean, naraiKensakuChoosenByUserAsLayout As Boolean, _
                                useAfterMCAsLayout As Boolean, shapeForMC As String)
    Dim specificMemo As String
    Dim times As Variant
    Dim processKeyDetail As String
    Dim remarksFromSheetF As String

    If hasCuttingEdge Then
        If hasTsubaProcessing Or kataboriChoosenByUserAsLayout Or needsPolishing Then specificMemo = "ﾍｿ取り" Else specificMemo = "ﾍｿ取り・上面"
    Else
        specificMemo = "ﾍｿ取り"
    End If
    processKeyDetail = IIf(specificMemo = "ﾍｿ取り・上面", "レイアウト後ヘソ上面", "レイアウト後ヘソ取り")
    times = GetProcessTimes("平面研削 汎用", processKeyDetail)
    If IsArray(times) Then
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 汎用", , times(0), times(1), times(2), times(3), specificMemo)
    Else
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 汎用", , "", "0.1", , "0.2", specificMemo & " (※工数未設定)")
    End If

    If useAfterMCAsLayout Then
        Dim mcProcessNameLayout As String
        mcProcessNameLayout = IIf(shapeForMC = "プレート", "M/C（大）", "M/C（小）")
        times = GetProcessTimes(mcProcessNameLayout, "レイアウト後MC")
        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4))
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, mcProcessNameLayout, , times(0), times(1), times(2), times(3), remarksFromSheetF)
        Else
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, mcProcessNameLayout, , "", "", "", "", "※工数/備考未設定:" & mcProcessNameLayout & "-レイアウト後MC")
        End If
    End If

    If hasTsubaProcessing Then Call AddTsubaProcessing(ws, currentRow, initialTargetRow, tsubaCount, tsubaRoughMethod, needsPolishing, kataboriChoosenByUserAsLayout, hasCuttingEdge)
    
    If naraiKensakuChoosenByUserAsLayout Then
        times = GetProcessTimes("倣い研削", "レイアウト後")
        If IsArray(times) Then
             remarksFromSheetF = CStr(times(4))
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "倣い研削", , times(0), times(1), times(2), times(3), remarksFromSheetF)
        Else
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "倣い研削", , "", "1.0", "", "0.2", "※工数/備考未設定")
        End If
    End If

    If kataboriChoosenByUserAsLayout Then
        times = GetProcessTimes("型彫放電加工", "レイアウト後")
        If IsArray(times) Then
            remarksFromSheetF = CStr(times(4))
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "型彫放電加工", , times(0), times(1), times(2), times(3), remarksFromSheetF)
        Else
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "型彫放電加工", , "", "0.5", "1.5", "0.2", "※工数/備考未設定")
        End If
        If hasCuttingEdge And Not needsPolishing Then
            times = GetProcessTimes("平面研削 NC", "レイアウト後上面")
            If IsArray(times) Then
                Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , times(0), times(1), times(2), times(3), "上面")
            Else
                Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , "", "0.2", "0.2", "0.1", "上面 (※工数未設定)")
            End If
        End If
    End If

    Call AddPolishingAndCoating(ws, currentRow, initialTargetRow, needsPolishing, hasCuttingEdge, needsOutsourcingForCoating, coatingTypeKey)
    Call AddAdjustPProcess(ws, currentRow, initialTargetRow, needsAdjustP)
End Sub

Private Sub ProcessGeibiOutsource(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, materialCodeActual As String, geibiPatternCmd As String, hasSubZeroCmd As Boolean, shapeCmd As String, useWireEDMCmd As Boolean, isDia10OrLessCmd As Boolean, hasShapeProcessingCmd As Boolean, hasCuttingEdgeCmd As Boolean, useAfterMCCmd As Boolean, useSmallStartHoleCmd As Boolean, hasTsubaProcessingCmd As Boolean, tsubaCountCmd As Integer, tsubaRoughMethodCmd As String, needsPolishingCmd As Boolean, needsOutsourcingForCoatingCmd As Boolean, coatingTypeKeyCmd As String, needsAdjustPCmd As Boolean, noChamferCmd As Boolean, hasLiftingScrewCmd As Boolean, kataboriChoosenByUserCmd As Boolean, naraiKensakuChoosenByUserCmd As Boolean, isSingleMCPreHeatCmd As Boolean, isTripleMCPreHeatCmd As Boolean, autoSgCountCmd As Boolean, userSgCountCmd As Integer)
    Dim geibiSupplierName As String
    geibiSupplierName = GetOutsourcingSupplierName("GEIBI")
    If geibiSupplierName = "" Then geibiSupplierName = "ｹﾞｲﾋﾞ鋼業"
    
    Select Case geibiPatternCmd
        Case "材料～焼きまで"
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", geibiSupplierName, , , , , geibiPatternCmd)
            Call AddPostHeatTreatmentProcesses(ws, currentRow, initialTargetRow, materialCodeActual, shapeCmd, useWireEDMCmd, isDia10OrLessCmd, hasShapeProcessingCmd, hasCuttingEdgeCmd, useAfterMCCmd, useSmallStartHoleCmd, hasTsubaProcessingCmd, tsubaCountCmd, tsubaRoughMethodCmd, needsPolishingCmd, needsOutsourcingForCoatingCmd, coatingTypeKeyCmd, needsAdjustPCmd, kataboriChoosenByUserCmd, naraiKensakuChoosenByUserCmd, autoSgCountCmd, userSgCountCmd)
            
        Case "荒加工のみ"
            Call AddMaterialPurchase(ws, currentRow, initialTargetRow, materialCodeActual, noChamferCmd, hasLiftingScrewCmd)
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", geibiSupplierName, , , , , geibiPatternCmd)
            Call AddTapHole(ws, currentRow, initialTargetRow, hasSubZeroCmd)
            
            Dim requiresHeatTreatmentGeibi As Boolean
            requiresHeatTreatmentGeibi = True
            If materialInfoDict.Exists(materialCodeActual) Then
                Dim matData As Variant
                matData = materialInfoDict(materialCodeActual)
                If UBound(matData) >= 3 Then
                    If CStr(matData(3)) = "SKIP_HEAT" Then
                        requiresHeatTreatmentGeibi = False
                    End If
                End If
            End If
            
            If requiresHeatTreatmentGeibi Then
                Call AddHeatTreatment(ws, currentRow, initialTargetRow, materialCodeActual, hasSubZeroCmd)
            End If
            
            Call AddPostHeatTreatmentProcesses(ws, currentRow, initialTargetRow, materialCodeActual, shapeCmd, useWireEDMCmd, isDia10OrLessCmd, hasShapeProcessingCmd, hasCuttingEdgeCmd, useAfterMCCmd, useSmallStartHoleCmd, hasTsubaProcessingCmd, tsubaCountCmd, tsubaRoughMethodCmd, needsPolishingCmd, needsOutsourcingForCoatingCmd, coatingTypeKeyCmd, needsAdjustPCmd, kataboriChoosenByUserCmd, naraiKensakuChoosenByUserCmd, autoSgCountCmd, userSgCountCmd)
            
        Case "荒～焼きまで"
            Call AddMaterialPurchase(ws, currentRow, initialTargetRow, materialCodeActual, noChamferCmd, hasLiftingScrewCmd)
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", geibiSupplierName, , , , , geibiPatternCmd)
            Call AddPostHeatTreatmentProcesses(ws, currentRow, initialTargetRow, materialCodeActual, shapeCmd, useWireEDMCmd, isDia10OrLessCmd, hasShapeProcessingCmd, hasCuttingEdgeCmd, useAfterMCCmd, useSmallStartHoleCmd, hasTsubaProcessingCmd, tsubaCountCmd, tsubaRoughMethodCmd, needsPolishingCmd, needsOutsourcingForCoatingCmd, coatingTypeKeyCmd, needsAdjustPCmd, kataboriChoosenByUserCmd, naraiKensakuChoosenByUserCmd, autoSgCountCmd, userSgCountCmd)
            
    End Select
End Sub

Private Sub ProcessNormalRoute(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, materialCodeActual As String, hasSubZeroCmd As Boolean, shapeCmd As String, useWireEDMCmd As Boolean, isDia10OrLessCmd As Boolean, hasShapeProcessingCmd As Boolean, hasCuttingEdgeCmd As Boolean, useAfterMCCmd As Boolean, useSmallStartHoleCmd As Boolean, hasTsubaProcessingCmd As Boolean, tsubaCountCmd As Integer, tsubaRoughMethodCmd As String, needsPolishingCmd As Boolean, needsOutsourcingForCoatingCmd As Boolean, coatingTypeKeyCmd As String, needsAdjustPCmd As Boolean, noChamferCmd As Boolean, hasLiftingScrewCmd As Boolean, kataboriChoosenByUserCmd As Boolean, naraiKensakuChoosenByUserCmd As Boolean, autoSgCountCmd As Boolean, userSgCountCmd As Integer)
    Call AddMaterialPurchase(ws, currentRow, initialTargetRow, materialCodeActual, noChamferCmd, hasLiftingScrewCmd)
    Call AddMCBeforeHeatTreatment(ws, currentRow, initialTargetRow, shapeCmd)
    Call AddTapHole(ws, currentRow, initialTargetRow, hasSubZeroCmd)
    Dim requiresHeatTreatmentOutput As Boolean
    requiresHeatTreatmentOutput = True
    If materialInfoDict.Exists(materialCodeActual) Then
        Dim matData As Variant
        matData = materialInfoDict(materialCodeActual)
        If IsArray(matData) And UBound(matData) >= 3 Then
            If CStr(matData(3)) = "SKIP_HEAT" Then
                requiresHeatTreatmentOutput = False
            End If
        End If
    End If

    If requiresHeatTreatmentOutput Then
        Call AddHeatTreatment(ws, currentRow, initialTargetRow, materialCodeActual, hasSubZeroCmd)
    End If
    ' Call AddPostHeatTreatmentProcesses は UpdatePreview 内で呼び出されるため、ここでは不要
    Call AddPostHeatTreatmentProcesses(ws, currentRow, initialTargetRow, materialCodeActual, shapeCmd, useWireEDMCmd, isDia10OrLessCmd, hasShapeProcessingCmd, hasCuttingEdgeCmd, useAfterMCCmd, useSmallStartHoleCmd, hasTsubaProcessingCmd, tsubaCountCmd, tsubaRoughMethodCmd, needsPolishingCmd, needsOutsourcingForCoatingCmd, coatingTypeKeyCmd, needsAdjustPCmd, kataboriChoosenByUserCmd, naraiKensakuChoosenByUserCmd, autoSgCountCmd, userSgCountCmd)
End Sub

Private Sub AddAdjustPProcess(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, needsAdjustPCmd As Boolean)
    If needsAdjustPCmd Then
        Dim times As Variant: times = GetProcessTimes("調整（P）")
        If IsArray(times) Then
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "調整（P）", , times(0), times(1), times(2), times(3), CStr(times(4)))
        Else
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "調整（P）", , "", "", "", "", "※工数/備考未設定")
        End If
    End If
End Sub

Private Sub AddMaterialPurchase(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, materialCodeActual As String, noChamferCmd As Boolean, hasLiftingScrewCmd As Boolean)
    Dim supplier As String, materialData As Variant, normalizedMaterialCode As String, specificMemo As String
    normalizedMaterialCode = UCase(Trim(materialCodeActual))
    If materialInfoDict Is Nothing Or Not materialInfoDict.Exists(normalizedMaterialCode) Then supplier = "" Else materialData = materialInfoDict(normalizedMaterialCode): supplier = CStr(materialData(0))
    specificMemo = IIf(noChamferCmd, "Cなし", "Cあり"): If hasLiftingScrewCmd Then specificMemo = specificMemo & ",吊り"
    Call AddProcessToSheet(ws, currentRow, initialTargetRow, "主材購入", supplier, , , , , specificMemo)
End Sub

Private Sub AddMCBeforeHeatTreatment(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, shapeCmd As String)
    Dim mcProcessName As String: mcProcessName = IIf(shapeCmd = "プレート", "M/C（大）", "M/C（小）")
    Dim i As Integer, times As Variant, maeDandori As String, yTime As String, mTime As String, sTimeBase As String, sTimeFinal As String, loopCount As Integer, specificMemo As String
    times = GetProcessTimes(mcProcessName, "熱処理前")
    If IsArray(times) Then
        maeDandori = CStr(times(0))
        yTime = CStr(times(1))
        mTime = CStr(times(2))
        sTimeBase = CStr(times(3))
    Else
        maeDandori = ""
        yTime = "0.25"
        mTime = "0.1"
        sTimeBase = "0.1"
    End If
    loopCount = 2
    For i = 1 To loopCount
        sTimeFinal = IIf(i = loopCount, sTimeBase, "")
        specificMemo = i & "/" & loopCount
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, mcProcessName, , maeDandori, yTime, mTime, sTimeFinal, specificMemo)
    Next i
End Sub

Private Sub AddTapHole(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, hasSubZeroCmd As Boolean)
    Dim specificMemo As String, remarksFromSheetF As String, finalMemo As String, times As Variant, MaeDandoriTime As String
    If hasSubZeroCmd Then specificMemo = "ｻﾌﾞｾﾞﾛ注意" Else specificMemo = ""
    times = GetProcessTimes("穴あけﾀｯﾌﾟ")
    If IsArray(times) Then
        MaeDandoriTime = CStr(times(0))
        remarksFromSheetF = CStr(times(4))
        If specificMemo <> "" Then finalMemo = specificMemo Else finalMemo = remarksFromSheetF
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "穴あけﾀｯﾌﾟ", , MaeDandoriTime, times(1), times(2), times(3), finalMemo)
    Else
        finalMemo = specificMemo & IIf(specificMemo <> "", " ", "") & "(※工数/備考未設定)"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "穴あけﾀｯﾌﾟ", , "", "0.3", , , finalMemo)
    End If
End Sub

Private Sub AddHeatTreatment(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, materialCodeActual As String, hasSubZeroCmd As Boolean)
    Dim supplier As String, materialData As Variant, normalizedMaterialCode As String
    normalizedMaterialCode = UCase(Trim(materialCodeActual))
    
    If materialInfoDict Is Nothing Or Not materialInfoDict.Exists(normalizedMaterialCode) Then
        supplier = ""
        If hasSubZeroCmd Then
            supplier = GetOutsourcingSupplierName("HEAT_SUBZERO_DEFAULT")
            If supplier = "" Then supplier = "ｴｼﾞｿﾝ熱処理"
        End If
    Else
        materialData = materialInfoDict(normalizedMaterialCode)
        If hasSubZeroCmd Then
            supplier = CStr(materialData(2))
            If supplier = "" Then
                supplier = GetOutsourcingSupplierName("HEAT_SUBZERO_DEFAULT")
                If supplier = "" Then supplier = "ｴｼﾞｿﾝ熱処理"
            End If
        Else
            supplier = CStr(materialData(1))
        End If
    End If

    If supplier <> "" Then
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "熱処理", supplier, , , , , IIf(hasSubZeroCmd, "", ""))
    ElseIf hasSubZeroCmd And supplier = "" Then
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "熱処理", GetOutsourcingSupplierName("HEAT_SUBZERO_DEFAULT"), , , , , "")
    End If
End Sub

Private Sub AddPostHeatTreatmentProcesses(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, materialCodeActual As String, shapeCmd As String, useWireEDMCmd As Boolean, isDia10OrLessCmd As Boolean, hasShapeProcessingCmd As Boolean, hasCuttingEdgeCmd As Boolean, useAfterMCCmd As Boolean, useSmallStartHoleCmd As Boolean, hasTsubaProcessingCmd As Boolean, tsubaCountCmd As Integer, tsubaRoughMethodCmd As String, needsPolishingCmd As Boolean, needsOutsourcingForCoatingCmd As Boolean, coatingTypeKeyCmd As String, needsAdjustPCmd As Boolean, kataboriChoosenByUserCmd As Boolean, naraiKensakuChoosenByUserCmd As Boolean, autoSgCountCmd As Boolean, userSgCountCmd As Integer)
    
    Call AddPostHeatTreatmentSG(ws, currentRow, initialTargetRow, shapeCmd, useWireEDMCmd, useAfterMCCmd, autoSgCountCmd, userSgCountCmd)
    If useAfterMCCmd Then Call AddAfterMCFinish(ws, currentRow, initialTargetRow, shapeCmd)
    If useWireEDMCmd And useSmallStartHoleCmd Then Call AddSmallStartHole(ws, currentRow, initialTargetRow)
    If useWireEDMCmd Then
        Call AddWireEDMProcessing(ws, currentRow, initialTargetRow, isDia10OrLessCmd, hasShapeProcessingCmd, (shapeCmd = "ファミリー加工"))
        Call AddPostWireEDMGrinding(ws, currentRow, initialTargetRow, shapeCmd, needsPolishingCmd, hasCuttingEdgeCmd, hasTsubaProcessingCmd, kataboriChoosenByUserCmd)
    End If
    If hasTsubaProcessingCmd Then Call AddTsubaProcessing(ws, currentRow, initialTargetRow, tsubaCountCmd, tsubaRoughMethodCmd, needsPolishingCmd, kataboriChoosenByUserCmd, hasCuttingEdgeCmd)
    If naraiKensakuChoosenByUserCmd Then Call AddNaraiKensaku(ws, currentRow, initialTargetRow)
    If kataboriChoosenByUserCmd Then Call AddKataboriHouden(ws, currentRow, initialTargetRow, hasCuttingEdgeCmd, needsPolishingCmd)
    Call AddPolishingAndCoating(ws, currentRow, initialTargetRow, needsPolishingCmd, hasCuttingEdgeCmd, needsOutsourcingForCoatingCmd, coatingTypeKeyCmd)
    
    Call AddAdjustPProcess(ws, currentRow, initialTargetRow, needsAdjustPCmd)
End Sub

Private Sub AddNaraiKensaku(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long)
    Dim times As Variant
    Dim remarksFromSheetF As String
    Dim MaeDandoriTime As String

    times = GetProcessTimes("倣い研削")

    If IsArray(times) Then
        MaeDandoriTime = CStr(times(0))
        remarksFromSheetF = CStr(times(4))
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "倣い研削", , MaeDandoriTime, times(1), times(2), times(3), remarksFromSheetF)
    Else
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "倣い研削", , "", "1.0", "", "0.2", "※工数/備考未設定")
    End If
End Sub

Private Sub AddKataboriHouden(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, hasCuttingEdge As Boolean, needsPolishing As Boolean)
    Dim times As Variant
    Dim remarksFromSheetF As String
    Dim specificMemo As String
    Dim maeDandori As String, yujin As String, machine As String, setup As String

    times = GetProcessTimes("型彫放電加工")
    If IsArray(times) Then
        maeDandori = CStr(times(0))
        yujin = CStr(times(1))
        machine = CStr(times(2))
        setup = CStr(times(3))
        remarksFromSheetF = CStr(times(4))
    Else
        maeDandori = ""
        yujin = "0.5"
        machine = "1.5"
        setup = "0.2"
        remarksFromSheetF = "※工数/備考未設定"
    End If

    Call AddProcessToSheet(ws, currentRow, initialTargetRow, "型彫放電加工", , maeDandori, yujin, machine, setup, remarksFromSheetF)

    If hasCuttingEdge And Not needsPolishing Then
        specificMemo = "上面"
        times = GetProcessTimes("平面研削 NC", "上面後")
        If IsArray(times) Then
            maeDandori = CStr(times(0))
            yujin = CStr(times(1))
            machine = CStr(times(2))
            setup = CStr(times(3))
        Else
            maeDandori = ""
            yujin = "0.2"
            machine = "0.2"
            setup = "0.1"
        End If
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , maeDandori, yujin, machine, setup, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
    End If
End Sub

Private Sub AddPostHeatTreatmentSG(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                   shape As String, useWireEDM As Boolean, useAfterMC As Boolean, _
                                   autoSg As Boolean, userSgNum As Integer)
    Dim sgCount As Integer

    If autoSg Then
        Select Case shape
            Case "ブロック": sgCount = 6
            Case "プレート"
                If Not useWireEDM And useAfterMC Then
                sgCount = 4
                ElseIf Not useWireEDM Then sgCount = 2
                ElseIf useAfterMC Then sgCount = 4
                Else: sgCount = 3
                End If
            Case "ファミリー加工": sgCount = 2
            Case Else: sgCount = 3
        End Select
    Else
        sgCount = userSgNum
        If sgCount < 1 Or sgCount > 6 Then sgCount = 3
    End If

    Dim i As Integer
    Dim times As Variant
    Dim maeDandori As String, yTime As String, mTime As String, sTimeBase As String, sTimeFinal As String
    Dim specificMemo As String

    times = GetProcessTimes("平面研削 NC", "SG")
    If IsArray(times) Then
        maeDandori = CStr(times(0))
        yTime = CStr(times(1)): mTime = CStr(times(2)): sTimeBase = CStr(times(3))
    Else
        maeDandori = ""
        yTime = "0.3": mTime = "0.3": sTimeBase = "0.1"
    End If

    For i = 1 To sgCount
        sTimeFinal = IIf(i = sgCount, sTimeBase, "")
        specificMemo = i & "/" & sgCount
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , maeDandori, yTime, mTime, sTimeFinal, specificMemo)
    Next i
End Sub

Private Sub AddAfterMCFinish(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, shape As String)
    Dim mcFinishName As String
    Dim maeDandori As String, yujin As String, machine As String, setup As String
    Dim times As Variant
    Dim finalMemo As String

    mcFinishName = IIf(shape = "プレート", "M/C（大）", "M/C（小）")
    times = GetProcessTimes(mcFinishName, "MC仕上げ")

    If IsArray(times) Then
        maeDandori = CStr(times(0))
        yujin = CStr(times(1)): machine = CStr(times(2)): setup = CStr(times(3))
        finalMemo = CStr(times(4))
        If finalMemo = "" Then finalMemo = "MC仕上げ"
    Else
        maeDandori = ""
        If shape = "プレート" Then yujin = "0.4": machine = "0.2": setup = "0.2" Else yujin = "0.25": machine = "0.1": setup = "0.1"
        finalMemo = "MC仕上げ (※工数/備考未設定)"
    End If

    Call AddProcessToSheet(ws, currentRow, initialTargetRow, mcFinishName, , maeDandori, yujin, machine, setup, finalMemo)
End Sub

Private Sub AddSmallStartHole(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long)
    Dim times As Variant
    Dim remarksFromSheetF As String
    Dim MaeDandoriTime As String
    times = GetProcessTimes("細穴放電加工")
    If IsArray(times) Then
        MaeDandoriTime = CStr(times(0))
        remarksFromSheetF = CStr(times(4))
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "細穴放電加工", , MaeDandoriTime, times(1), times(2), times(3), remarksFromSheetF)
    Else
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "細穴放電加工", , "", "0.8", , "0.1", "※工数/備考未設定")
    End If
End Sub

Private Sub AddWireEDMProcessing(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                 isDia10OrLess As Boolean, hasShapeProcessing As Boolean, isFamilyProcessing As Boolean)
    Dim times As Variant
    Dim remarksFromSheetF As String
    Dim maeDandori As String, yTime As String, mTime As String, sTime As String
    Dim specificMemo As String

    If isFamilyProcessing Then
        If hasShapeProcessing Then
            specificMemo = "荒加工"
            times = GetProcessTimes("ﾜｲﾔ放電加工", "荒加工")
            If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "3": sTime = ""
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
            
            specificMemo = "ｶｽ取り・仕上げ"
            times = GetProcessTimes("ﾜｲﾔ放電加工", "ｶｽ取り・仕上げ")
            If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "6": sTime = "0.5"
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        Else
            times = GetProcessTimes("ﾜｲﾔ放電加工")
            If IsArray(times) Then
                maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4))
            Else
                maeDandori = "": yTime = "0.75": mTime = "2": sTime = "0.5": remarksFromSheetF = "※工数/備考未設定"
            End If
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, remarksFromSheetF)
        End If
    ElseIf isDia10OrLess And hasShapeProcessing Then
        specificMemo = "荒加工"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "荒加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "3": sTime = ""
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        
        specificMemo = "ｶｽ取り・仕上げ"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "ｶｽ取り・仕上げ")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "6": sTime = "0.5"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
    ElseIf isDia10OrLess Or Not hasShapeProcessing Then
        times = GetProcessTimes("ﾜｲﾔ放電加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4)) Else maeDandori = "": yTime = "0.75": mTime = "2": sTime = "0.5": remarksFromSheetF = "※工数/備考未設定"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, remarksFromSheetF)
    Else
        specificMemo = "荒加工"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "荒加工")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "3": sTime = ""
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        
        specificMemo = "ｶｽ取り・仕上げ"
        times = GetProcessTimes("ﾜｲﾔ放電加工", "ｶｽ取り・仕上げ")
        If IsArray(times) Then maeDandori = CStr(times(0)): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.75": mTime = "6": sTime = "0.5"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "ﾜｲﾔ放電加工", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
    End If
End Sub

Private Sub AddPostWireEDMGrinding(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                   shape As String, needsPolishing As Boolean, hasCuttingEdge As Boolean, hasTsubaProcessing As Boolean, _
                                   kataboriChoosenByUserAsLaterStep As Boolean)
    Dim specificMemo As String
    Dim times As Variant
    Dim processKey As String, processKeyDetail As String
    Dim maeDandori As String, yTime As String, mTime As String, sTime As String

    If shape = "ファミリー加工" Then
        If needsPolishing Then
            processKey = "平面研削 汎用": processKeyDetail = "ファミリー後ヘソ取り": specificMemo = "ﾍｿ取り"
            times = GetProcessTimes(processKey, processKeyDetail): If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "": sTime = "0.1"
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, processKey, , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        Else
            processKey = "平面研削 NC": specificMemo = "ﾍｿ取り"
            If hasCuttingEdge And Not hasTsubaProcessing And Not kataboriChoosenByUserAsLaterStep Then specificMemo = "ﾍｿ・上面"
            processKeyDetail = IIf(specificMemo = "ﾍｿ・上面", "ファミリー後ヘソ上面", "ファミリー後ヘソ取り")
            times = GetProcessTimes(processKey, processKeyDetail): If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "0.3": sTime = "0.1"
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, processKey, , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        End If
    ElseIf shape = "ブロック" Or shape = "プレート" Then
        If hasCuttingEdge And Not needsPolishing Then
            Dim addThisSG As Boolean: addThisSG = True
            If kataboriChoosenByUserAsLaterStep Then addThisSG = False
            If addThisSG And hasTsubaProcessing Then
                If Not needsPolishing And Not kataboriChoosenByUserAsLaterStep Then addThisSG = False
            End If
            If addThisSG Then
                Dim grindingMachine As String
                grindingMachine = IIf(shape = "プレート", "平面研削 NC", "平面研削 汎用")
                specificMemo = "上面"
                times = GetProcessTimes(grindingMachine, "上面後"): If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = IIf(grindingMachine = "平面研削 NC", "0.2", ""): sTime = "0.1"
                Call AddProcessToSheet(ws, currentRow, initialTargetRow, grindingMachine, , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
            End If
        End If
    End If
End Sub

Private Sub AddTsubaProcessing(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                               tsubaCount As Integer, tsubaRoughMethod As String, needsPolishingForTsubaUe As Boolean, _
                               kataboriChoosenByUser As Boolean, ByVal hasCuttingEdgeAsParam As Boolean)
    Dim n As Integer
    Dim isLastTsuba As Boolean
    Dim specificMemoRough As String, specificMemoFinish As String
    Dim timesRough As Variant, timesFinish As Variant
    Dim maeDandoriRough As String, yRough As String, mRough As String, sRough As String
    Dim maeDandoriFinish As String, yFinish As String, mFinish As String, sFinish As String

    timesRough = GetProcessTimes(tsubaRoughMethod, "つば荒")
    timesFinish = GetProcessTimes("平面研削 NC", "つば仕上げ")

    If IsArray(timesRough) Then maeDandoriRough = CStr(timesRough(0)): yRough = CStr(timesRough(1)): mRough = CStr(timesRough(2)): sRough = CStr(timesRough(3)) Else maeDandoriRough = "": yRough = "0.6": mRough = "0.1": sRough = "0.1"
    If IsArray(timesFinish) Then maeDandoriFinish = CStr(timesFinish(0)): yFinish = CStr(timesFinish(1)): mFinish = CStr(timesFinish(2)): sFinish = CStr(timesFinish(3)) Else maeDandoriFinish = "": yFinish = "0.3": mFinish = "0.1": sFinish = "0.1"

    For n = 1 To tsubaCount
        specificMemoRough = "つば荒 " & n & "/" & tsubaCount
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, tsubaRoughMethod, , maeDandoriRough, yRough, mRough, sRough, specificMemoRough & IIf(IsArray(timesRough), "", " (※工数未設定)"))

        isLastTsuba = (n = tsubaCount)
        specificMemoFinish = "つば仕上げ " & n & "/" & tsubaCount
        If isLastTsuba And hasCuttingEdgeAsParam And Not needsPolishingForTsubaUe And Not kataboriChoosenByUser Then
            specificMemoFinish = specificMemoFinish & "・上面"
        End If
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , maeDandoriFinish, yFinish, mFinish, sFinish, specificMemoFinish & IIf(IsArray(timesFinish), "", " (※工数未設定)"))
    Next n
End Sub

Private Sub AddPolishingAndCoating(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                                   needsPolishing As Boolean, hasCuttingEdge As Boolean, _
                                   needsOutsourcingForCoating As Boolean, coatingTypeKey As String)
    Dim times As Variant
    Dim remarksFromSheetF As String
    Dim specificMemo As String
    Dim maeDandori As String, yTime As String, mTime As String, sTime As String

    If needsPolishing Then
        times = GetProcessTimes("磨き")
        If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3): remarksFromSheetF = CStr(times(4)) Else maeDandori = "": yTime = "0.5": mTime = "": sTime = "": remarksFromSheetF = "※工数/備考未設定"
        Call AddProcessToSheet(ws, currentRow, initialTargetRow, "磨き", , maeDandori, yTime, mTime, sTime, remarksFromSheetF)

        If hasCuttingEdge Then
            specificMemo = "上面"
            times = GetProcessTimes("平面研削 NC", "上面後")
            If IsArray(times) Then maeDandori = times(0): yTime = times(1): mTime = times(2): sTime = times(3) Else maeDandori = "": yTime = "0.2": mTime = "0.2": sTime = "0.1"
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "平面研削 NC", , maeDandori, yTime, mTime, sTime, specificMemo & IIf(IsArray(times), "", " (※工数未設定)"))
        End If
    End If

    If needsOutsourcingForCoating And coatingTypeKey <> "" Then
        Dim coatingSupplierName As String
        coatingSupplierName = GetOutsourcingSupplierName(coatingTypeKey)
        If coatingSupplierName <> "" Then
            Call AddProcessToSheet(ws, currentRow, initialTargetRow, "外注", coatingSupplierName)
        End If
    End If
End Sub




