Option Explicit

' === 設定項目 (ユーザー提供情報に基づき修正) ===
Const TARGET_SHEET_NAME As String = "過去データ"  ' ★要確認: 実際の過去データシート名
Const COL_REMARKS_PART_OVERALL As String = "Y"   ' Y列: 備考 (部品全体)
Const COL_PROCESS_INFO_PART_OVERALL As String = "Z" ' Z列: 購入先/処理 (部品全体 - 熱処理方法、コーティング種別など)
Const COL_MATERIAL As String = "AC"              ' AC列: 材質 (部品全体)
Const COL_HARDNESS As String = "AE"              ' AE列: 焼 (焼入れ硬度)
Const COL_HINMEI As String = "AH"                ' AH列: 品名
Const COL_KOUTEI_NAME As String = "AJ"           ' AJ列: 工程名
Const COL_SUPPLIER_NAME As String = "AL"         ' AL列: 略称 (仕入れ先=業者名)
Const COL_PROCESS_REMARKS As String = "AT"       ' AT列: 工程備考
' AS列（加工内容）は今回のエラーチェックでは直接使用しないが、将来的にE16などで利用価値あり
' === 設定項目ここまで ===

Sub SummarizePastProcessErrors_V3() ' メインプロシージャ名をV3に変更
    Dim wsTarget As Worksheet
    Dim wsResult As Worksheet
    Dim lastRow As Long
    Dim i As Long, r As Long
    Dim currentHinmei As String
    Dim prevHinmei As String
    Dim partStartRow As Long
    Dim errorCounts As Object ' Dictionary for error counts
    Dim errorMessages As Object ' Dictionary for error descriptions

    On Error GoTo ErrorHandler

    On Error Resume Next
    Set wsTarget = ThisWorkbook.Sheets(TARGET_SHEET_NAME)
    On Error GoTo ErrorHandler
    If wsTarget Is Nothing Then
        MsgBox "処理対象シート「" & TARGET_SHEET_NAME & "」が見つかりません。" & vbCrLf & _
               "コード内の TARGET_SHEET_NAME を確認してください。", vbExclamation
        Exit Sub
    End If

    Application.ScreenUpdating = False

    Set wsResult = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
    On Error Resume Next
    wsResult.name = "エラーチェック結果_" & Format(Now, "yyyymmdd_hhmmss")
    If Err.Number <> 0 Then
        wsResult.name = "エラーチェック結果_" & Format(Now, "yyyymmdd_hhmmss_") & CStr(Int(Rnd * 100))
        Err.Clear
    End If
    On Error GoTo ErrorHandler

    Set errorCounts = CreateObject("Scripting.Dictionary")
    Set errorMessages = CreateObject("Scripting.Dictionary")

    ' 既存のエラーメッセージ
    errorMessages.Add "E01", "材質と購入先の不整合"
    errorMessages.Add "E02", "材質と熱処理業者の不整合"
    errorMessages.Add "E03", "コーティング種類とコーティング業者の不整合"
    errorMessages.Add "E04A", "コーティング指示あり、磨き工程なし"
    errorMessages.Add "E04B", "コーティング指示あり、対応外注工程なし"
    errorMessages.Add "E05A", "熱処理必須材質なのに熱処理工程なし"
    errorMessages.Add "E05B", "熱処理不要材質なのに熱処理工程あり"
    errorMessages.Add "E08", "外注指示で業者名欠落"
    errorMessages.Add "E09A", "主材購入で業者名欠落"
    errorMessages.Add "E09B", "ミスミ購入品と主材購入が重複"
    errorMessages.Add "E10A", "ゲイビ外注(材料～焼き)なのに後工程なし"
    errorMessages.Add "E10B", "ゲイビ外注(荒加工のみ)で熱処理必須なのに熱処理なし"
    errorMessages.Add "E11", "M/C工程の連続回数と工程備考の不整合"
    errorMessages.Add "E12", "焼き入れ後SG回数の不整合 (限定的チェック)"
    ' 新規追加のエラーメッセージ
    errorMessages.Add "E13", "熱処理指示と焼入れ硬度記録の不整合"
    errorMessages.Add "E16", "不適切な工程順序 (例: 熱処理後の荒加工)"
    errorMessages.Add "E17", "Y列備考｢ファミリー加工｣指示と関連工程の不整合"
    errorMessages.Add "E18", "Y列備考｢同時加工(切り離し)｣指示と初期工程の不整合"


    Dim key As Variant
    For Each key In errorMessages.Keys
        If Not errorCounts.Exists(key) Then ' 重複追加を避ける
            errorCounts.Add key, 0
        End If
    Next key

    If wsTarget.FilterMode Then wsTarget.ShowAllData
    lastRow = wsTarget.Cells(Rows.Count, COL_HINMEI).End(xlUp).Row
    prevHinmei = ""
    If lastRow < 2 Then
        MsgBox "データが見つからないか、ヘッダー行のみです。", vbInformation
        GoTo Finally
    End If
    partStartRow = 2

    For i = 2 To lastRow + 1
        If i <= lastRow Then
            currentHinmei = Trim(CStr(wsTarget.Cells(i, COL_HINMEI).Value))
        Else
            currentHinmei = "###END_OF_FILE_MARKER###" & Rnd()
        End If

        If currentHinmei <> prevHinmei And prevHinmei <> "" Then
            Call CheckPartErrorsForAllTypes_V3(wsTarget, partStartRow, i - 1, errorCounts) ' V3を呼び出し
            partStartRow = i
        End If
        
        If i <= lastRow Then
          prevHinmei = currentHinmei
        ElseIf i = lastRow + 1 And prevHinmei <> "" And partStartRow <= lastRow Then
             Call CheckPartErrorsForAllTypes_V3(wsTarget, partStartRow, lastRow, errorCounts) ' V3を呼び出し
        End If
    Next i

    wsResult.Cells(1, 1).Value = "エラーコード"
    wsResult.Cells(1, 2).Value = "エラー内容"
    wsResult.Cells(1, 3).Value = "件数"
    r = 2
    ' エラーメッセージのキーでソートして出力 (任意)
    Dim sortedKeys As Object
    Set sortedKeys = CreateObject("System.Collections.ArrayList")
    For Each key In errorMessages.Keys
        sortedKeys.Add key
    Next
    sortedKeys.Sort

    For Each key In sortedKeys ' ソートされたキーでループ
        wsResult.Cells(r, 1).Value = key
        wsResult.Cells(r, 2).Value = errorMessages(key)
        wsResult.Cells(r, 3).Value = errorCounts(key)
        r = r + 1
    Next key


    wsResult.Columns("A:C").AutoFit
    wsResult.Activate
    MsgBox "エラーチェックが完了しました。結果はシート「" & wsResult.name & "」に出力されました。", vbInformation

Finally:
    Application.ScreenUpdating = True
    Set wsTarget = Nothing
    Set wsResult = Nothing
    Set errorCounts = Nothing
    Set errorMessages = Nothing
    Set sortedKeys = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "エラーが発生しました。" & vbCrLf & "エラー番号: " & Err.Number & vbCrLf & "エラー内容: " & Err.Description, vbCritical
    Resume Finally
End Sub

Private Sub CheckPartErrorsForAllTypes_V3(ByVal ws As Worksheet, ByVal startRow As Long, ByVal endRow As Long, ByRef errorCounts As Object)
    Dim materialName As String
    Dim partOverallRemarks As String         ' Y列
    Dim partOverallProcessInfo As String     ' Z列
    Dim partHardnessInfo As String           ' AE列 (新規追加)
    Dim partProcesses As Collection
    Dim procDetail As Object
    Dim i As Long

    If startRow > endRow Then Exit Sub

    materialName = GetMaterialNameFromCodeHelper(Trim(CStr(ws.Cells(startRow, COL_MATERIAL).Value)))
    partOverallRemarks = Trim(CStr(ws.Cells(startRow, COL_REMARKS_PART_OVERALL).Value))
    partOverallProcessInfo = Trim(CStr(ws.Cells(startRow, COL_PROCESS_INFO_PART_OVERALL).Value))
    partHardnessInfo = Trim(CStr(ws.Cells(startRow, COL_HARDNESS).Value)) ' AE列から取得

    Set partProcesses = New Collection
    For i = startRow To endRow
        If Trim(CStr(ws.Cells(i, COL_KOUTEI_NAME).Value)) <> "" Then
            Set procDetail = CreateObject("Scripting.Dictionary")
            procDetail("KOUTEI") = Trim(CStr(ws.Cells(i, COL_KOUTEI_NAME).Value))
            procDetail("GYOUSHA") = Trim(CStr(ws.Cells(i, COL_SUPPLIER_NAME).Value))
            procDetail("BIKOU") = Trim(CStr(ws.Cells(i, COL_PROCESS_REMARKS).Value))
            ' AS列(加工内容)も収集しておくとE16などで役立つ可能性
            ' procDetail("K_conteudo") = Trim(CStr(ws.Cells(i, "AS").Value)) ' AS列は "AS"
            partProcesses.Add procDetail
        End If
    Next i

    If partProcesses.Count = 0 Then Exit Sub

    ' 既存のエラーチェック
    If CheckE01_MaterialSupplierMismatch_V2(partProcesses, materialName) Then errorCounts("E01") = errorCounts("E01") + 1
    If CheckE02_MaterialHeatTreatSupplierMismatch_V2(partProcesses, materialName, partOverallProcessInfo) Then errorCounts("E02") = errorCounts("E02") + 1
    If CheckE03_CoatingTypeSupplierMismatch_V2(partProcesses, partOverallProcessInfo) Then errorCounts("E03") = errorCounts("E03") + 1
    Dim e04Result As String: e04Result = CheckE04_CoatingRelatedProcess_V2(partProcesses, partOverallProcessInfo)
    If InStr(e04Result, "A") > 0 Then errorCounts("E04A") = errorCounts("E04A") + 1
    If InStr(e04Result, "B") > 0 Then errorCounts("E04B") = errorCounts("E04B") + 1
    Dim e05Result As String: e05Result = CheckE05_HeatTreatmentNecessity_V2(partProcesses, materialName)
    If InStr(e05Result, "A") > 0 Then errorCounts("E05A") = errorCounts("E05A") + 1
    If InStr(e05Result, "B") > 0 Then errorCounts("E05B") = errorCounts("E05B") + 1
    If CheckE08_OutsourceSupplierMissing_V2(partProcesses) Then errorCounts("E08") = errorCounts("E08") + 1
    Dim e09Result As String: e09Result = CheckE09_PurchaseRelated_V2(partProcesses)
    If InStr(e09Result, "A") > 0 Then errorCounts("E09A") = errorCounts("E09A") + 1
    If InStr(e09Result, "B") > 0 Then errorCounts("E09B") = errorCounts("E09B") + 1
    Dim e10Result As String: e10Result = CheckE10_GeibiOutsourcePattern_V2(partProcesses, materialName, partOverallRemarks, partOverallProcessInfo)
    If InStr(e10Result, "A") > 0 Then errorCounts("E10A") = errorCounts("E10A") + 1
    If InStr(e10Result, "B") > 0 Then errorCounts("E10B") = errorCounts("E10B") + 1
    If CheckE11_MCProcessRemarksMismatch_V2(partProcesses) Then errorCounts("E11") = errorCounts("E11") + 1
    If CheckE12_SGProcessCountMismatch_V2(partProcesses, partOverallRemarks) Then errorCounts("E12") = errorCounts("E12") + 1

    ' 新規追加のエラーチェック
    If CheckE13_HeatTreatHardnessMismatch_V3(processes:=partProcesses, partOverallProcessInfo:=partOverallProcessInfo, partHardnessInfo:=partHardnessInfo) Then errorCounts("E13") = errorCounts("E13") + 1
    If CheckE16_ImproperProcessOrder_V3(processes:=partProcesses) Then errorCounts("E16") = errorCounts("E16") + 1
    If CheckE17_FamilyProcessMismatch_V3(processes:=partProcesses, partOverallRemarks:=partOverallRemarks) Then errorCounts("E17") = errorCounts("E17") + 1
    If CheckE18_PostFamilyCutProcessMismatch_V3(processes:=partProcesses, partOverallRemarks:=partOverallRemarks) Then errorCounts("E18") = errorCounts("E18") + 1
End Sub

' --- 既存の個別エラーチェック関数群 (CheckE01～E12, _V2のまま) ---
Private Function CheckE01_MaterialSupplierMismatch_V2(ByVal processes As Collection, ByVal materialName As String) As Boolean
    CheckE01_MaterialSupplierMismatch_V2 = False
    Dim proc As Object, expectedSupplier As String, actualSupplier As String
    For Each proc In processes
        If proc("KOUTEI") = "主材購入" Then
            actualSupplier = proc("GYOUSHA")
            Select Case UCase(materialName)
                Case "SKH51", "HAP40", "SKD51": expectedSupplier = "ﾒﾀﾙﾜﾝ"
                Case "DC53", "SKD11", "SKS3", "SS400": expectedSupplier = "深江特殊鋼"
                Case "SLD-MAGIC": expectedSupplier = "ﾒﾀﾙﾃｯｸ"
                Case "FDAC", "S50C", "S50C相当", "HPM38", "NAK80": expectedSupplier = "小山鋼材"
                Case Else: expectedSupplier = ""
            End Select
            If expectedSupplier <> "" And actualSupplier <> "" And UCase(actualSupplier) <> UCase(expectedSupplier) Then
                CheckE01_MaterialSupplierMismatch_V2 = True
                Exit Function
            End If
        End If
    Next
End Function

Private Function CheckE02_MaterialHeatTreatSupplierMismatch_V2(ByVal processes As Collection, ByVal materialName As String, ByVal partOverallProcessInfo As String) As Boolean
    CheckE02_MaterialHeatTreatSupplierMismatch_V2 = False
    Dim proc As Object, expectedSupplier As String, actualSupplier As String, hasSubZero As Boolean
    
    hasSubZero = False
    Dim normalizedZ As String: normalizedZ = UCase(NormalizeTextForSearchHelper(partOverallProcessInfo))
    If InStr(normalizedZ, "SUB0") > 0 Or InStr(normalizedZ, "ｻﾌﾞ0") > 0 Or InStr(normalizedZ, "S0") > 0 Or InStr(normalizedZ, "サブゼロ") > 0 Then
        hasSubZero = True
    End If

    For Each proc In processes
        If proc("KOUTEI") = "熱処理" Then
            actualSupplier = proc("GYOUSHA")
            If hasSubZero Then
                expectedSupplier = "ｴｼﾞｿﾝ熱処理"
            Else
                Select Case UCase(materialName)
                    Case "SKH51", "HAP40", "SKD51": expectedSupplier = "ﾘﾋﾄ精光"
                    Case "DC53", "SKD11", "SKS3":   expectedSupplier = "光陽産業 高温"
                    Case "HPM38": expectedSupplier = "光陽産業"
                    Case "SLD-MAGIC": expectedSupplier = "ｴｼﾞｿﾝ熱処理"
                    Case Else: expectedSupplier = ""
                End Select
            End If
            If expectedSupplier <> "" And actualSupplier <> "" And UCase(actualSupplier) <> UCase(expectedSupplier) Then
                CheckE02_MaterialHeatTreatSupplierMismatch_V2 = True
                Exit Function
            End If
        End If
    Next
End Function

Private Function CheckE03_CoatingTypeSupplierMismatch_V2(ByVal processes As Collection, ByVal partOverallProcessInfo As String) As Boolean
    CheckE03_CoatingTypeSupplierMismatch_V2 = False
    Dim proc As Object, coatingType As String, expectedSupplier As String, actualSupplier As String
    
    coatingType = ""
    Dim normalizedZ As String: normalizedZ = UCase(NormalizeTextForSearchHelper(partOverallProcessInfo))
    If InStr(normalizedZ, "ALCRN") > 0 Then coatingType = "AlCrN"
    If InStr(normalizedZ, "TICN") > 0 Then coatingType = "TiCN"
    If InStr(normalizedZ, "DNF") > 0 Then coatingType = "DNF"

    If coatingType = "" Then Exit Function

    Select Case coatingType
        Case "AlCrN": expectedSupplier = "和興産業"
        Case "TiCN": expectedSupplier = "北熱"
        Case "DNF": expectedSupplier = "和興産業"
        Case Else: expectedSupplier = ""
    End Select

    If expectedSupplier = "" Then Exit Function

    For Each proc In processes
        If proc("KOUTEI") = "外注" Or UCase(proc("KOUTEI")) Like "*" & UCase(coatingType) & "*" Then
            actualSupplier = proc("GYOUSHA")
            If actualSupplier <> "" And UCase(actualSupplier) <> UCase(expectedSupplier) Then
                CheckE03_CoatingTypeSupplierMismatch_V2 = True
                Exit Function
            End If
        End If
    Next
End Function

Private Function CheckE04_CoatingRelatedProcess_V2(ByVal processes As Collection, ByVal partOverallProcessInfo As String) As String
    Dim result As String: result = ""
    Dim proc As Object, hasCoatingInstruction As Boolean, hasMigaki As Boolean, hasCoatingGaichuProcess As Boolean
    hasCoatingInstruction = False: hasMigaki = False: hasCoatingGaichuProcess = False

    Dim normalizedZ As String: normalizedZ = UCase(NormalizeTextForSearchHelper(partOverallProcessInfo))
    If InStr(normalizedZ, "ALCRN") > 0 Or InStr(normalizedZ, "TICN") > 0 Or InStr(normalizedZ, "DNF") > 0 Then
        hasCoatingInstruction = True
    End If

    Dim coatingType As String: coatingType = ""
    If InStr(normalizedZ, "ALCRN") > 0 Then coatingType = "AlCrN"
    If InStr(normalizedZ, "TICN") > 0 Then coatingType = "TiCN"
    If InStr(normalizedZ, "DNF") > 0 Then coatingType = "DNF"

    Dim expectedCoatingSupplier As String: expectedCoatingSupplier = ""
    If coatingType <> "" Then
        Select Case coatingType
            Case "AlCrN": expectedCoatingSupplier = "和興産業"
            Case "TiCN": expectedCoatingSupplier = "北熱"
            Case "DNF": expectedCoatingSupplier = "和興産業"
        End Select
    End If

    For Each proc In processes
        If proc("KOUTEI") = "磨き" Then hasMigaki = True
        If proc("KOUTEI") = "外注" Then
            If expectedCoatingSupplier <> "" And UCase(proc("GYOUSHA")) = UCase(expectedCoatingSupplier) Then
                hasCoatingGaichuProcess = True
            ElseIf coatingType <> "" And (UCase(proc("GYOUSHA")) = "和興産業" Or UCase(proc("GYOUSHA")) = "北熱") Then
                 hasCoatingGaichuProcess = True
            End If
        ElseIf UCase(proc("KOUTEI")) Like "*" & UCase(coatingType) & "*" And coatingType <> "" Then
             hasCoatingGaichuProcess = True
        End If
    Next

    If hasCoatingInstruction Then
        If Not hasMigaki Then result = result & "A"
        If Not hasCoatingGaichuProcess Then result = result & "B"
    End If
    CheckE04_CoatingRelatedProcess_V2 = result
End Function

Private Function CheckE05_HeatTreatmentNecessity_V2(ByVal processes As Collection, ByVal materialName As String) As String
    Dim result As String: result = ""
    Dim proc As Object, hasHeatTreatmentProcess As Boolean, isHeatTreatmentRequired As Boolean, isHeatTreatmentUnnecessary As Boolean
    hasHeatTreatmentProcess = False

    For Each proc In processes
        If proc("KOUTEI") = "熱処理" Then
            hasHeatTreatmentProcess = True
            Exit For
        End If
    Next

    isHeatTreatmentRequired = False
    isHeatTreatmentUnnecessary = False
    Select Case UCase(materialName)
        Case "NAK80", "FDAC", "SS400": isHeatTreatmentUnnecessary = True
        Case "": isHeatTreatmentRequired = False
        Case Else: isHeatTreatmentRequired = True
    End Select

    If isHeatTreatmentRequired And Not hasHeatTreatmentProcess Then result = result & "A"
    If isHeatTreatmentUnnecessary And hasHeatTreatmentProcess Then result = result & "B"
    CheckE05_HeatTreatmentNecessity_V2 = result
End Function

Private Function CheckE08_OutsourceSupplierMissing_V2(ByVal processes As Collection) As Boolean
    CheckE08_OutsourceSupplierMissing_V2 = False
    Dim proc As Object
    For Each proc In processes
        If proc("KOUTEI") = "外注" And proc("GYOUSHA") = "" Then
            CheckE08_OutsourceSupplierMissing_V2 = True
            Exit Function
        End If
    Next
End Function

Private Function CheckE09_PurchaseRelated_V2(ByVal processes As Collection) As String
    Dim result As String: result = ""
    Dim proc As Object, isMisumiPurchase As Boolean, hasOtherShuzaiKounyu As Boolean
    isMisumiPurchase = False: hasOtherShuzaiKounyu = False
    Dim shuzaiGyoushaMissingChecked As Boolean: shuzaiGyoushaMissingChecked = False

    For Each proc In processes
        If Not shuzaiGyoushaMissingChecked And proc("KOUTEI") = "主材購入" And proc("GYOUSHA") = "" Then
            result = result & "A"
            shuzaiGyoushaMissingChecked = True
        End If
        If proc("KOUTEI") = "副材（購入品）" And UCase(proc("GYOUSHA")) = "ﾐｽﾐ" Then
            isMisumiPurchase = True
        End If
    Next
    
    If isMisumiPurchase Then
        For Each proc In processes
            If proc("KOUTEI") = "主材購入" Then
                hasOtherShuzaiKounyu = True
                Exit For
            End If
        Next
        If hasOtherShuzaiKounyu Then result = result & "B"
    End If
    CheckE09_PurchaseRelated_V2 = result
End Function

Private Function CheckE10_GeibiOutsourcePattern_V2(ByVal processes As Collection, ByVal materialName As String, ByVal partOverallRemarks As String, ByVal partOverallProcessInfo As String) As String
    Dim result As String: result = ""
    Dim proc As Object, isGeibiZairyoYaki As Boolean, isGeibiArakako As Boolean
    Dim hasLaterProcess As Boolean, hasHeatTreatmentForGeibiArakako As Boolean
    isGeibiZairyoYaki = False: isGeibiArakako = False: hasLaterProcess = False: hasHeatTreatmentForGeibiArakako = False
    
    Dim searchPatternText As String
    searchPatternText = UCase(NormalizeTextForSearchHelper(partOverallRemarks & " " & partOverallProcessInfo))

    If InStr(searchPatternText, "材料~焼きまで") > 0 Or InStr(searchPatternText, "材料～焼きまで") > 0 Then isGeibiZairyoYaki = True
    If InStr(searchPatternText, "荒加工のみ") > 0 Then isGeibiArakako = True
    
    Dim foundGeibiGaichu As Boolean: foundGeibiGaichu = False
    For Each proc In processes
        If UCase(proc("GYOUSHA")) = "ｹﾞｲﾋﾞ鋼業" And proc("KOUTEI") = "外注" Then
            foundGeibiGaichu = True
            Dim kouteiBikouNorm As String: kouteiBikouNorm = UCase(NormalizeTextForSearchHelper(proc("BIKOU")))
            If InStr(kouteiBikouNorm, "材料~焼きまで") > 0 Or InStr(kouteiBikouNorm, "材料～焼きまで") > 0 Then isGeibiZairyoYaki = True
            If InStr(kouteiBikouNorm, "荒加工のみ") > 0 Then isGeibiArakako = True
            Exit For
        End If
    Next

    If Not foundGeibiGaichu And (isGeibiZairyoYaki Or isGeibiArakako) Then Exit Function

    For Each proc In processes
        If proc("KOUTEI") = "平面研削 NC" Or proc("KOUTEI") = "ワイヤ放電加工" Or _
           proc("KOUTEI") = "調整P" Or proc("KOUTEI") = "調整（P）" Then
            hasLaterProcess = True
        End If
        If proc("KOUTEI") = "熱処理" Then hasHeatTreatmentForGeibiArakako = True
    Next

    If isGeibiZairyoYaki And Not hasLaterProcess Then result = result & "A"
    If isGeibiArakako Then
        Dim isHeatTreatmentRequired As Boolean
        Select Case UCase(materialName)
            Case "NAK80", "FDAC", "SS400", "": isHeatTreatmentRequired = False
            Case Else: isHeatTreatmentRequired = True
        End Select
        If isHeatTreatmentRequired And Not hasHeatTreatmentForGeibiArakako Then result = result & "B"
    End If
    CheckE10_GeibiOutsourcePattern_V2 = result
End Function

Private Function CheckE11_MCProcessRemarksMismatch_V2(ByVal processes As Collection) As Boolean
    CheckE11_MCProcessRemarksMismatch_V2 = False
    Dim i As Long
    Dim currentMCBlock As Collection
    Set currentMCBlock = New Collection
    Dim proc As Object, prevMCKoutei As String
    prevMCKoutei = ""

    For i = 1 To processes.Count
        Set proc = processes(i)
        Dim currentKoutei As String: currentKoutei = proc("KOUTEI")
        
        If currentKoutei Like "M/C*" Then
            If prevMCKoutei = "" Or currentKoutei = prevMCKoutei Then
                currentMCBlock.Add proc
            Else 
                If currentMCBlock.Count > 1 Then
                    If Not ValidateMCBlockRemarksHelper_V2(currentMCBlock) Then CheckE11_MCProcessRemarksMismatch_V2 = True: Exit Function
                End If
                Set currentMCBlock = New Collection
                currentMCBlock.Add proc
            End If
            prevMCKoutei = currentKoutei
        Else 
            If currentMCBlock.Count > 1 Then
                If Not ValidateMCBlockRemarksHelper_V2(currentMCBlock) Then CheckE11_MCProcessRemarksMismatch_V2 = True: Exit Function
            End If
            Set currentMCBlock = New Collection
            prevMCKoutei = ""
        End If
    Next
    If currentMCBlock.Count > 1 Then
        If Not ValidateMCBlockRemarksHelper_V2(currentMCBlock) Then CheckE11_MCProcessRemarksMismatch_V2 = True
    End If
End Function

Private Function ValidateMCBlockRemarksHelper_V2(ByVal mcBlock As Collection) As Boolean
    ValidateMCBlockRemarksHelper_V2 = True
    Dim expectedTotal As Long: expectedTotal = mcBlock.Count
    Dim i As Long
    Dim proc As Object
    For i = 1 To mcBlock.Count
        Set proc = mcBlock(i)
        Dim bikou As String: bikou = proc("BIKOU")
        Dim expectedRemark As String: expectedRemark = i & "/" & expectedTotal
        If InStr(bikou, expectedRemark) = 0 Then
            If bikou = "" And expectedTotal > 1 Then
                ValidateMCBlockRemarksHelper_V2 = False
                Exit Function
            ElseIf bikou <> "" Then
                ValidateMCBlockRemarksHelper_V2 = False
                Exit Function
            End If
        End If
    Next
End Function

Private Function CheckE12_SGProcessCountMismatch_V2(ByVal processes As Collection, ByVal partOverallRemarks As String) As Boolean
    CheckE12_SGProcessCountMismatch_V2 = False
    Dim sgCount As Long: sgCount = 0
    Dim isFamilyKako As Boolean: isFamilyKako = False
    Dim proc As Object

    If InStr(UCase(NormalizeTextForSearchHelper(partOverallRemarks)), "材変レイアウト") > 0 Or _
       InStr(UCase(NormalizeTextForSearchHelper(partOverallRemarks)), "ファミリー加工") > 0 Then
        isFamilyKako = True
    End If
    
    For Each proc In processes
        If proc("KOUTEI") = "平面研削 NC" Then sgCount = sgCount + 1
        If proc("KOUTEI") = "ファミリー加工" Then isFamilyKako = True 
    Next

    If isFamilyKako Then
        If sgCount > 0 And sgCount <> 2 Then CheckE12_SGProcessCountMismatch_V2 = True
    Else
        If sgCount > 6 Then CheckE12_SGProcessCountMismatch_V2 = True
    End If
End Function

' --- 新規追加のエラーチェック関数群 (V3) ---
Private Function CheckE13_HeatTreatHardnessMismatch_V3(ByVal processes As Collection, ByVal partOverallProcessInfo As String, ByVal partHardnessInfo As String) As Boolean
    CheckE13_HeatTreatHardnessMismatch_V3 = False
    Dim hasHeatTreatmentIndication As Boolean: hasHeatTreatmentIndication = False
    Dim proc As Object

    ' 熱処理指示の確認 (工程リストとZ列)
    For Each proc In processes
        If proc("KOUTEI") = "熱処理" Then
            hasHeatTreatmentIndication = True
            Exit For
        End If
    Next
    If Not hasHeatTreatmentIndication Then
        Dim normalizedZ As String: normalizedZ = UCase(NormalizeTextForSearchHelper(partOverallProcessInfo))
        If InStr(normalizedZ, "焼入") > 0 Or InStr(normalizedZ, "熱処理") > 0 Or InStr(normalizedZ, "調質") > 0 Or _
           InStr(normalizedZ, "SUB0") > 0 Or InStr(normalizedZ, "サブゼロ") > 0 Or InStr(normalizedZ, "S0") > 0 Then
            hasHeatTreatmentIndication = True
        End If
    End If

    ' 硬度情報の確認 (AE列)
    Dim isHardnessRecorded As Boolean: isHardnessRecorded = False
    If partHardnessInfo <> "" And Not (partHardnessInfo Like "－*" Or partHardnessInfo Like "*なし*" Or partHardnessInfo Like "*ナシ*") Then
        ' 数値が含まれているか、または特定の除外文字列でないかで判定（より厳密な判定も可能）
         Dim tempHardness As String: tempHardness = Replace(partHardnessInfo, " ", "")
         tempHardness = Replace(tempHardness, "　", "")
         If IsNumeric(Left(tempHardness,1)) Or UCase(Left(tempHardness,3)) = "HRC" Or UCase(Left(tempHardness,2)) = "HV" Then
            isHardnessRecorded = True
         End If
    End If

    If hasHeatTreatmentIndication And Not isHardnessRecorded Then
        CheckE13_HeatTreatHardnessMismatch_V3 = True ' 熱処理指示あり、硬度記録なし
    ElseIf Not hasHeatTreatmentIndication And isHardnessRecorded Then
        CheckE13_HeatTreatHardnessMismatch_V3 = True ' 熱処理指示なし、硬度記録あり
    End If
End Function

Private Function CheckE16_ImproperProcessOrder_V3(ByVal processes As Collection) As Boolean
    CheckE16_ImproperProcessOrder_V3 = False
    Dim heatTreatmentRow As Long: heatTreatmentRow = 0
    Dim i As Long
    Dim proc As Object

    ' 熱処理工程の位置を特定
    For i = 1 To processes.Count
        Set proc = processes(i)
        If proc("KOUTEI") = "熱処理" Then
            heatTreatmentRow = i
            Exit For
        End If
    Next

    If heatTreatmentRow > 0 And heatTreatmentRow < processes.Count Then ' 熱処理があり、それが最終工程でない場合
        For i = heatTreatmentRow + 1 To processes.Count
            Set proc = processes(i)
            Dim kouteiNameUpper As String: kouteiNameUpper = UCase(proc("KOUTEI"))
            Dim kouteiBikouUpper As String: kouteiBikouUpper = UCase(proc("BIKOU"))
            ' AS列(加工内容)もあればここで確認
            ' Dim kouteiASUpper As String: kouteiASUpper = UCase(proc("K_conteudo")) ' 例

            If kouteiNameUpper Like "M/C*" Then
                If InStr(kouteiNameUpper, "荒") > 0 Or InStr(kouteiBikouUpper, "荒") > 0 Or _
                   kouteiNameUpper Like "M/C-1" Or kouteiNameUpper Like "MC-1" Then ' M/C-1を荒加工とみなす場合
                    CheckE16_ImproperProcessOrder_V3 = True
                    Exit Function
                End If
            End If
        Next i
    End If
End Function

Private Function CheckE17_FamilyProcessMismatch_V3(ByVal processes As Collection, ByVal partOverallRemarks As String) As Boolean
    CheckE17_FamilyProcessMismatch_V3 = False
    Dim hasFamilyIndicationInRemarks As Boolean: hasFamilyIndicationInRemarks = False
    Dim hasFamilyRelatedProcess As Boolean: hasFamilyRelatedProcess = False
    Dim proc As Object

    Dim normalizedY As String: normalizedY = UCase(NormalizeTextForSearchHelper(partOverallRemarks))
    If InStr(normalizedY, "材変レイアウト") > 0 Or InStr(normalizedY, "ファミリー加工") > 0 Then
        hasFamilyIndicationInRemarks = True
    End If

    If hasFamilyIndicationInRemarks Then
        For Each proc In processes
            Dim kouteiNameUpper As String: kouteiNameUpper = UCase(proc("KOUTEI"))
            If kouteiNameUpper = "ワイヤ放電加工" Or kouteiNameUpper = "ワイヤーカット" Or kouteiNameUpper = "ファミリー加工" Then
                hasFamilyRelatedProcess = True
                Exit For
            End If
        Next
        If Not hasFamilyRelatedProcess Then
            CheckE17_FamilyProcessMismatch_V3 = True
        End If
    End If
End Function

Private Function CheckE18_PostFamilyCutProcessMismatch_V3(ByVal processes As Collection, ByVal partOverallRemarks As String) As Boolean
    CheckE18_PostFamilyCutProcessMismatch_V3 = False
    Dim hasPostCutIndicationInRemarks As Boolean: hasPostCutIndicationInRemarks = False
    Dim hasInitialGrinding As Boolean: hasInitialGrinding = False
    Dim proc As Object
    Dim i As Long

    Dim normalizedY As String: normalizedY = UCase(NormalizeTextForSearchHelper(partOverallRemarks))
    If InStr(normalizedY, "同時") > 0 And (InStr(normalizedY, "切り離し") > 0 Or InStr(normalizedY, "カット後") > 0 Or InStr(normalizedY, "カットゴ") > 0) Then
        hasPostCutIndicationInRemarks = True
    End If

    If hasPostCutIndicationInRemarks And processes.Count > 0 Then
        ' 最初の1～3工程程度をチェック
        For i = 1 To Application.WorksheetFunction.Min(3, processes.Count)
            Set proc = processes(i)
            If UCase(proc("KOUTEI")) = "平面研削 汎用" Then
                Dim bikouOrAS As String: bikouOrAS = UCase(NormalizeTextForSearchHelper(proc("BIKOU"))) ' AS列もあれば結合
                If InStr(bikouOrAS, "ヘソトリ") > 0 Or InStr(bikouOrAS, "上面") > 0 Or InStr(bikouOrAS, "ヘソ取り") > 0 Then
                    hasInitialGrinding = True
                    Exit For
                End If
            End If
        Next i
        If Not hasInitialGrinding Then
            CheckE18_PostFamilyCutProcessMismatch_V3 = True
        End If
    End If
End Function


' --- 共通ヘルパー関数 (前回と同様) ---
Private Function GetMaterialNameFromCodeHelper(ByVal materialCode As String) As String
    Select Case UCase(Trim(materialCode))
        Case "SKH51", "DC53", "SLD-MAGIC", "S20C", "S45C", "S50C", "S50C相当", "SS400", "SS41", "SK3", "SK4", "SK4相当", "SKD11", "SKD11相当", "SKD51", "SKD61", "SKD-MAGIC", "SKD相当", "SKH51相当", "SKH52", "SKS3", "SKS3相当", "HAP10", "HAP40", "HAP40相当", "FDAC", "DEX40", "DH2F相当", "ASP23", "粉末ハイス", "粉末ハイス鋼", "粉末ハイス相当", "遊休材DC53", "SUS", "SUS304", "SUS304相当", "ステンシム", "ステンシム（SUS304）", "ステンシムSUS304", "A7075P", "BC6", "QCM8", "GTI20", "V30", "VC-50", "VM-30（超硬）", "VM40", "VM-40", "VM50", "VM-50", "VW-50", "YXR3", "YXR33", "YXR 7", "超硬", "超硬VM40", "HPM38", "NAK80"
            GetMaterialNameFromCodeHelper = materialCode
        Case Else: GetMaterialNameFromCodeHelper = ""
    End Select
End Function

Private Function NormalizeTextForSearchHelper(ByVal inputText As String) As String
    Dim temp As String
    temp = StrConv(inputText, vbWide) 
    temp = StrConv(temp, vbNarrow)    
    temp = StrConv(temp, vbKatakana)  
    temp = UCase(temp)
    temp = Replace(temp, " ", "")    
    temp = Replace(temp, "　", "")  
    NormalizeTextForSearchHelper = temp
End Function

