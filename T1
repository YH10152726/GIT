' ===== 標準モジュール (例: ModuleReOutput) =====

' --- ユーザーフォームから持ってくるか、ここで再定義する定数 ---
Private Const SHEET_KOUTEIHYO As String = "工程表"
Private Const SHEET_LAST_OUTPUT_LOG As String = "LastOutputLog"

' 出力列 (工程表シート) - AddProcessToSheetForModuleで必要
Private Const COL_KOUTEI As Long = 36             ' AJ列: 工程名
Private Const COL_GYOUSHA As Long = 38            ' AL列: 業者
Private Const COL_MAE_DANDORI_OUTPUT As Long = 39 ' AM列: 前段取
Private Const COL_JINKAN_YUJIN As Long = 40       ' AN列: 工数: 有人
Private Const COL_JINKAN_MACHINE As Long = 41     ' AO列: 工数: 機械
Private Const COL_JINKAN_SETUP As Long = 42       ' AP列: 工数: 段取 (後段取)
Private Const COL_BIKOU As Long = 45              ' AS列: 備考


' --- ユーザーフォームの ValidateActiveCell を移植 ---
Public Function ValidateActiveCellForModule(ByVal targetSheet As Worksheet, ByRef outTargetRow As Long) As Boolean
    ValidateActiveCellForModule = False
    If TypeName(ActiveSheet) <> "Worksheet" Or ActiveSheet.name <> targetSheet.name Then
        MsgBox "「" & targetSheet.name & "」シートをアクティブにして、開始セルを選択してください。", vbExclamation
        Exit Function
    End If
    If TypeName(Selection) <> "Range" Then
        MsgBox "開始セルを選択してください。", vbExclamation
        Exit Function
    End If
    If Selection.Cells.CountLarge <> 1 Then
        MsgBox "開始セルを一つだけ選択してください。", vbExclamation
        Exit Function
    End If
    outTargetRow = ActiveCell.Row
    ValidateActiveCellForModule = True
End Function

' --- ユーザーフォームの AddProcessToSheet を移植 ---
Public Sub AddProcessToSheetForModule(ws As Worksheet, ByRef currentRow As Long, initialTargetRow As Long, _
                            ProcessName As String, Optional supplier As String = "", _
                            Optional MaeDandoriTime As Variant = "", Optional YujinTime As Variant = "", Optional MachineTime As Variant = "", Optional GoDandoriTime As Variant = "", _
                            Optional memo As String = "")
    
    ' 行挿入ロジックの改善: 最初の行でも、指定列に何かあれば挿入
    Dim shouldInsert As Boolean
    shouldInsert = False

    If currentRow > initialTargetRow Then
        shouldInsert = True
    Else ' currentRow = initialTargetRow (最初の行)
        If ws.Cells(currentRow, COL_KOUTEI).Value <> "" Or _
           ws.Cells(currentRow, COL_GYOUSHA).Value <> "" Or _
           ws.Cells(currentRow, COL_MAE_DANDORI_OUTPUT).Value <> "" Or _
           ws.Cells(currentRow, COL_JINKAN_YUJIN).Value <> "" Or _
           ws.Cells(currentRow, COL_JINKAN_MACHINE).Value <> "" Or _
           ws.Cells(currentRow, COL_JINKAN_SETUP).Value <> "" Or _
           ws.Cells(currentRow, COL_BIKOU).Value <> "" Then
            shouldInsert = True
        End If
    End If

    If shouldInsert Then
        ws.Rows(currentRow).Insert Shift:=xlDown
    End If

    ' データ書き込み
    If ProcessName <> "" Then ws.Cells(currentRow, COL_KOUTEI).Value = ProcessName
    If supplier <> "" Then ws.Cells(currentRow, COL_GYOUSHA).Value = supplier
    
    ' 時間データは空白でない場合のみ書き込む (CStrで明示的に文字列比較)
    If Not IsEmpty(MaeDandoriTime) And CStr(MaeDandoriTime) <> "" Then ws.Cells(currentRow, COL_MAE_DANDORI_OUTPUT).Value = MaeDandoriTime Else ws.Cells(currentRow, COL_MAE_DANDORI_OUTPUT).ClearContents
    If Not IsEmpty(YujinTime) And CStr(YujinTime) <> "" Then ws.Cells(currentRow, COL_JINKAN_YUJIN).Value = YujinTime Else ws.Cells(currentRow, COL_JINKAN_YUJIN).ClearContents
    If Not IsEmpty(MachineTime) And CStr(MachineTime) <> "" Then ws.Cells(currentRow, COL_JINKAN_MACHINE).Value = MachineTime Else ws.Cells(currentRow, COL_JINKAN_MACHINE).ClearContents
    If Not IsEmpty(GoDandoriTime) And CStr(GoDandoriTime) <> "" Then ws.Cells(currentRow, COL_JINKAN_SETUP).Value = GoDandoriTime Else ws.Cells(currentRow, COL_JINKAN_SETUP).ClearContents
    
    ' 備考の出力形式変更ロジック (ユーザーフォームのものと同じ)
    Dim outputMemo As String
    outputMemo = memo

    If memo <> "" Then
        Dim re As Object
        Dim matches As Object
        
        On Error Resume Next
        Set re = CreateObject("VBScript.RegExp")
        re.pattern = "^(.*?)( \d+/\d+)$" ' 末尾が「 スペース 数字/数字」のパターン
        re.Global = False
        
        If re.Test(memo) Then
            Set matches = re.Execute(memo)
            If matches.Count > 0 Then
                Dim baseTextPart As String
                Dim sequencePart As String
                
                baseTextPart = Trim(matches(0).SubMatches(0))
                sequencePart = Trim(matches(0).SubMatches(1))
                
                If Len(baseTextPart) > 0 Then
                    outputMemo = sequencePart & " " & baseTextPart
                Else
                    outputMemo = sequencePart
                End If
            End If
        End If
        Set re = Nothing
        Set matches = Nothing
        On Error GoTo 0
    End If

    If outputMemo <> "" Then ws.Cells(currentRow, COL_BIKOU).Value = outputMemo Else ws.Cells(currentRow, COL_BIKOU).ClearContents

    currentRow = currentRow + 1
End Sub


' --- ユーザーフォームの cmdExecuteLastOutputToActive_Click を移植・修正 ---
Public Sub ExecuteLastOutputFromLogToActiveSheet()

    Dim wsLog             As Worksheet
    Dim wsTarget          As Worksheet
    Dim lastLoggedRow     As Long
    Dim i                 As Long
    Dim outputStartRow    As Long
    Dim currentOutputRow  As Long

    ' ログから読み込むデータ用の変数
    Dim sProcessName As String
    Dim sSupplier As String
    Dim sMaeDandoriTime As String
    Dim sYujinTime As String
    Dim sMachineTime As String
    Dim sGoDandoriTime As String
    Dim sBikou As String
    ' UserEditedGoDandori や IsGoDandoriUserEdited は、ログのGoDandoriTimeに結果が反映されている前提

    On Error GoTo ErrorHandlerExecuteLastOutput

    ' --- ログシート取得 ---
    Set wsLog = Nothing
    On Error Resume Next
    Set wsLog = ThisWorkbook.Sheets(SHEET_LAST_OUTPUT_LOG)
    On Error GoTo ErrorHandlerExecuteLastOutput ' エラーハンドラを元に戻す
        
    If wsLog Is Nothing Then
        MsgBox "ログシート「" & SHEET_LAST_OUTPUT_LOG & "」が見つかりません。", vbExclamation
        Exit Sub
    End If

    ' --- ログデータの存在確認 ---
    lastLoggedRow = wsLog.Cells(wsLog.Rows.Count, 1).End(xlUp).Row
    If lastLoggedRow < 1 Or IsEmpty(wsLog.Cells(1, 1).Value) Then ' 1行目のA列が空ならログなしと判断
        MsgBox "ログシート「" & SHEET_LAST_OUTPUT_LOG & "」にデータがありません。", vbInformation
        Exit Sub
    End If

    ' --- 出力先シートと開始行取得 ---
    Set wsTarget = ThisWorkbook.Sheets(SHEET_KOUTEIHYO)
    If Not ValidateActiveCellForModule(wsTarget, outputStartRow) Then Exit Sub ' 標準モジュール版の関数を呼び出し
    
    Application.ScreenUpdating = False
    currentOutputRow = outputStartRow

    ' --- ログデータを使用して工程表へ出力 ---
    For i = 1 To lastLoggedRow ' ログは1行目からデータがあると仮定
        sProcessName = CStr(wsLog.Cells(i, 1).Value)
        sSupplier = CStr(wsLog.Cells(i, 2).Value)
        sMaeDandoriTime = CStr(wsLog.Cells(i, 3).Value)
        sYujinTime = CStr(wsLog.Cells(i, 4).Value)
        sMachineTime = CStr(wsLog.Cells(i, 5).Value)
        sGoDandoriTime = CStr(wsLog.Cells(i, 6).Value) ' ログの6列目をGoDandoriTimeとして使用
        sBikou = CStr(wsLog.Cells(i, 7).Value)
        ' ログの8,9列目(UserEditedGoDandori, IsGoDandoriUserEdited)は、
        ' 6列目のGoDandoriTimeに反映されているはずなので、ここでは直接使用しない。

        Call AddProcessToSheetForModule( _
                wsTarget, _
                currentOutputRow, _
                outputStartRow, _
                sProcessName, _
                sSupplier, _
                sMaeDandoriTime, _
                sYujinTime, _
                sMachineTime, _
                sGoDandoriTime, _
                sBikou)
        ' currentRow は AddProcessToSheetForModule 内でインクリメントされる
    Next i


FinallyExecuteLastOutput:
    Application.ScreenUpdating = True
    Set wsLog = Nothing
    Set wsTarget = Nothing
    Exit Sub

ErrorHandlerExecuteLastOutput:
    MsgBox "最終ログの再出力中にエラーが発生しました。" & vbCrLf & _
           "エラー番号: " & Err.Number & vbCrLf & _
           "エラー内容: " & Err.Description, vbCritical
    Resume FinallyExecuteLastOutput
End Sub
